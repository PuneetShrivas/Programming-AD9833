
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000048  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000060  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000381  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000148  00000000  00000000  0000099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000325  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001db  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a7  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  64:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8SPI_initv>:
#include <avr/delay.h>
#include <math.h>

void SPI_init(void)
{
	DDRB=(1<<PINB7)|(1<<PINB5)|(1<<PINB0);         //sets SCK, MOSI and PINB0 as output (Fsync at Pinb0
  6c:	81 ea       	ldi	r24, 0xA1	; 161
  6e:	87 bb       	out	0x17, r24	; 23
	DDRA=(1<<PINA0)|(1<<PINA1)|(1<<PINA2);
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	8a bb       	out	0x1a, r24	; 26
	PORTA=0;
  74:	1b ba       	out	0x1b, r1	; 27
	PORTB|=(1<<PINB7)|(1<<PINB0);					//SCK and Fsync High
  76:	e8 e3       	ldi	r30, 0x38	; 56
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	81 68       	ori	r24, 0x81	; 129
  7e:	80 83       	st	Z, r24
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<CPOL)|(SPR1)|(SPR0)|(1<<SPIE);				//Enable SPI, set master, prescaler = 4, SPI Mode:2
  80:	89 ed       	ldi	r24, 0xD9	; 217
  82:	8d b9       	out	0x0d, r24	; 13
}
  84:	08 95       	ret

00000086 <_Z3ledi>:
void led(int i)
{
	switch (i)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 05       	cpc	r25, r1
  8a:	b1 f0       	breq	.+44     	; 0xb8 <_Z3ledi+0x32>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	91 05       	cpc	r25, r1
  90:	21 f1       	breq	.+72     	; 0xda <_Z3ledi+0x54>
  92:	89 2b       	or	r24, r25
  94:	91 f5       	brne	.+100    	; 0xfa <_Z3ledi+0x74>
	{
		case 0 : PORTA|=(1<<PINA0);
  96:	eb e3       	ldi	r30, 0x3B	; 59
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
  a0:	20 e5       	ldi	r18, 0x50	; 80
  a2:	33 ec       	ldi	r19, 0xC3	; 195
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  a4:	40 e7       	ldi	r20, 0x70	; 112
  a6:	51 e0       	ldi	r21, 0x01	; 1
  a8:	ca 01       	movw	r24, r20
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z3ledi+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	d1 f7       	brne	.-12     	; 0xa8 <_Z3ledi+0x22>
		_delay_ms(5000);
		PORTA = 0; break;
  b4:	1b ba       	out	0x1b, r1	; 27
  b6:	08 95       	ret
		case 1 : PORTA|=(1<<PINA1);
  b8:	eb e3       	ldi	r30, 0x3B	; 59
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
  c2:	20 e5       	ldi	r18, 0x50	; 80
  c4:	33 ec       	ldi	r19, 0xC3	; 195
  c6:	40 e7       	ldi	r20, 0x70	; 112
  c8:	51 e0       	ldi	r21, 0x01	; 1
  ca:	ca 01       	movw	r24, r20
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <_Z3ledi+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d1 f7       	brne	.-12     	; 0xca <_Z3ledi+0x44>
		_delay_ms(5000);
		PORTA = 0; break;
  d6:	1b ba       	out	0x1b, r1	; 27
  d8:	08 95       	ret
		case 2 : PORTA|=(1<<PINA2);
  da:	eb e3       	ldi	r30, 0x3B	; 59
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	80 83       	st	Z, r24
  e4:	20 e5       	ldi	r18, 0x50	; 80
  e6:	33 ec       	ldi	r19, 0xC3	; 195
  e8:	40 e7       	ldi	r20, 0x70	; 112
  ea:	51 e0       	ldi	r21, 0x01	; 1
  ec:	ca 01       	movw	r24, r20
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <_Z3ledi+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d1 f7       	brne	.-12     	; 0xec <_Z3ledi+0x66>
		_delay_ms(5000);
		PORTA = 0; break;
  f8:	1b ba       	out	0x1b, r1	; 27
  fa:	08 95       	ret

000000fc <_Z12SPI_transferh>:
	}
}
void SPI_transfer(uint8_t data)
  fc:	1f 93       	push	r17
  fe:	18 2f       	mov	r17, r24
{
	led(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	
	SPDR=data;
 108:	1f b9       	out	0x0f, r17	; 15
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 10a:	88 e1       	ldi	r24, 0x18	; 24
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z12SPI_transferh+0x10>
	_delay_us(5);
	asm volatile("nop");
 110:	00 00       	nop
	while(!(SPSR&(1<<SPIF))) {;/*wait for data transfer and recieving*/}
 112:	ee e2       	ldi	r30, 0x2E	; 46
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <_Z12SPI_transferh+0x1a>
	led(1);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
}
 124:	1f 91       	pop	r17
 126:	08 95       	ret

00000128 <_Z11SPI_write16t>:
void SPI_write16 (unsigned short data)    	// 	send a 16bit word and use fsync
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	e8 2e       	mov	r14, r24
 132:	f9 2e       	mov	r15, r25
{  led(1);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	unsigned char MSdata=0;
	unsigned char LSdata=0;
	MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PB0);						// 	Fsync Low --> begin frame
 13c:	08 e3       	ldi	r16, 0x38	; 56
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	f8 01       	movw	r30, r16
 142:	80 81       	ld	r24, Z
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	80 83       	st	Z, r24
	led(2);
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	SPI_transfer(MSdata);
 150:	8f 2d       	mov	r24, r15
 152:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z12SPI_transferh>
	SPI_transfer(LSdata);
 156:	8e 2d       	mov	r24, r14
 158:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z12SPI_transferh>
// 	SPDR = MSdata;							// 	send First 8 MS of data
// 	while (!(SPSR & (1<<SPIF)));			//	while busy
// 	SPDR = LSdata;							// 	send Last 8 LS of data
// 	while (!(SPSR & (1<<SPIF)));			//	while busy
led(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	PORTB |= (1<<PB0);						// 	Fsync High --> End of frame
 164:	f8 01       	movw	r30, r16
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
}
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	08 95       	ret

00000176 <_Z10Set_AD9833fi>:

void Set_AD9833(float frequency, int mode)
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
{
	long FreqReg = (frequency*pow(2,28))/Fmclk;  //Calculate frequency to be sent to AD9833
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e8       	ldi	r20, 0x80	; 128
 18c:	5d e4       	ldi	r21, 0x4D	; 77
 18e:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 192:	20 e2       	ldi	r18, 0x20	; 32
 194:	3c eb       	ldi	r19, 0xBC	; 188
 196:	4e eb       	ldi	r20, 0xBE	; 190
 198:	5b e4       	ldi	r21, 0x4B	; 75
 19a:	0e 94 40 01 	call	0x280	; 0x280 <__divsf3>
 19e:	0e 94 a8 01 	call	0x350	; 0x350 <__fixsfsi>
 1a2:	5b 01       	movw	r10, r22
 1a4:	6c 01       	movw	r12, r24
	int MSB = (int)((FreqReg & 0xFFFC000) >> 14);		  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ef 2e       	mov	r14, r31
 1ac:	f0 ec       	ldi	r31, 0xC0	; 192
 1ae:	ff 2e       	mov	r15, r31
 1b0:	ff ef       	ldi	r31, 0xFF	; 255
 1b2:	0f 2f       	mov	r16, r31
 1b4:	ff e0       	ldi	r31, 0x0F	; 15
 1b6:	1f 2f       	mov	r17, r31
 1b8:	f0 2d       	mov	r31, r0
 1ba:	e6 22       	and	r14, r22
 1bc:	f7 22       	and	r15, r23
 1be:	08 23       	and	r16, r24
 1c0:	19 23       	and	r17, r25
 1c2:	0d 2e       	mov	r0, r29
 1c4:	de e0       	ldi	r29, 0x0E	; 14
 1c6:	15 95       	asr	r17
 1c8:	07 95       	ror	r16
 1ca:	f7 94       	ror	r15
 1cc:	e7 94       	ror	r14
 1ce:	da 95       	dec	r29
 1d0:	d1 f7       	brne	.-12     	; 0x1c6 <_Z10Set_AD9833fi+0x50>
 1d2:	d0 2d       	mov	r29, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9f e3       	ldi	r25, 0x3F	; 63
 1d8:	a8 22       	and	r10, r24
 1da:	b9 22       	and	r11, r25
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000; led(1);										  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
// 		case 0 : SPI_write16(0x2100); break;			  //Sine
// 		case 1 : SPI_write16(0x2128); break;			  //Square with same frequency
// 		case 2 : SPI_write16(0x2102); break;		      //Triangle
// 		default: return;
// 	}
	SPI_write16(0x2100);led(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e2       	ldi	r25, 0x21	; 33
 1e8:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	SPI_write16(MSB);led(1);									  //Write MSBs
 1f4:	c7 01       	movw	r24, r14
 1f6:	90 64       	ori	r25, 0x40	; 64
 1f8:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	SPI_write16(LSB);led(2);									  //Write LSBs
 204:	c5 01       	movw	r24, r10
 206:	90 64       	ori	r25, 0x40	; 64
 208:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 ec       	ldi	r25, 0xC0	; 192
 218:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
// 		case 0 : SPI_write16(0x2000); break;			  //Sine
// 		case 1 : SPI_write16(0x2028); break;			  //Square with same frequency
// 		case 2 : SPI_write16(0x2002); break;		      //Triangle
// 		default: return;
// 	}
	SPI_write16(0x2002);
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	90 e2       	ldi	r25, 0x20	; 32
 220:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
}
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	08 95       	ret

00000236 <main>:

int main(void)
{
	SPI_init();
 236:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8SPI_initv>
//	SPI_transfer(1);
	SPI_write16(0x100);led(2);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
 24a:	28 e8       	ldi	r18, 0x88	; 136
 24c:	33 e1       	ldi	r19, 0x13	; 19
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 24e:	40 e7       	ldi	r20, 0x70	; 112
 250:	51 e0       	ldi	r21, 0x01	; 1
 252:	ca 01       	movw	r24, r20
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25c:	d1 f7       	brne	.-12     	; 0x252 <main+0x1c>
	_delay_ms(500);
	SPI_write16(0x100);led(2);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 94 00 	call	0x128	; 0x128 <_Z11SPI_write16t>
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 43 00 	call	0x86	; 0x86 <_Z3ledi>
	
	
    while (1) 
    {Set_AD9833(4000,0);	
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	8a e7       	ldi	r24, 0x7A	; 122
 274:	95 e4       	ldi	r25, 0x45	; 69
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	0e 94 bb 00 	call	0x176	; 0x176 <_Z10Set_AD9833fi>
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <main+0x38>

00000280 <__divsf3>:
 280:	0c d0       	rcall	.+24     	; 0x29a <__divsf3x>
 282:	ae c0       	rjmp	.+348    	; 0x3e0 <__fp_round>
 284:	a6 d0       	rcall	.+332    	; 0x3d2 <__fp_pscB>
 286:	40 f0       	brcs	.+16     	; 0x298 <__divsf3+0x18>
 288:	9d d0       	rcall	.+314    	; 0x3c4 <__fp_pscA>
 28a:	30 f0       	brcs	.+12     	; 0x298 <__divsf3+0x18>
 28c:	21 f4       	brne	.+8      	; 0x296 <__divsf3+0x16>
 28e:	5f 3f       	cpi	r21, 0xFF	; 255
 290:	19 f0       	breq	.+6      	; 0x298 <__divsf3+0x18>
 292:	8f c0       	rjmp	.+286    	; 0x3b2 <__fp_inf>
 294:	51 11       	cpse	r21, r1
 296:	d8 c0       	rjmp	.+432    	; 0x448 <__fp_szero>
 298:	92 c0       	rjmp	.+292    	; 0x3be <__fp_nan>

0000029a <__divsf3x>:
 29a:	b3 d0       	rcall	.+358    	; 0x402 <__fp_split3>
 29c:	98 f3       	brcs	.-26     	; 0x284 <__divsf3+0x4>

0000029e <__divsf3_pse>:
 29e:	99 23       	and	r25, r25
 2a0:	c9 f3       	breq	.-14     	; 0x294 <__divsf3+0x14>
 2a2:	55 23       	and	r21, r21
 2a4:	b1 f3       	breq	.-20     	; 0x292 <__divsf3+0x12>
 2a6:	95 1b       	sub	r25, r21
 2a8:	55 0b       	sbc	r21, r21
 2aa:	bb 27       	eor	r27, r27
 2ac:	aa 27       	eor	r26, r26
 2ae:	62 17       	cp	r22, r18
 2b0:	73 07       	cpc	r23, r19
 2b2:	84 07       	cpc	r24, r20
 2b4:	38 f0       	brcs	.+14     	; 0x2c4 <__divsf3_pse+0x26>
 2b6:	9f 5f       	subi	r25, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	44 1f       	adc	r20, r20
 2c0:	aa 1f       	adc	r26, r26
 2c2:	a9 f3       	breq	.-22     	; 0x2ae <__divsf3_pse+0x10>
 2c4:	33 d0       	rcall	.+102    	; 0x32c <__divsf3_pse+0x8e>
 2c6:	0e 2e       	mov	r0, r30
 2c8:	3a f0       	brmi	.+14     	; 0x2d8 <__divsf3_pse+0x3a>
 2ca:	e0 e8       	ldi	r30, 0x80	; 128
 2cc:	30 d0       	rcall	.+96     	; 0x32e <__divsf3_pse+0x90>
 2ce:	91 50       	subi	r25, 0x01	; 1
 2d0:	50 40       	sbci	r21, 0x00	; 0
 2d2:	e6 95       	lsr	r30
 2d4:	00 1c       	adc	r0, r0
 2d6:	ca f7       	brpl	.-14     	; 0x2ca <__divsf3_pse+0x2c>
 2d8:	29 d0       	rcall	.+82     	; 0x32c <__divsf3_pse+0x8e>
 2da:	fe 2f       	mov	r31, r30
 2dc:	27 d0       	rcall	.+78     	; 0x32c <__divsf3_pse+0x8e>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	bb 1f       	adc	r27, r27
 2e6:	26 17       	cp	r18, r22
 2e8:	37 07       	cpc	r19, r23
 2ea:	48 07       	cpc	r20, r24
 2ec:	ab 07       	cpc	r26, r27
 2ee:	b0 e8       	ldi	r27, 0x80	; 128
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <__divsf3_pse+0x56>
 2f2:	bb 0b       	sbc	r27, r27
 2f4:	80 2d       	mov	r24, r0
 2f6:	bf 01       	movw	r22, r30
 2f8:	ff 27       	eor	r31, r31
 2fa:	93 58       	subi	r25, 0x83	; 131
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	2a f0       	brmi	.+10     	; 0x30a <__divsf3_pse+0x6c>
 300:	9e 3f       	cpi	r25, 0xFE	; 254
 302:	51 05       	cpc	r21, r1
 304:	68 f0       	brcs	.+26     	; 0x320 <__divsf3_pse+0x82>
 306:	55 c0       	rjmp	.+170    	; 0x3b2 <__fp_inf>
 308:	9f c0       	rjmp	.+318    	; 0x448 <__fp_szero>
 30a:	5f 3f       	cpi	r21, 0xFF	; 255
 30c:	ec f3       	brlt	.-6      	; 0x308 <__divsf3_pse+0x6a>
 30e:	98 3e       	cpi	r25, 0xE8	; 232
 310:	dc f3       	brlt	.-10     	; 0x308 <__divsf3_pse+0x6a>
 312:	86 95       	lsr	r24
 314:	77 95       	ror	r23
 316:	67 95       	ror	r22
 318:	b7 95       	ror	r27
 31a:	f7 95       	ror	r31
 31c:	9f 5f       	subi	r25, 0xFF	; 255
 31e:	c9 f7       	brne	.-14     	; 0x312 <__divsf3_pse+0x74>
 320:	88 0f       	add	r24, r24
 322:	91 1d       	adc	r25, r1
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	97 f9       	bld	r25, 7
 32a:	08 95       	ret
 32c:	e1 e0       	ldi	r30, 0x01	; 1
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	88 1f       	adc	r24, r24
 334:	bb 1f       	adc	r27, r27
 336:	62 17       	cp	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	84 07       	cpc	r24, r20
 33c:	ba 07       	cpc	r27, r26
 33e:	20 f0       	brcs	.+8      	; 0x348 <__divsf3_pse+0xaa>
 340:	62 1b       	sub	r22, r18
 342:	73 0b       	sbc	r23, r19
 344:	84 0b       	sbc	r24, r20
 346:	ba 0b       	sbc	r27, r26
 348:	ee 1f       	adc	r30, r30
 34a:	88 f7       	brcc	.-30     	; 0x32e <__divsf3_pse+0x90>
 34c:	e0 95       	com	r30
 34e:	08 95       	ret

00000350 <__fixsfsi>:
 350:	04 d0       	rcall	.+8      	; 0x35a <__fixunssfsi>
 352:	68 94       	set
 354:	b1 11       	cpse	r27, r1
 356:	78 c0       	rjmp	.+240    	; 0x448 <__fp_szero>
 358:	08 95       	ret

0000035a <__fixunssfsi>:
 35a:	5b d0       	rcall	.+182    	; 0x412 <__fp_splitA>
 35c:	88 f0       	brcs	.+34     	; 0x380 <__fixunssfsi+0x26>
 35e:	9f 57       	subi	r25, 0x7F	; 127
 360:	90 f0       	brcs	.+36     	; 0x386 <__fixunssfsi+0x2c>
 362:	b9 2f       	mov	r27, r25
 364:	99 27       	eor	r25, r25
 366:	b7 51       	subi	r27, 0x17	; 23
 368:	a0 f0       	brcs	.+40     	; 0x392 <__fixunssfsi+0x38>
 36a:	d1 f0       	breq	.+52     	; 0x3a0 <__fixunssfsi+0x46>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	1a f0       	brmi	.+6      	; 0x37c <__fixunssfsi+0x22>
 376:	ba 95       	dec	r27
 378:	c9 f7       	brne	.-14     	; 0x36c <__fixunssfsi+0x12>
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <__fixunssfsi+0x46>
 37c:	b1 30       	cpi	r27, 0x01	; 1
 37e:	81 f0       	breq	.+32     	; 0x3a0 <__fixunssfsi+0x46>
 380:	62 d0       	rcall	.+196    	; 0x446 <__fp_zero>
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	08 95       	ret
 386:	5f c0       	rjmp	.+190    	; 0x446 <__fp_zero>
 388:	67 2f       	mov	r22, r23
 38a:	78 2f       	mov	r23, r24
 38c:	88 27       	eor	r24, r24
 38e:	b8 5f       	subi	r27, 0xF8	; 248
 390:	39 f0       	breq	.+14     	; 0x3a0 <__fixunssfsi+0x46>
 392:	b9 3f       	cpi	r27, 0xF9	; 249
 394:	cc f3       	brlt	.-14     	; 0x388 <__fixunssfsi+0x2e>
 396:	86 95       	lsr	r24
 398:	77 95       	ror	r23
 39a:	67 95       	ror	r22
 39c:	b3 95       	inc	r27
 39e:	d9 f7       	brne	.-10     	; 0x396 <__fixunssfsi+0x3c>
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__fixunssfsi+0x56>
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__fp_inf>:
 3b2:	97 f9       	bld	r25, 7
 3b4:	9f 67       	ori	r25, 0x7F	; 127
 3b6:	80 e8       	ldi	r24, 0x80	; 128
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	08 95       	ret

000003be <__fp_nan>:
 3be:	9f ef       	ldi	r25, 0xFF	; 255
 3c0:	80 ec       	ldi	r24, 0xC0	; 192
 3c2:	08 95       	ret

000003c4 <__fp_pscA>:
 3c4:	00 24       	eor	r0, r0
 3c6:	0a 94       	dec	r0
 3c8:	16 16       	cp	r1, r22
 3ca:	17 06       	cpc	r1, r23
 3cc:	18 06       	cpc	r1, r24
 3ce:	09 06       	cpc	r0, r25
 3d0:	08 95       	ret

000003d2 <__fp_pscB>:
 3d2:	00 24       	eor	r0, r0
 3d4:	0a 94       	dec	r0
 3d6:	12 16       	cp	r1, r18
 3d8:	13 06       	cpc	r1, r19
 3da:	14 06       	cpc	r1, r20
 3dc:	05 06       	cpc	r0, r21
 3de:	08 95       	ret

000003e0 <__fp_round>:
 3e0:	09 2e       	mov	r0, r25
 3e2:	03 94       	inc	r0
 3e4:	00 0c       	add	r0, r0
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__fp_round+0xc>
 3e8:	88 23       	and	r24, r24
 3ea:	52 f0       	brmi	.+20     	; 0x400 <__fp_round+0x20>
 3ec:	bb 0f       	add	r27, r27
 3ee:	40 f4       	brcc	.+16     	; 0x400 <__fp_round+0x20>
 3f0:	bf 2b       	or	r27, r31
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <__fp_round+0x18>
 3f4:	60 ff       	sbrs	r22, 0
 3f6:	04 c0       	rjmp	.+8      	; 0x400 <__fp_round+0x20>
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__fp_split3>:
 402:	57 fd       	sbrc	r21, 7
 404:	90 58       	subi	r25, 0x80	; 128
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	59 f0       	breq	.+22     	; 0x422 <__fp_splitA+0x10>
 40c:	5f 3f       	cpi	r21, 0xFF	; 255
 40e:	71 f0       	breq	.+28     	; 0x42c <__fp_splitA+0x1a>
 410:	47 95       	ror	r20

00000412 <__fp_splitA>:
 412:	88 0f       	add	r24, r24
 414:	97 fb       	bst	r25, 7
 416:	99 1f       	adc	r25, r25
 418:	61 f0       	breq	.+24     	; 0x432 <__fp_splitA+0x20>
 41a:	9f 3f       	cpi	r25, 0xFF	; 255
 41c:	79 f0       	breq	.+30     	; 0x43c <__fp_splitA+0x2a>
 41e:	87 95       	ror	r24
 420:	08 95       	ret
 422:	12 16       	cp	r1, r18
 424:	13 06       	cpc	r1, r19
 426:	14 06       	cpc	r1, r20
 428:	55 1f       	adc	r21, r21
 42a:	f2 cf       	rjmp	.-28     	; 0x410 <__fp_split3+0xe>
 42c:	46 95       	lsr	r20
 42e:	f1 df       	rcall	.-30     	; 0x412 <__fp_splitA>
 430:	08 c0       	rjmp	.+16     	; 0x442 <__fp_splitA+0x30>
 432:	16 16       	cp	r1, r22
 434:	17 06       	cpc	r1, r23
 436:	18 06       	cpc	r1, r24
 438:	99 1f       	adc	r25, r25
 43a:	f1 cf       	rjmp	.-30     	; 0x41e <__fp_splitA+0xc>
 43c:	86 95       	lsr	r24
 43e:	71 05       	cpc	r23, r1
 440:	61 05       	cpc	r22, r1
 442:	08 94       	sec
 444:	08 95       	ret

00000446 <__fp_zero>:
 446:	e8 94       	clt

00000448 <__fp_szero>:
 448:	bb 27       	eor	r27, r27
 44a:	66 27       	eor	r22, r22
 44c:	77 27       	eor	r23, r23
 44e:	cb 01       	movw	r24, r22
 450:	97 f9       	bld	r25, 7
 452:	08 95       	ret

00000454 <__mulsf3>:
 454:	0b d0       	rcall	.+22     	; 0x46c <__mulsf3x>
 456:	c4 cf       	rjmp	.-120    	; 0x3e0 <__fp_round>
 458:	b5 df       	rcall	.-150    	; 0x3c4 <__fp_pscA>
 45a:	28 f0       	brcs	.+10     	; 0x466 <__mulsf3+0x12>
 45c:	ba df       	rcall	.-140    	; 0x3d2 <__fp_pscB>
 45e:	18 f0       	brcs	.+6      	; 0x466 <__mulsf3+0x12>
 460:	95 23       	and	r25, r21
 462:	09 f0       	breq	.+2      	; 0x466 <__mulsf3+0x12>
 464:	a6 cf       	rjmp	.-180    	; 0x3b2 <__fp_inf>
 466:	ab cf       	rjmp	.-170    	; 0x3be <__fp_nan>
 468:	11 24       	eor	r1, r1
 46a:	ee cf       	rjmp	.-36     	; 0x448 <__fp_szero>

0000046c <__mulsf3x>:
 46c:	ca df       	rcall	.-108    	; 0x402 <__fp_split3>
 46e:	a0 f3       	brcs	.-24     	; 0x458 <__mulsf3+0x4>

00000470 <__mulsf3_pse>:
 470:	95 9f       	mul	r25, r21
 472:	d1 f3       	breq	.-12     	; 0x468 <__mulsf3+0x14>
 474:	95 0f       	add	r25, r21
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	55 1f       	adc	r21, r21
 47a:	62 9f       	mul	r22, r18
 47c:	f0 01       	movw	r30, r0
 47e:	72 9f       	mul	r23, r18
 480:	bb 27       	eor	r27, r27
 482:	f0 0d       	add	r31, r0
 484:	b1 1d       	adc	r27, r1
 486:	63 9f       	mul	r22, r19
 488:	aa 27       	eor	r26, r26
 48a:	f0 0d       	add	r31, r0
 48c:	b1 1d       	adc	r27, r1
 48e:	aa 1f       	adc	r26, r26
 490:	64 9f       	mul	r22, r20
 492:	66 27       	eor	r22, r22
 494:	b0 0d       	add	r27, r0
 496:	a1 1d       	adc	r26, r1
 498:	66 1f       	adc	r22, r22
 49a:	82 9f       	mul	r24, r18
 49c:	22 27       	eor	r18, r18
 49e:	b0 0d       	add	r27, r0
 4a0:	a1 1d       	adc	r26, r1
 4a2:	62 1f       	adc	r22, r18
 4a4:	73 9f       	mul	r23, r19
 4a6:	b0 0d       	add	r27, r0
 4a8:	a1 1d       	adc	r26, r1
 4aa:	62 1f       	adc	r22, r18
 4ac:	83 9f       	mul	r24, r19
 4ae:	a0 0d       	add	r26, r0
 4b0:	61 1d       	adc	r22, r1
 4b2:	22 1f       	adc	r18, r18
 4b4:	74 9f       	mul	r23, r20
 4b6:	33 27       	eor	r19, r19
 4b8:	a0 0d       	add	r26, r0
 4ba:	61 1d       	adc	r22, r1
 4bc:	23 1f       	adc	r18, r19
 4be:	84 9f       	mul	r24, r20
 4c0:	60 0d       	add	r22, r0
 4c2:	21 1d       	adc	r18, r1
 4c4:	82 2f       	mov	r24, r18
 4c6:	76 2f       	mov	r23, r22
 4c8:	6a 2f       	mov	r22, r26
 4ca:	11 24       	eor	r1, r1
 4cc:	9f 57       	subi	r25, 0x7F	; 127
 4ce:	50 40       	sbci	r21, 0x00	; 0
 4d0:	8a f0       	brmi	.+34     	; 0x4f4 <__mulsf3_pse+0x84>
 4d2:	e1 f0       	breq	.+56     	; 0x50c <__mulsf3_pse+0x9c>
 4d4:	88 23       	and	r24, r24
 4d6:	4a f0       	brmi	.+18     	; 0x4ea <__mulsf3_pse+0x7a>
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	bb 1f       	adc	r27, r27
 4de:	66 1f       	adc	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	a9 f7       	brne	.-22     	; 0x4d4 <__mulsf3_pse+0x64>
 4ea:	9e 3f       	cpi	r25, 0xFE	; 254
 4ec:	51 05       	cpc	r21, r1
 4ee:	70 f0       	brcs	.+28     	; 0x50c <__mulsf3_pse+0x9c>
 4f0:	60 cf       	rjmp	.-320    	; 0x3b2 <__fp_inf>
 4f2:	aa cf       	rjmp	.-172    	; 0x448 <__fp_szero>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	ec f3       	brlt	.-6      	; 0x4f2 <__mulsf3_pse+0x82>
 4f8:	98 3e       	cpi	r25, 0xE8	; 232
 4fa:	dc f3       	brlt	.-10     	; 0x4f2 <__mulsf3_pse+0x82>
 4fc:	86 95       	lsr	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f7 95       	ror	r31
 506:	e7 95       	ror	r30
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	c1 f7       	brne	.-16     	; 0x4fc <__mulsf3_pse+0x8c>
 50c:	fe 2b       	or	r31, r30
 50e:	88 0f       	add	r24, r24
 510:	91 1d       	adc	r25, r1
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	97 f9       	bld	r25, 7
 518:	08 95       	ret

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
