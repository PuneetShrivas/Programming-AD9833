
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000112e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000112e  000011c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800066  00800066  000011c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001561  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  00002815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055a  00000000  00000000  00002f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  000036f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f08  00000000  00000000  00003c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_7>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_12>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	78 03       	fmul	r23, r16

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ee e2       	ldi	r30, 0x2E	; 46
      6a:	f1 e1       	ldi	r31, 0x11	; 17
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 36       	cpi	r26, 0x66	; 102
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	20 e0       	ldi	r18, 0x00	; 0
      7a:	a6 e6       	ldi	r26, 0x66	; 102
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	ae 3a       	cpi	r26, 0xAE	; 174
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 8f 08 	call	0x111e	; 0x111e <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
      a2:	0c 94 95 08 	jmp	0x112a	; 0x112a <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z3ledi>:
{
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	UART_send(MSdata);
	UART_send(LSdata);
}
      aa:	81 30       	cpi	r24, 0x01	; 1
      ac:	91 05       	cpc	r25, r1
      ae:	39 f0       	breq	.+14     	; 0xbe <_Z3ledi+0x14>
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	91 05       	cpc	r25, r1
      b4:	31 f0       	breq	.+12     	; 0xc2 <_Z3ledi+0x18>
      b6:	89 2b       	or	r24, r25
      b8:	29 f4       	brne	.+10     	; 0xc4 <_Z3ledi+0x1a>
      ba:	d8 9a       	sbi	0x1b, 0	; 27
      bc:	08 95       	ret
      be:	d9 9a       	sbi	0x1b, 1	; 27
      c0:	08 95       	ret
      c2:	da 9a       	sbi	0x1b, 2	; 27
      c4:	08 95       	ret

000000c6 <_Z12SPI_transferh>:
      c6:	8f b9       	out	0x0f, r24	; 15
      c8:	77 9b       	sbis	0x0e, 7	; 14
      ca:	fe cf       	rjmp	.-4      	; 0xc8 <_Z12SPI_transferh+0x2>
      cc:	08 95       	ret

000000ce <_Z11SPI_write16t>:

void SPI_write16 (unsigned short data)    			//send a 16bit word and use f sync
{  
      ce:	cf 93       	push	r28
      d0:	c8 2f       	mov	r28, r24
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PINB0);						    //F sync Low --> begin frame
      d2:	c0 98       	cbi	0x18, 0	; 24
	SPI_transfer(MSdata);							
      d4:	89 2f       	mov	r24, r25
      d6:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z12SPI_transferh>
	SPI_transfer(LSdata);
      da:	8c 2f       	mov	r24, r28
      dc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z12SPI_transferh>
	PORTB |= (1<<PINB0);						    //F sync High --> End of frame
      e0:	c0 9a       	sbi	0x18, 0	; 24
}
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <_Z10Set_AD9833fj>:

void Set_AD9833(float frequency, unsigned int phase)
{
      e6:	cf 92       	push	r12
      e8:	df 92       	push	r13
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	8a 01       	movw	r16, r20
	long FreqReg = (frequency*pow(2,28))/(float)Fmclk;	  //Calculate frequency to be sent to AD9833
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	40 e8       	ldi	r20, 0x80	; 128
      fe:	5d e4       	ldi	r21, 0x4D	; 77
     100:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     104:	20 e2       	ldi	r18, 0x20	; 32
     106:	3c eb       	ldi	r19, 0xBC	; 188
     108:	4e eb       	ldi	r20, 0xBE	; 190
     10a:	5b e4       	ldi	r21, 0x4B	; 75
     10c:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divsf3>
     110:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);		   //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
     114:	6b 01       	movw	r12, r22
     116:	7c 01       	movw	r14, r24
     118:	cc 24       	eor	r12, r12
     11a:	20 ec       	ldi	r18, 0xC0	; 192
     11c:	d2 22       	and	r13, r18
     11e:	2f e0       	ldi	r18, 0x0F	; 15
     120:	f2 22       	and	r15, r18
     122:	0b 2e       	mov	r0, r27
     124:	be e0       	ldi	r27, 0x0E	; 14
     126:	f5 94       	asr	r15
     128:	e7 94       	ror	r14
     12a:	d7 94       	ror	r13
     12c:	c7 94       	ror	r12
     12e:	ba 95       	dec	r27
     130:	d1 f7       	brne	.-12     	; 0x126 <_Z10Set_AD9833fj+0x40>
     132:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
     134:	eb 01       	movw	r28, r22
     136:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     									  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_write16(0x2100);								  //define waveform and set reset bit
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	91 e2       	ldi	r25, 0x21	; 33
     13c:	0e 94 67 00 	call	0xce	; 0xce <_Z11SPI_write16t>
	SPI_write16(LSB);									  //Write LSBs
     140:	ce 01       	movw	r24, r28
     142:	90 64       	ori	r25, 0x40	; 64
     144:	0e 94 67 00 	call	0xce	; 0xce <_Z11SPI_write16t>
	SPI_write16(MSB);									  //Write MSBs
     148:	c6 01       	movw	r24, r12
     14a:	90 64       	ori	r25, 0x40	; 64
     14c:	0e 94 67 00 	call	0xce	; 0xce <_Z11SPI_write16t>
	phase&=0x0FFF;
     150:	c8 01       	movw	r24, r16
     152:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;
	//SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_write16(phase);
     154:	90 6c       	ori	r25, 0xC0	; 192
     156:	0e 94 67 00 	call	0xce	; 0xce <_Z11SPI_write16t>
	SPI_write16(0x2000);                                                                                                                                                                                                                                                                                             
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	90 e2       	ldi	r25, 0x20	; 32
     15e:	0e 94 67 00 	call	0xce	; 0xce <_Z11SPI_write16t>
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16
     16a:	ff 90       	pop	r15
     16c:	ef 90       	pop	r14
     16e:	df 90       	pop	r13
     170:	cf 90       	pop	r12
     172:	08 95       	ret

00000174 <_Z8getphasefff>:

unsigned int getphase(float pphase,float freq, float time)
{
     174:	4f 92       	push	r4
     176:	5f 92       	push	r5
     178:	6f 92       	push	r6
     17a:	7f 92       	push	r7
     17c:	8f 92       	push	r8
     17e:	9f 92       	push	r9
     180:	af 92       	push	r10
     182:	bf 92       	push	r11
     184:	cf 92       	push	r12
     186:	df 92       	push	r13
     188:	ef 92       	push	r14
     18a:	ff 92       	push	r15
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	00 d0       	rcall	.+0      	; 0x196 <_Z8getphasefff+0x22>
     196:	00 d0       	rcall	.+0      	; 0x198 <_Z8getphasefff+0x24>
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	2b 01       	movw	r4, r22
     19e:	3c 01       	movw	r6, r24
     1a0:	49 01       	movw	r8, r18
     1a2:	5a 01       	movw	r10, r20
     1a4:	67 01       	movw	r12, r14
     1a6:	78 01       	movw	r14, r16
	time/=1000000;
	pphase/=2048/PI;
	float ph=((fmod(time,(1/freq))*2*PI*freq)+pphase)*2048/PI;
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	80 e8       	ldi	r24, 0x80	; 128
     1ae:	9f e3       	ldi	r25, 0x3F	; 63
     1b0:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divsf3>
     1b4:	69 83       	std	Y+1, r22	; 0x01
     1b6:	7a 83       	std	Y+2, r23	; 0x02
     1b8:	8b 83       	std	Y+3, r24	; 0x03
     1ba:	9c 83       	std	Y+4, r25	; 0x04
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	34 e2       	ldi	r19, 0x24	; 36
     1c0:	44 e7       	ldi	r20, 0x74	; 116
     1c2:	59 e4       	ldi	r21, 0x49	; 73
     1c4:	c7 01       	movw	r24, r14
     1c6:	b6 01       	movw	r22, r12
     1c8:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divsf3>
     1cc:	29 81       	ldd	r18, Y+1	; 0x01
     1ce:	3a 81       	ldd	r19, Y+2	; 0x02
     1d0:	4b 81       	ldd	r20, Y+3	; 0x03
     1d2:	5c 81       	ldd	r21, Y+4	; 0x04
     1d4:	0e 94 7a 07 	call	0xef4	; 0xef4 <fmod>
	return (unsigned int) ph;
     1d8:	9b 01       	movw	r18, r22
     1da:	ac 01       	movw	r20, r24
     1dc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     1e0:	20 ed       	ldi	r18, 0xD0	; 208
     1e2:	3f e0       	ldi	r19, 0x0F	; 15
     1e4:	49 e4       	ldi	r20, 0x49	; 73
     1e6:	50 e4       	ldi	r21, 0x40	; 64
     1e8:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     1ec:	a5 01       	movw	r20, r10
     1ee:	94 01       	movw	r18, r8
     1f0:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     1f4:	6b 01       	movw	r12, r22
     1f6:	7c 01       	movw	r14, r24
     1f8:	2c e8       	ldi	r18, 0x8C	; 140
     1fa:	39 ef       	ldi	r19, 0xF9	; 249
     1fc:	42 e2       	ldi	r20, 0x22	; 34
     1fe:	54 e4       	ldi	r21, 0x44	; 68
     200:	c3 01       	movw	r24, r6
     202:	b2 01       	movw	r22, r4
     204:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divsf3>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c7 01       	movw	r24, r14
     20e:	b6 01       	movw	r22, r12
     210:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	55 e4       	ldi	r21, 0x45	; 69
     21c:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     220:	20 ed       	ldi	r18, 0xD0	; 208
     222:	3f e0       	ldi	r19, 0x0F	; 15
     224:	49 e4       	ldi	r20, 0x49	; 73
     226:	50 e4       	ldi	r21, 0x40	; 64
     228:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divsf3>
     22c:	0e 94 03 07 	call	0xe06	; 0xe06 <__fixunssfsi>
}
     230:	cb 01       	movw	r24, r22
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	bf 90       	pop	r11
     24c:	af 90       	pop	r10
     24e:	9f 90       	pop	r9
     250:	8f 90       	pop	r8
     252:	7f 90       	pop	r7
     254:	6f 90       	pop	r6
     256:	5f 90       	pop	r5
     258:	4f 90       	pop	r4
     25a:	08 95       	ret

0000025c <main>:
	// // 	UART_send(contnext);
	// 	}
	//////////////////////////////////////////////////////////////////////////
	

	SPI_write16(0x100);								//Reset AD9833 
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	0e 94 67 00 	call	0xce	; 0xce <_Z11SPI_write16t>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f ef       	ldi	r18, 0xFF	; 255
     266:	8f e7       	ldi	r24, 0x7F	; 127
     268:	96 e1       	ldi	r25, 0x16	; 22
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <main+0xe>
     272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x18>
     274:	00 00       	nop

	//VIS Code
	{//leader tone
	_delay_ms(500);
	Set_AD9833(1900,0);
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e8       	ldi	r23, 0x80	; 128
     27e:	8d ee       	ldi	r24, 0xED	; 237
     280:	94 e4       	ldi	r25, 0x44	; 68
     282:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
     286:	2f ef       	ldi	r18, 0xFF	; 255
     288:	8f e7       	ldi	r24, 0x7F	; 127
     28a:	9d e0       	ldi	r25, 0x0D	; 13
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	80 40       	sbci	r24, 0x00	; 0
     290:	90 40       	sbci	r25, 0x00	; 0
     292:	e1 f7       	brne	.-8      	; 0x28c <main+0x30>
     294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x3a>
     296:	00 00       	nop
	_delay_ms(300);
	//break
	Set_AD9833(1200,0);
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	86 e9       	ldi	r24, 0x96	; 150
     2a2:	94 e4       	ldi	r25, 0x44	; 68
     2a4:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	9f e8       	ldi	r25, 0x8F	; 143
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x50>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x56>
     2b2:	00 00       	nop
	_delay_ms(10);
	//leader
	Set_AD9833(1900,0);
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e8       	ldi	r23, 0x80	; 128
     2bc:	8d ee       	ldi	r24, 0xED	; 237
     2be:	94 e4       	ldi	r25, 0x44	; 68
     2c0:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
     2c4:	9f ef       	ldi	r25, 0xFF	; 255
     2c6:	2f e7       	ldi	r18, 0x7F	; 127
     2c8:	8d e0       	ldi	r24, 0x0D	; 13
     2ca:	91 50       	subi	r25, 0x01	; 1
     2cc:	20 40       	sbci	r18, 0x00	; 0
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x6e>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x78>
     2d4:	00 00       	nop
	_delay_ms(300);
	//VIS start bit
	Set_AD9833(1200,0);
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	86 e9       	ldi	r24, 0x96	; 150
     2e0:	94 e4       	ldi	r25, 0x44	; 68
     2e2:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
     2e6:	94 e1       	ldi	r25, 0x14	; 20
     2e8:	2e e4       	ldi	r18, 0x4E	; 78
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	91 50       	subi	r25, 0x01	; 1
     2ee:	20 40       	sbci	r18, 0x00	; 0
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x90>
     2f4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f6:	84 e1       	ldi	r24, 0x14	; 20
     2f8:	9c e0       	ldi	r25, 0x0C	; 12
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0x9e>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0xa4>
     300:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//PD90 VIS code = 99d = 0b1100011
	//bit 0=1
	Set_AD9833(1100,0);
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e8       	ldi	r23, 0x80	; 128
     30a:	89 e8       	ldi	r24, 0x89	; 137
     30c:	94 e4       	ldi	r25, 0x44	; 68
     30e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     312:	94 e1       	ldi	r25, 0x14	; 20
     314:	2e e4       	ldi	r18, 0x4E	; 78
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	91 50       	subi	r25, 0x01	; 1
     31a:	20 40       	sbci	r18, 0x00	; 0
     31c:	80 40       	sbci	r24, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <main+0xbc>
     320:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     322:	84 e1       	ldi	r24, 0x14	; 20
     324:	9c e0       	ldi	r25, 0x0C	; 12
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <main+0xca>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0xd0>
     32c:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 1=1
	Set_AD9833(1100,0);
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e8       	ldi	r23, 0x80	; 128
     336:	89 e8       	ldi	r24, 0x89	; 137
     338:	94 e4       	ldi	r25, 0x44	; 68
     33a:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     33e:	94 e1       	ldi	r25, 0x14	; 20
     340:	2e e4       	ldi	r18, 0x4E	; 78
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	91 50       	subi	r25, 0x01	; 1
     346:	20 40       	sbci	r18, 0x00	; 0
     348:	80 40       	sbci	r24, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <main+0xe8>
     34c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	84 e1       	ldi	r24, 0x14	; 20
     350:	9c e0       	ldi	r25, 0x0C	; 12
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <main+0xf6>
     356:	00 c0       	rjmp	.+0      	; 0x358 <main+0xfc>
     358:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 2=0
	Set_AD9833(1300,0);
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e8       	ldi	r23, 0x80	; 128
     362:	82 ea       	ldi	r24, 0xA2	; 162
     364:	94 e4       	ldi	r25, 0x44	; 68
     366:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36a:	94 e1       	ldi	r25, 0x14	; 20
     36c:	2e e4       	ldi	r18, 0x4E	; 78
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	91 50       	subi	r25, 0x01	; 1
     372:	20 40       	sbci	r18, 0x00	; 0
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	e1 f7       	brne	.-8      	; 0x370 <main+0x114>
     378:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	84 e1       	ldi	r24, 0x14	; 20
     37c:	9c e0       	ldi	r25, 0x0C	; 12
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <main+0x122>
     382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x128>
     384:	00 00       	nop
	_delay_ms(29);  _delay_us(839);
	//bit 3=0
	Set_AD9833(1300,0);
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e8       	ldi	r23, 0x80	; 128
     38e:	82 ea       	ldi	r24, 0xA2	; 162
     390:	94 e4       	ldi	r25, 0x44	; 68
     392:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     396:	94 e1       	ldi	r25, 0x14	; 20
     398:	2e e4       	ldi	r18, 0x4E	; 78
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	91 50       	subi	r25, 0x01	; 1
     39e:	20 40       	sbci	r18, 0x00	; 0
     3a0:	80 40       	sbci	r24, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x140>
     3a4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	84 e1       	ldi	r24, 0x14	; 20
     3a8:	9c e0       	ldi	r25, 0x0C	; 12
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x14e>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x154>
     3b0:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 4=0
	Set_AD9833(1300,0);
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e8       	ldi	r23, 0x80	; 128
     3ba:	82 ea       	ldi	r24, 0xA2	; 162
     3bc:	94 e4       	ldi	r25, 0x44	; 68
     3be:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c2:	94 e1       	ldi	r25, 0x14	; 20
     3c4:	2e e4       	ldi	r18, 0x4E	; 78
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	91 50       	subi	r25, 0x01	; 1
     3ca:	20 40       	sbci	r18, 0x00	; 0
     3cc:	80 40       	sbci	r24, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x16c>
     3d0:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d2:	84 e1       	ldi	r24, 0x14	; 20
     3d4:	9c e0       	ldi	r25, 0x0C	; 12
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x17a>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x180>
     3dc:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 5=1
	Set_AD9833(1100,0);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e8       	ldi	r23, 0x80	; 128
     3e6:	89 e8       	ldi	r24, 0x89	; 137
     3e8:	94 e4       	ldi	r25, 0x44	; 68
     3ea:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ee:	94 e1       	ldi	r25, 0x14	; 20
     3f0:	2e e4       	ldi	r18, 0x4E	; 78
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	91 50       	subi	r25, 0x01	; 1
     3f6:	20 40       	sbci	r18, 0x00	; 0
     3f8:	80 40       	sbci	r24, 0x00	; 0
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x198>
     3fc:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fe:	84 e1       	ldi	r24, 0x14	; 20
     400:	9c e0       	ldi	r25, 0x0C	; 12
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 6=1
	Set_AD9833(1100,0);
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e8       	ldi	r23, 0x80	; 128
     412:	89 e8       	ldi	r24, 0x89	; 137
     414:	94 e4       	ldi	r25, 0x44	; 68
     416:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41a:	94 e1       	ldi	r25, 0x14	; 20
     41c:	2e e4       	ldi	r18, 0x4E	; 78
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	91 50       	subi	r25, 0x01	; 1
     422:	20 40       	sbci	r18, 0x00	; 0
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     428:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42a:	84 e1       	ldi	r24, 0x14	; 20
     42c:	9c e0       	ldi	r25, 0x0C	; 12
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     434:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//Parity bit
	Set_AD9833(1300,0);
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e8       	ldi	r23, 0x80	; 128
     43e:	82 ea       	ldi	r24, 0xA2	; 162
     440:	94 e4       	ldi	r25, 0x44	; 68
     442:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	94 e1       	ldi	r25, 0x14	; 20
     448:	2e e4       	ldi	r18, 0x4E	; 78
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	91 50       	subi	r25, 0x01	; 1
     44e:	20 40       	sbci	r18, 0x00	; 0
     450:	80 40       	sbci	r24, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	84 e1       	ldi	r24, 0x14	; 20
     458:	9c e0       	ldi	r25, 0x0C	; 12
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     460:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//stop bit
	Set_AD9833(1200,0);
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	86 e9       	ldi	r24, 0x96	; 150
     46c:	94 e4       	ldi	r25, 0x44	; 68
     46e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     472:	94 e1       	ldi	r25, 0x14	; 20
     474:	2e e4       	ldi	r18, 0x4E	; 78
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	91 50       	subi	r25, 0x01	; 1
     47a:	20 40       	sbci	r18, 0x00	; 0
     47c:	80 40       	sbci	r24, 0x00	; 0
     47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     480:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     482:	8e e4       	ldi	r24, 0x4E	; 78
     484:	9d e0       	ldi	r25, 0x0D	; 13
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48a:	c0 e8       	ldi	r28, 0x80	; 128
     48c:	d0 e0       	ldi	r29, 0x00	; 0
	//Porch
	Set_AD9833(1500,0);
	_delay_ms(1);	_delay_us(920);		//Time in protocol minus programming time of Set_AD9833()
	
	//Color transmission	
	cont=1;								// variable for maintaining count of pixels
     48e:	01 e0       	ldi	r16, 0x01	; 1
     490:	10 e0       	ldi	r17, 0x00	; 0

	//image data
	for (int i=1;i<=128;i++)
	{
	//Sync Pulse
	Set_AD9833(1200,0);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	86 e9       	ldi	r24, 0x96	; 150
     49c:	94 e4       	ldi	r25, 0x44	; 68
     49e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a2:	91 ee       	ldi	r25, 0xE1	; 225
     4a4:	2a ed       	ldi	r18, 0xDA	; 218
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	91 50       	subi	r25, 0x01	; 1
     4aa:	20 40       	sbci	r18, 0x00	; 0
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b0:	88 e1       	ldi	r24, 0x18	; 24
     4b2:	9c e0       	ldi	r25, 0x0C	; 12
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	_delay_ms(19);	_delay_us(840);		//Time in protocol minus programming time of Set_AD9833()
	
	//Porch
	Set_AD9833(1500,0);
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e8       	ldi	r23, 0x80	; 128
     4c2:	8b eb       	ldi	r24, 0xBB	; 187
     4c4:	94 e4       	ldi	r25, 0x44	; 68
     4c6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ca:	86 e6       	ldi	r24, 0x66	; 102
     4cc:	9e e0       	ldi	r25, 0x0E	; 14
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d4:	8f e3       	ldi	r24, 0x3F	; 63
     4d6:	9d e0       	ldi	r25, 0x0D	; 13
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4dc:	00 00       	nop
	_delay_ms(1);	_delay_us(920);		//Time in protocol minus programming time of Set_AD9833()
	
	//Color transmission	
	cont=1;								// variable for maintaining count of pixels
     4de:	10 93 a3 00 	sts	0x00A3, r17	; 0x8000a3 <cont+0x1>
     4e2:	00 93 a2 00 	sts	0x00A2, r16	; 0x8000a2 <cont>
	global_frequency=freqY1;			//initialization for first pixel
     4e6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     4ea:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     4ee:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     4f2:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     4f6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <global_frequency>
     4fa:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <global_frequency+0x1>
     4fe:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <global_frequency+0x2>
     502:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <global_frequency+0x3>
	sei();				
     506:	78 94       	sei
	TCCR1B=0;		
     508:	1e bc       	out	0x2e, r1	; 46
	TCCR1B|=(1<<CS10)|(1<<WGM12);
     50a:	8e b5       	in	r24, 0x2e	; 46
     50c:	89 60       	ori	r24, 0x09	; 9
     50e:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);
     510:	89 b7       	in	r24, 0x39	; 57
     512:	80 61       	ori	r24, 0x10	; 16
     514:	89 bf       	out	0x39, r24	; 57
	OCR1A=TEMP;
     516:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     51a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     51e:	9b bd       	out	0x2b, r25	; 43
     520:	8a bd       	out	0x2a, r24	; 42
	TCNT1=TEMP-1; 
     522:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     526:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	9d bd       	out	0x2d, r25	; 45
     52e:	8c bd       	out	0x2c, r24	; 44
	while(cont<=1280);					// wait loop for interrupts  to complete
     530:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <cont>
     534:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <cont+0x1>
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	95 40       	sbci	r25, 0x05	; 5
     53c:	cc f3       	brlt	.-14     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	cli();
     53e:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
     540:	89 b7       	in	r24, 0x39	; 57
     542:	8f 7e       	andi	r24, 0xEF	; 239
     544:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
     546:	1e bc       	out	0x2e, r1	; 46
	PORTA=0;
     548:	1b ba       	out	0x1b, r1	; 27
// 		//Y Scan even line
// 		Set_AD9833(freqY1,0);
// 		_delay_us(170079.41);

}
led(1);
     54a:	c8 01       	movw	r24, r16
     54c:	0e 94 55 00 	call	0xaa	; 0xaa <_Z3ledi>
     550:	21 97       	sbiw	r28, 0x01	; 1
	Set_AD9833(1200,0);
	_delay_ms(29);	_delay_us(924);			
	}

	//image data
	for (int i=1;i<=128;i++)
     552:	09 f0       	breq	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     554:	9e cf       	rjmp	.-196    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
}
led(1);

	}

    Set_AD9833(0x00,0);
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	cb 01       	movw	r24, r22
     560:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
     564:	ff cf       	rjmp	.-2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>

00000566 <__vector_7>:
	}

}

ISR(TIMER1_COMPA_vect)
{
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	0f 92       	push	r0
     56e:	11 24       	eor	r1, r1
     570:	8f 92       	push	r8
     572:	9f 92       	push	r9
     574:	af 92       	push	r10
     576:	bf 92       	push	r11
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	2f 93       	push	r18
     582:	3f 93       	push	r19
     584:	4f 93       	push	r20
     586:	5f 93       	push	r21
     588:	6f 93       	push	r22
     58a:	7f 93       	push	r23
     58c:	8f 93       	push	r24
     58e:	9f 93       	push	r25
     590:	af 93       	push	r26
     592:	bf 93       	push	r27
     594:	ef 93       	push	r30
     596:	ff 93       	push	r31
//single color	
	 

//pattern of 2 colors

	Set_AD9833(global_frequency,next_phase);		
     598:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <next_phase>
     59c:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <next_phase+0x1>
     5a0:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <global_frequency>
     5a4:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <global_frequency+0x1>
     5a8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <global_frequency+0x2>
     5ac:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <global_frequency+0x3>
     5b0:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10Set_AD9833fj>
	prev_phase=next_phase;
     5b4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <next_phase>
     5b8:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <next_phase+0x1>
     5bc:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <prev_phase+0x1>
     5c0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <prev_phase>
	prev_freq = global_frequency;	
     5c4:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <global_frequency>
     5c8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <global_frequency+0x1>
     5cc:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <global_frequency+0x2>
     5d0:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <global_frequency+0x3>
     5d4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <prev_freq>
     5d8:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <prev_freq+0x1>
     5dc:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <prev_freq+0x2>
     5e0:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <prev_freq+0x3>
	if(cont==319) global_frequency = freqRY1;
     5e4:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <cont>
     5e8:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <cont+0x1>
     5ec:	8f 33       	cpi	r24, 0x3F	; 63
     5ee:	91 40       	sbci	r25, 0x01	; 1
     5f0:	89 f4       	brne	.+34     	; 0x614 <__vector_7+0xae>
     5f2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <freqRY1>
     5f6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <freqRY1+0x1>
     5fa:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <freqRY1+0x2>
     5fe:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <freqRY1+0x3>
     602:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <global_frequency>
     606:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <global_frequency+0x1>
     60a:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <global_frequency+0x2>
     60e:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <global_frequency+0x3>
     612:	2f c0       	rjmp	.+94     	; 0x672 <__vector_7+0x10c>
	else if(cont==639) global_frequency = freqBY1;
     614:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <cont>
     618:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <cont+0x1>
     61c:	8f 37       	cpi	r24, 0x7F	; 127
     61e:	92 40       	sbci	r25, 0x02	; 2
     620:	89 f4       	brne	.+34     	; 0x644 <__vector_7+0xde>
     622:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <freqBY1>
     626:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <freqBY1+0x1>
     62a:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <freqBY1+0x2>
     62e:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <freqBY1+0x3>
     632:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <global_frequency>
     636:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <global_frequency+0x1>
     63a:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <global_frequency+0x2>
     63e:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <global_frequency+0x3>
     642:	17 c0       	rjmp	.+46     	; 0x672 <__vector_7+0x10c>
	else if(cont==959) global_frequency = freqY1;
     644:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <cont>
     648:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <cont+0x1>
     64c:	8f 3b       	cpi	r24, 0xBF	; 191
     64e:	93 40       	sbci	r25, 0x03	; 3
     650:	81 f4       	brne	.+32     	; 0x672 <__vector_7+0x10c>
     652:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     656:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     65a:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     65e:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     662:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <global_frequency>
     666:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <global_frequency+0x1>
     66a:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <global_frequency+0x2>
     66e:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <global_frequency+0x3>
// 			else if(t<64) global_frequency = freqY2;
// 		}
// 		
// 	}

	next_phase = getphase(prev_phase,prev_freq,532);		//calculation of phase to be added in new wave
     672:	80 90 a4 00 	lds	r8, 0x00A4	; 0x8000a4 <prev_freq>
     676:	90 90 a5 00 	lds	r9, 0x00A5	; 0x8000a5 <prev_freq+0x1>
     67a:	a0 90 a6 00 	lds	r10, 0x00A6	; 0x8000a6 <prev_freq+0x2>
     67e:	b0 90 a7 00 	lds	r11, 0x00A7	; 0x8000a7 <prev_freq+0x3>
     682:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <prev_phase>
     686:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <prev_phase+0x1>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 32 07 	call	0xe64	; 0xe64 <__floatunsisf>
     692:	e1 2c       	mov	r14, r1
     694:	f1 2c       	mov	r15, r1
     696:	05 e0       	ldi	r16, 0x05	; 5
     698:	14 e4       	ldi	r17, 0x44	; 68
     69a:	a5 01       	movw	r20, r10
     69c:	94 01       	movw	r18, r8
     69e:	0e 94 ba 00 	call	0x174	; 0x174 <_Z8getphasefff>
     6a2:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <next_phase+0x1>
     6a6:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <next_phase>
	cont++;
     6aa:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <cont>
     6ae:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <cont+0x1>
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <cont+0x1>
     6b8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <cont>
// 	if(prev_freq==global_frequency) ;
// 	else {}
	

	
}
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	bf 90       	pop	r11
     6de:	af 90       	pop	r10
     6e0:	9f 90       	pop	r9
     6e2:	8f 90       	pop	r8
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_12>:
	
     6ee:	18 95       	reti

000006f0 <_GLOBAL__sub_I_TEMP>:
     6f0:	4f 92       	push	r4
     6f2:	5f 92       	push	r5
     6f4:	6f 92       	push	r6
     6f6:	7f 92       	push	r7
     6f8:	8f 92       	push	r8
     6fa:	9f 92       	push	r9
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	28 97       	sbiw	r28, 0x08	; 8
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
#include <math.h>
#include <avr/interrupt.h>
#include <util/atomic.h>

int TEMP = ((((F_CPU)/(TIMER1_PRESCALER*1000000))*559)-1);			//Counter Cycles for required time557
int TICKS = 65535-TEMP;												//Value for TCNT1 to implement timing by overflow
     71c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     720:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     724:	80 95       	com	r24
     726:	90 95       	com	r25
     728:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <TICKS+0x1>
     72c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <TICKS>
	return (unsigned int) ph;
}

//color conversion from RGB to Y/RY/BY
int R1=255,G1=0,B1=0;
float Y1 = 16.0 + (.003906 * ((65.738 * R1) + (129.057 * G1) + (25.064 * B1)));
     730:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <R1>
     734:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <R1+0x1>
     738:	07 2e       	mov	r0, r23
     73a:	00 0c       	add	r0, r0
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 34 07 	call	0xe68	; 0xe68 <__floatsisf>
     744:	69 83       	std	Y+1, r22	; 0x01
     746:	7a 83       	std	Y+2, r23	; 0x02
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	9c 83       	std	Y+4, r25	; 0x04
     74c:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <G1>
     750:	70 91 9d 00 	lds	r23, 0x009D	; 0x80009d <G1+0x1>
     754:	07 2e       	mov	r0, r23
     756:	00 0c       	add	r0, r0
     758:	88 0b       	sbc	r24, r24
     75a:	99 0b       	sbc	r25, r25
     75c:	0e 94 34 07 	call	0xe68	; 0xe68 <__floatsisf>
     760:	6d 83       	std	Y+5, r22	; 0x05
     762:	7e 83       	std	Y+6, r23	; 0x06
     764:	8f 83       	std	Y+7, r24	; 0x07
     766:	98 87       	std	Y+8, r25	; 0x08
     768:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <B1>
     76c:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <B1+0x1>
     770:	07 2e       	mov	r0, r23
     772:	00 0c       	add	r0, r0
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	0e 94 34 07 	call	0xe68	; 0xe68 <__floatsisf>
     77c:	6b 01       	movw	r12, r22
     77e:	7c 01       	movw	r14, r24
     780:	2b ed       	ldi	r18, 0xDB	; 219
     782:	39 e7       	ldi	r19, 0x79	; 121
     784:	43 e8       	ldi	r20, 0x83	; 131
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	69 81       	ldd	r22, Y+1	; 0x01
     78a:	7a 81       	ldd	r23, Y+2	; 0x02
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     794:	4b 01       	movw	r8, r22
     796:	5c 01       	movw	r10, r24
     798:	28 e9       	ldi	r18, 0x98	; 152
     79a:	3e e0       	ldi	r19, 0x0E	; 14
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	53 e4       	ldi	r21, 0x43	; 67
     7a0:	6d 81       	ldd	r22, Y+5	; 0x05
     7a2:	7e 81       	ldd	r23, Y+6	; 0x06
     7a4:	8f 81       	ldd	r24, Y+7	; 0x07
     7a6:	98 85       	ldd	r25, Y+8	; 0x08
     7a8:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     7ac:	9b 01       	movw	r18, r22
     7ae:	ac 01       	movw	r20, r24
     7b0:	c5 01       	movw	r24, r10
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     7b8:	4b 01       	movw	r8, r22
     7ba:	5c 01       	movw	r10, r24
     7bc:	22 e1       	ldi	r18, 0x12	; 18
     7be:	33 e8       	ldi	r19, 0x83	; 131
     7c0:	48 ec       	ldi	r20, 0xC8	; 200
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	c7 01       	movw	r24, r14
     7c6:	b6 01       	movw	r22, r12
     7c8:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c5 01       	movw	r24, r10
     7d2:	b4 01       	movw	r22, r8
     7d4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     7d8:	2e ec       	ldi	r18, 0xCE	; 206
     7da:	3b ef       	ldi	r19, 0xFB	; 251
     7dc:	4f e7       	ldi	r20, 0x7F	; 127
     7de:	5b e3       	ldi	r21, 0x3B	; 59
     7e0:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e8       	ldi	r20, 0x80	; 128
     7ea:	51 e4       	ldi	r21, 0x41	; 65
     7ec:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     7f0:	2b 01       	movw	r4, r22
     7f2:	3c 01       	movw	r6, r24
     7f4:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <Y1>
     7f8:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <Y1+0x1>
     7fc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Y1+0x2>
     800:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Y1+0x3>
float RY1 = 128.0 + (.003906 * ((112.439 * R1) + (-94.154 * G1) + (-18.285 * B1)));
     804:	25 ec       	ldi	r18, 0xC5	; 197
     806:	30 ee       	ldi	r19, 0xE0	; 224
     808:	40 ee       	ldi	r20, 0xE0	; 224
     80a:	52 e4       	ldi	r21, 0x42	; 66
     80c:	69 81       	ldd	r22, Y+1	; 0x01
     80e:	7a 81       	ldd	r23, Y+2	; 0x02
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     818:	4b 01       	movw	r8, r22
     81a:	5c 01       	movw	r10, r24
     81c:	29 ed       	ldi	r18, 0xD9	; 217
     81e:	3e e4       	ldi	r19, 0x4E	; 78
     820:	4c eb       	ldi	r20, 0xBC	; 188
     822:	52 ec       	ldi	r21, 0xC2	; 194
     824:	6d 81       	ldd	r22, Y+5	; 0x05
     826:	7e 81       	ldd	r23, Y+6	; 0x06
     828:	8f 81       	ldd	r24, Y+7	; 0x07
     82a:	98 85       	ldd	r25, Y+8	; 0x08
     82c:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     83c:	4b 01       	movw	r8, r22
     83e:	5c 01       	movw	r10, r24
     840:	2e ea       	ldi	r18, 0xAE	; 174
     842:	37 e4       	ldi	r19, 0x47	; 71
     844:	42 e9       	ldi	r20, 0x92	; 146
     846:	51 ec       	ldi	r21, 0xC1	; 193
     848:	c7 01       	movw	r24, r14
     84a:	b6 01       	movw	r22, r12
     84c:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	c5 01       	movw	r24, r10
     856:	b4 01       	movw	r22, r8
     858:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     85c:	2e ec       	ldi	r18, 0xCE	; 206
     85e:	3b ef       	ldi	r19, 0xFB	; 251
     860:	4f e7       	ldi	r20, 0x7F	; 127
     862:	5b e3       	ldi	r21, 0x3B	; 59
     864:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	53 e4       	ldi	r21, 0x43	; 67
     870:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     874:	4b 01       	movw	r8, r22
     876:	5c 01       	movw	r10, r24
     878:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <RY1>
     87c:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <RY1+0x1>
     880:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <RY1+0x2>
     884:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <RY1+0x3>
float BY1 = 128.0 + (.003906 * ((-37.945 * R1) + (-74.494 * G1) + (112.439 * B1)));
     888:	2e ea       	ldi	r18, 0xAE	; 174
     88a:	37 ec       	ldi	r19, 0xC7	; 199
     88c:	47 e1       	ldi	r20, 0x17	; 23
     88e:	52 ec       	ldi	r21, 0xC2	; 194
     890:	69 81       	ldd	r22, Y+1	; 0x01
     892:	7a 81       	ldd	r23, Y+2	; 0x02
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     89c:	69 83       	std	Y+1, r22	; 0x01
     89e:	7a 83       	std	Y+2, r23	; 0x02
     8a0:	8b 83       	std	Y+3, r24	; 0x03
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	2e ee       	ldi	r18, 0xEE	; 238
     8a6:	3c ef       	ldi	r19, 0xFC	; 252
     8a8:	44 e9       	ldi	r20, 0x94	; 148
     8aa:	52 ec       	ldi	r21, 0xC2	; 194
     8ac:	6d 81       	ldd	r22, Y+5	; 0x05
     8ae:	7e 81       	ldd	r23, Y+6	; 0x06
     8b0:	8f 81       	ldd	r24, Y+7	; 0x07
     8b2:	98 85       	ldd	r25, Y+8	; 0x08
     8b4:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	69 81       	ldd	r22, Y+1	; 0x01
     8be:	7a 81       	ldd	r23, Y+2	; 0x02
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     8c8:	69 83       	std	Y+1, r22	; 0x01
     8ca:	7a 83       	std	Y+2, r23	; 0x02
     8cc:	8b 83       	std	Y+3, r24	; 0x03
     8ce:	9c 83       	std	Y+4, r25	; 0x04
     8d0:	25 ec       	ldi	r18, 0xC5	; 197
     8d2:	30 ee       	ldi	r19, 0xE0	; 224
     8d4:	40 ee       	ldi	r20, 0xE0	; 224
     8d6:	52 e4       	ldi	r21, 0x42	; 66
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     8e0:	9b 01       	movw	r18, r22
     8e2:	ac 01       	movw	r20, r24
     8e4:	69 81       	ldd	r22, Y+1	; 0x01
     8e6:	7a 81       	ldd	r23, Y+2	; 0x02
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	9c 81       	ldd	r25, Y+4	; 0x04
     8ec:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     8f0:	2e ec       	ldi	r18, 0xCE	; 206
     8f2:	3b ef       	ldi	r19, 0xFB	; 251
     8f4:	4f e7       	ldi	r20, 0x7F	; 127
     8f6:	5b e3       	ldi	r21, 0x3B	; 59
     8f8:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	53 e4       	ldi	r21, 0x43	; 67
     904:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <BY1>
     910:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <BY1+0x1>
     914:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <BY1+0x2>
     918:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <BY1+0x3>
//frequency calculation and documented values
volatile float freqY1  =  1500 + (Y1 * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
     91c:	29 ec       	ldi	r18, 0xC9	; 201
     91e:	38 ec       	ldi	r19, 0xC8	; 200
     920:	48 e4       	ldi	r20, 0x48	; 72
     922:	50 e4       	ldi	r21, 0x40	; 64
     924:	c3 01       	movw	r24, r6
     926:	b2 01       	movw	r22, r4
     928:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e8       	ldi	r19, 0x80	; 128
     930:	4b eb       	ldi	r20, 0xBB	; 187
     932:	54 e4       	ldi	r21, 0x44	; 68
     934:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     938:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <freqY1>
     93c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <freqY1+0x1>
     940:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <freqY1+0x2>
     944:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <freqY1+0x3>
volatile float freqRY1 =   1500 + (RY1 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
     948:	29 ec       	ldi	r18, 0xC9	; 201
     94a:	38 ec       	ldi	r19, 0xC8	; 200
     94c:	48 e4       	ldi	r20, 0x48	; 72
     94e:	50 e4       	ldi	r21, 0x40	; 64
     950:	c5 01       	movw	r24, r10
     952:	b4 01       	movw	r22, r8
     954:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e8       	ldi	r19, 0x80	; 128
     95c:	4b eb       	ldi	r20, 0xBB	; 187
     95e:	54 e4       	ldi	r21, 0x44	; 68
     960:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     964:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <freqRY1>
     968:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <freqRY1+0x1>
     96c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <freqRY1+0x2>
     970:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <freqRY1+0x3>
volatile float freqBY1 =  1500 + (BY1 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
     974:	29 ec       	ldi	r18, 0xC9	; 201
     976:	38 ec       	ldi	r19, 0xC8	; 200
     978:	48 e4       	ldi	r20, 0x48	; 72
     97a:	50 e4       	ldi	r21, 0x40	; 64
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e8       	ldi	r19, 0x80	; 128
     988:	4b eb       	ldi	r20, 0xBB	; 187
     98a:	54 e4       	ldi	r21, 0x44	; 68
     98c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     990:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <freqBY1>
     994:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <freqBY1+0x1>
     998:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <freqBY1+0x2>
     99c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <freqBY1+0x3>

int R2=0,G2=255,B2=0;
float Y2 = 16.0 + (.003906 * ((65.738 * R2) + (129.057 * G2) + (25.064 * B2)));
     9a0:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <R2>
     9a4:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <R2+0x1>
     9a8:	07 2e       	mov	r0, r23
     9aa:	00 0c       	add	r0, r0
     9ac:	88 0b       	sbc	r24, r24
     9ae:	99 0b       	sbc	r25, r25
     9b0:	0e 94 34 07 	call	0xe68	; 0xe68 <__floatsisf>
     9b4:	69 83       	std	Y+1, r22	; 0x01
     9b6:	7a 83       	std	Y+2, r23	; 0x02
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <G2>
     9c0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <G2+0x1>
     9c4:	07 2e       	mov	r0, r23
     9c6:	00 0c       	add	r0, r0
     9c8:	88 0b       	sbc	r24, r24
     9ca:	99 0b       	sbc	r25, r25
     9cc:	0e 94 34 07 	call	0xe68	; 0xe68 <__floatsisf>
     9d0:	6d 83       	std	Y+5, r22	; 0x05
     9d2:	7e 83       	std	Y+6, r23	; 0x06
     9d4:	8f 83       	std	Y+7, r24	; 0x07
     9d6:	98 87       	std	Y+8, r25	; 0x08
     9d8:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <B2>
     9dc:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <B2+0x1>
     9e0:	07 2e       	mov	r0, r23
     9e2:	00 0c       	add	r0, r0
     9e4:	88 0b       	sbc	r24, r24
     9e6:	99 0b       	sbc	r25, r25
     9e8:	0e 94 34 07 	call	0xe68	; 0xe68 <__floatsisf>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	2b ed       	ldi	r18, 0xDB	; 219
     9f2:	39 e7       	ldi	r19, 0x79	; 121
     9f4:	43 e8       	ldi	r20, 0x83	; 131
     9f6:	52 e4       	ldi	r21, 0x42	; 66
     9f8:	69 81       	ldd	r22, Y+1	; 0x01
     9fa:	7a 81       	ldd	r23, Y+2	; 0x02
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     a04:	4b 01       	movw	r8, r22
     a06:	5c 01       	movw	r10, r24
     a08:	28 e9       	ldi	r18, 0x98	; 152
     a0a:	3e e0       	ldi	r19, 0x0E	; 14
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	53 e4       	ldi	r21, 0x43	; 67
     a10:	6d 81       	ldd	r22, Y+5	; 0x05
     a12:	7e 81       	ldd	r23, Y+6	; 0x06
     a14:	8f 81       	ldd	r24, Y+7	; 0x07
     a16:	98 85       	ldd	r25, Y+8	; 0x08
     a18:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
     a20:	c5 01       	movw	r24, r10
     a22:	b4 01       	movw	r22, r8
     a24:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     a28:	4b 01       	movw	r8, r22
     a2a:	5c 01       	movw	r10, r24
     a2c:	22 e1       	ldi	r18, 0x12	; 18
     a2e:	33 e8       	ldi	r19, 0x83	; 131
     a30:	48 ec       	ldi	r20, 0xC8	; 200
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	c5 01       	movw	r24, r10
     a42:	b4 01       	movw	r22, r8
     a44:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     a48:	2e ec       	ldi	r18, 0xCE	; 206
     a4a:	3b ef       	ldi	r19, 0xFB	; 251
     a4c:	4f e7       	ldi	r20, 0x7F	; 127
     a4e:	5b e3       	ldi	r21, 0x3B	; 59
     a50:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e8       	ldi	r20, 0x80	; 128
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     a60:	2b 01       	movw	r4, r22
     a62:	3c 01       	movw	r6, r24
     a64:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <Y2>
     a68:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <Y2+0x1>
     a6c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Y2+0x2>
     a70:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <Y2+0x3>
float RY2 = 128.0 + (.003906 * ((112.439 * R2) + (-94.154 * G2) + (-18.285 * B2)));
     a74:	25 ec       	ldi	r18, 0xC5	; 197
     a76:	30 ee       	ldi	r19, 0xE0	; 224
     a78:	40 ee       	ldi	r20, 0xE0	; 224
     a7a:	52 e4       	ldi	r21, 0x42	; 66
     a7c:	69 81       	ldd	r22, Y+1	; 0x01
     a7e:	7a 81       	ldd	r23, Y+2	; 0x02
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	9c 81       	ldd	r25, Y+4	; 0x04
     a84:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     a88:	4b 01       	movw	r8, r22
     a8a:	5c 01       	movw	r10, r24
     a8c:	29 ed       	ldi	r18, 0xD9	; 217
     a8e:	3e e4       	ldi	r19, 0x4E	; 78
     a90:	4c eb       	ldi	r20, 0xBC	; 188
     a92:	52 ec       	ldi	r21, 0xC2	; 194
     a94:	6d 81       	ldd	r22, Y+5	; 0x05
     a96:	7e 81       	ldd	r23, Y+6	; 0x06
     a98:	8f 81       	ldd	r24, Y+7	; 0x07
     a9a:	98 85       	ldd	r25, Y+8	; 0x08
     a9c:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     aa0:	9b 01       	movw	r18, r22
     aa2:	ac 01       	movw	r20, r24
     aa4:	c5 01       	movw	r24, r10
     aa6:	b4 01       	movw	r22, r8
     aa8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     aac:	4b 01       	movw	r8, r22
     aae:	5c 01       	movw	r10, r24
     ab0:	2e ea       	ldi	r18, 0xAE	; 174
     ab2:	37 e4       	ldi	r19, 0x47	; 71
     ab4:	42 e9       	ldi	r20, 0x92	; 146
     ab6:	51 ec       	ldi	r21, 0xC1	; 193
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	c5 01       	movw	r24, r10
     ac6:	b4 01       	movw	r22, r8
     ac8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     acc:	2e ec       	ldi	r18, 0xCE	; 206
     ace:	3b ef       	ldi	r19, 0xFB	; 251
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	53 e4       	ldi	r21, 0x43	; 67
     ae0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     ae4:	4b 01       	movw	r8, r22
     ae6:	5c 01       	movw	r10, r24
     ae8:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <RY2>
     aec:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <RY2+0x1>
     af0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <RY2+0x2>
     af4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <RY2+0x3>
float BY2 = 128.0 + (.003906 * ((-37.945 * R2) + (-74.494 * G2) + (112.439 * B2)));
     af8:	2e ea       	ldi	r18, 0xAE	; 174
     afa:	37 ec       	ldi	r19, 0xC7	; 199
     afc:	47 e1       	ldi	r20, 0x17	; 23
     afe:	52 ec       	ldi	r21, 0xC2	; 194
     b00:	69 81       	ldd	r22, Y+1	; 0x01
     b02:	7a 81       	ldd	r23, Y+2	; 0x02
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b0c:	69 83       	std	Y+1, r22	; 0x01
     b0e:	7a 83       	std	Y+2, r23	; 0x02
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	2e ee       	ldi	r18, 0xEE	; 238
     b16:	3c ef       	ldi	r19, 0xFC	; 252
     b18:	44 e9       	ldi	r20, 0x94	; 148
     b1a:	52 ec       	ldi	r21, 0xC2	; 194
     b1c:	6d 81       	ldd	r22, Y+5	; 0x05
     b1e:	7e 81       	ldd	r23, Y+6	; 0x06
     b20:	8f 81       	ldd	r24, Y+7	; 0x07
     b22:	98 85       	ldd	r25, Y+8	; 0x08
     b24:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	69 81       	ldd	r22, Y+1	; 0x01
     b2e:	7a 81       	ldd	r23, Y+2	; 0x02
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     b38:	69 83       	std	Y+1, r22	; 0x01
     b3a:	7a 83       	std	Y+2, r23	; 0x02
     b3c:	8b 83       	std	Y+3, r24	; 0x03
     b3e:	9c 83       	std	Y+4, r25	; 0x04
     b40:	25 ec       	ldi	r18, 0xC5	; 197
     b42:	30 ee       	ldi	r19, 0xE0	; 224
     b44:	40 ee       	ldi	r20, 0xE0	; 224
     b46:	52 e4       	ldi	r21, 0x42	; 66
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	69 81       	ldd	r22, Y+1	; 0x01
     b56:	7a 81       	ldd	r23, Y+2	; 0x02
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     b60:	2e ec       	ldi	r18, 0xCE	; 206
     b62:	3b ef       	ldi	r19, 0xFB	; 251
     b64:	4f e7       	ldi	r20, 0x7F	; 127
     b66:	5b e3       	ldi	r21, 0x3B	; 59
     b68:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	53 e4       	ldi	r21, 0x43	; 67
     b74:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     b78:	6b 01       	movw	r12, r22
     b7a:	7c 01       	movw	r14, r24
     b7c:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <BY2>
     b80:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <BY2+0x1>
     b84:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <BY2+0x2>
     b88:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <BY2+0x3>
//frequency calculation and documented values
volatile float freqY2  =  1500 + (Y2  * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
     b8c:	29 ec       	ldi	r18, 0xC9	; 201
     b8e:	38 ec       	ldi	r19, 0xC8	; 200
     b90:	48 e4       	ldi	r20, 0x48	; 72
     b92:	50 e4       	ldi	r21, 0x40	; 64
     b94:	c3 01       	movw	r24, r6
     b96:	b2 01       	movw	r22, r4
     b98:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e8       	ldi	r19, 0x80	; 128
     ba0:	4b eb       	ldi	r20, 0xBB	; 187
     ba2:	54 e4       	ldi	r21, 0x44	; 68
     ba4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     ba8:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <freqY2>
     bac:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <freqY2+0x1>
     bb0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <freqY2+0x2>
     bb4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <freqY2+0x3>
volatile float freqRY2 =  1500 + (RY2 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
     bb8:	29 ec       	ldi	r18, 0xC9	; 201
     bba:	38 ec       	ldi	r19, 0xC8	; 200
     bbc:	48 e4       	ldi	r20, 0x48	; 72
     bbe:	50 e4       	ldi	r21, 0x40	; 64
     bc0:	c5 01       	movw	r24, r10
     bc2:	b4 01       	movw	r22, r8
     bc4:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e8       	ldi	r19, 0x80	; 128
     bcc:	4b eb       	ldi	r20, 0xBB	; 187
     bce:	54 e4       	ldi	r21, 0x44	; 68
     bd0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     bd4:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <freqRY2>
     bd8:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <freqRY2+0x1>
     bdc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <freqRY2+0x2>
     be0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <freqRY2+0x3>
volatile float freqBY2 =  1500 + (BY2 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
     be4:	29 ec       	ldi	r18, 0xC9	; 201
     be6:	38 ec       	ldi	r19, 0xC8	; 200
     be8:	48 e4       	ldi	r20, 0x48	; 72
     bea:	50 e4       	ldi	r21, 0x40	; 64
     bec:	c7 01       	movw	r24, r14
     bee:	b6 01       	movw	r22, r12
     bf0:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e8       	ldi	r19, 0x80	; 128
     bf8:	4b eb       	ldi	r20, 0xBB	; 187
     bfa:	54 e4       	ldi	r21, 0x44	; 68
     bfc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     c00:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end>
     c04:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x1>
     c08:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end+0x2>
     c0c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x3>
	

	
}
	
     c10:	28 96       	adiw	r28, 0x08	; 8
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	08 95       	ret

00000c3a <__subsf3>:
     c3a:	50 58       	subi	r21, 0x80	; 128

00000c3c <__addsf3>:
     c3c:	bb 27       	eor	r27, r27
     c3e:	aa 27       	eor	r26, r26
     c40:	0e 94 35 06 	call	0xc6a	; 0xc6a <__addsf3x>
     c44:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     c48:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     c4c:	38 f0       	brcs	.+14     	; 0xc5c <__addsf3+0x20>
     c4e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     c52:	20 f0       	brcs	.+8      	; 0xc5c <__addsf3+0x20>
     c54:	39 f4       	brne	.+14     	; 0xc64 <__addsf3+0x28>
     c56:	9f 3f       	cpi	r25, 0xFF	; 255
     c58:	19 f4       	brne	.+6      	; 0xc60 <__addsf3+0x24>
     c5a:	26 f4       	brtc	.+8      	; 0xc64 <__addsf3+0x28>
     c5c:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
     c60:	0e f4       	brtc	.+2      	; 0xc64 <__addsf3+0x28>
     c62:	e0 95       	com	r30
     c64:	e7 fb       	bst	r30, 7
     c66:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>

00000c6a <__addsf3x>:
     c6a:	e9 2f       	mov	r30, r25
     c6c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     c70:	58 f3       	brcs	.-42     	; 0xc48 <__addsf3+0xc>
     c72:	ba 17       	cp	r27, r26
     c74:	62 07       	cpc	r22, r18
     c76:	73 07       	cpc	r23, r19
     c78:	84 07       	cpc	r24, r20
     c7a:	95 07       	cpc	r25, r21
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__addsf3x+0x1c>
     c7e:	79 f4       	brne	.+30     	; 0xc9e <__addsf3x+0x34>
     c80:	a6 f5       	brtc	.+104    	; 0xcea <__addsf3x+0x80>
     c82:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     c86:	0e f4       	brtc	.+2      	; 0xc8a <__addsf3x+0x20>
     c88:	e0 95       	com	r30
     c8a:	0b 2e       	mov	r0, r27
     c8c:	ba 2f       	mov	r27, r26
     c8e:	a0 2d       	mov	r26, r0
     c90:	0b 01       	movw	r0, r22
     c92:	b9 01       	movw	r22, r18
     c94:	90 01       	movw	r18, r0
     c96:	0c 01       	movw	r0, r24
     c98:	ca 01       	movw	r24, r20
     c9a:	a0 01       	movw	r20, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	ff 27       	eor	r31, r31
     ca0:	59 1b       	sub	r21, r25
     ca2:	99 f0       	breq	.+38     	; 0xcca <__addsf3x+0x60>
     ca4:	59 3f       	cpi	r21, 0xF9	; 249
     ca6:	50 f4       	brcc	.+20     	; 0xcbc <__addsf3x+0x52>
     ca8:	50 3e       	cpi	r21, 0xE0	; 224
     caa:	68 f1       	brcs	.+90     	; 0xd06 <__addsf3x+0x9c>
     cac:	1a 16       	cp	r1, r26
     cae:	f0 40       	sbci	r31, 0x00	; 0
     cb0:	a2 2f       	mov	r26, r18
     cb2:	23 2f       	mov	r18, r19
     cb4:	34 2f       	mov	r19, r20
     cb6:	44 27       	eor	r20, r20
     cb8:	58 5f       	subi	r21, 0xF8	; 248
     cba:	f3 cf       	rjmp	.-26     	; 0xca2 <__addsf3x+0x38>
     cbc:	46 95       	lsr	r20
     cbe:	37 95       	ror	r19
     cc0:	27 95       	ror	r18
     cc2:	a7 95       	ror	r26
     cc4:	f0 40       	sbci	r31, 0x00	; 0
     cc6:	53 95       	inc	r21
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <__addsf3x+0x52>
     cca:	7e f4       	brtc	.+30     	; 0xcea <__addsf3x+0x80>
     ccc:	1f 16       	cp	r1, r31
     cce:	ba 0b       	sbc	r27, r26
     cd0:	62 0b       	sbc	r22, r18
     cd2:	73 0b       	sbc	r23, r19
     cd4:	84 0b       	sbc	r24, r20
     cd6:	ba f0       	brmi	.+46     	; 0xd06 <__addsf3x+0x9c>
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	a1 f0       	breq	.+40     	; 0xd04 <__addsf3x+0x9a>
     cdc:	ff 0f       	add	r31, r31
     cde:	bb 1f       	adc	r27, r27
     ce0:	66 1f       	adc	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	c2 f7       	brpl	.-16     	; 0xcd8 <__addsf3x+0x6e>
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <__addsf3x+0x9c>
     cea:	ba 0f       	add	r27, r26
     cec:	62 1f       	adc	r22, r18
     cee:	73 1f       	adc	r23, r19
     cf0:	84 1f       	adc	r24, r20
     cf2:	48 f4       	brcc	.+18     	; 0xd06 <__addsf3x+0x9c>
     cf4:	87 95       	ror	r24
     cf6:	77 95       	ror	r23
     cf8:	67 95       	ror	r22
     cfa:	b7 95       	ror	r27
     cfc:	f7 95       	ror	r31
     cfe:	9e 3f       	cpi	r25, 0xFE	; 254
     d00:	08 f0       	brcs	.+2      	; 0xd04 <__addsf3x+0x9a>
     d02:	b0 cf       	rjmp	.-160    	; 0xc64 <__addsf3+0x28>
     d04:	93 95       	inc	r25
     d06:	88 0f       	add	r24, r24
     d08:	08 f0       	brcs	.+2      	; 0xd0c <__addsf3x+0xa2>
     d0a:	99 27       	eor	r25, r25
     d0c:	ee 0f       	add	r30, r30
     d0e:	97 95       	ror	r25
     d10:	87 95       	ror	r24
     d12:	08 95       	ret

00000d14 <__divsf3>:
     d14:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__divsf3x>
     d18:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     d1c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     d20:	58 f0       	brcs	.+22     	; 0xd38 <__divsf3+0x24>
     d22:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     d26:	40 f0       	brcs	.+16     	; 0xd38 <__divsf3+0x24>
     d28:	29 f4       	brne	.+10     	; 0xd34 <__divsf3+0x20>
     d2a:	5f 3f       	cpi	r21, 0xFF	; 255
     d2c:	29 f0       	breq	.+10     	; 0xd38 <__divsf3+0x24>
     d2e:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
     d32:	51 11       	cpse	r21, r1
     d34:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     d38:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>

00000d3c <__divsf3x>:
     d3c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     d40:	68 f3       	brcs	.-38     	; 0xd1c <__divsf3+0x8>

00000d42 <__divsf3_pse>:
     d42:	99 23       	and	r25, r25
     d44:	b1 f3       	breq	.-20     	; 0xd32 <__divsf3+0x1e>
     d46:	55 23       	and	r21, r21
     d48:	91 f3       	breq	.-28     	; 0xd2e <__divsf3+0x1a>
     d4a:	95 1b       	sub	r25, r21
     d4c:	55 0b       	sbc	r21, r21
     d4e:	bb 27       	eor	r27, r27
     d50:	aa 27       	eor	r26, r26
     d52:	62 17       	cp	r22, r18
     d54:	73 07       	cpc	r23, r19
     d56:	84 07       	cpc	r24, r20
     d58:	38 f0       	brcs	.+14     	; 0xd68 <__divsf3_pse+0x26>
     d5a:	9f 5f       	subi	r25, 0xFF	; 255
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	44 1f       	adc	r20, r20
     d64:	aa 1f       	adc	r26, r26
     d66:	a9 f3       	breq	.-22     	; 0xd52 <__divsf3_pse+0x10>
     d68:	35 d0       	rcall	.+106    	; 0xdd4 <__divsf3_pse+0x92>
     d6a:	0e 2e       	mov	r0, r30
     d6c:	3a f0       	brmi	.+14     	; 0xd7c <__divsf3_pse+0x3a>
     d6e:	e0 e8       	ldi	r30, 0x80	; 128
     d70:	32 d0       	rcall	.+100    	; 0xdd6 <__divsf3_pse+0x94>
     d72:	91 50       	subi	r25, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	e6 95       	lsr	r30
     d78:	00 1c       	adc	r0, r0
     d7a:	ca f7       	brpl	.-14     	; 0xd6e <__divsf3_pse+0x2c>
     d7c:	2b d0       	rcall	.+86     	; 0xdd4 <__divsf3_pse+0x92>
     d7e:	fe 2f       	mov	r31, r30
     d80:	29 d0       	rcall	.+82     	; 0xdd4 <__divsf3_pse+0x92>
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	bb 1f       	adc	r27, r27
     d8a:	26 17       	cp	r18, r22
     d8c:	37 07       	cpc	r19, r23
     d8e:	48 07       	cpc	r20, r24
     d90:	ab 07       	cpc	r26, r27
     d92:	b0 e8       	ldi	r27, 0x80	; 128
     d94:	09 f0       	breq	.+2      	; 0xd98 <__divsf3_pse+0x56>
     d96:	bb 0b       	sbc	r27, r27
     d98:	80 2d       	mov	r24, r0
     d9a:	bf 01       	movw	r22, r30
     d9c:	ff 27       	eor	r31, r31
     d9e:	93 58       	subi	r25, 0x83	; 131
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	3a f0       	brmi	.+14     	; 0xdb2 <__divsf3_pse+0x70>
     da4:	9e 3f       	cpi	r25, 0xFE	; 254
     da6:	51 05       	cpc	r21, r1
     da8:	78 f0       	brcs	.+30     	; 0xdc8 <__divsf3_pse+0x86>
     daa:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
     dae:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     db2:	5f 3f       	cpi	r21, 0xFF	; 255
     db4:	e4 f3       	brlt	.-8      	; 0xdae <__divsf3_pse+0x6c>
     db6:	98 3e       	cpi	r25, 0xE8	; 232
     db8:	d4 f3       	brlt	.-12     	; 0xdae <__divsf3_pse+0x6c>
     dba:	86 95       	lsr	r24
     dbc:	77 95       	ror	r23
     dbe:	67 95       	ror	r22
     dc0:	b7 95       	ror	r27
     dc2:	f7 95       	ror	r31
     dc4:	9f 5f       	subi	r25, 0xFF	; 255
     dc6:	c9 f7       	brne	.-14     	; 0xdba <__divsf3_pse+0x78>
     dc8:	88 0f       	add	r24, r24
     dca:	91 1d       	adc	r25, r1
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret
     dd4:	e1 e0       	ldi	r30, 0x01	; 1
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	bb 1f       	adc	r27, r27
     dde:	62 17       	cp	r22, r18
     de0:	73 07       	cpc	r23, r19
     de2:	84 07       	cpc	r24, r20
     de4:	ba 07       	cpc	r27, r26
     de6:	20 f0       	brcs	.+8      	; 0xdf0 <__divsf3_pse+0xae>
     de8:	62 1b       	sub	r22, r18
     dea:	73 0b       	sbc	r23, r19
     dec:	84 0b       	sbc	r24, r20
     dee:	ba 0b       	sbc	r27, r26
     df0:	ee 1f       	adc	r30, r30
     df2:	88 f7       	brcc	.-30     	; 0xdd6 <__divsf3_pse+0x94>
     df4:	e0 95       	com	r30
     df6:	08 95       	ret

00000df8 <__fixsfsi>:
     df8:	0e 94 03 07 	call	0xe06	; 0xe06 <__fixunssfsi>
     dfc:	68 94       	set
     dfe:	b1 11       	cpse	r27, r1
     e00:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e04:	08 95       	ret

00000e06 <__fixunssfsi>:
     e06:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     e0a:	88 f0       	brcs	.+34     	; 0xe2e <__fixunssfsi+0x28>
     e0c:	9f 57       	subi	r25, 0x7F	; 127
     e0e:	98 f0       	brcs	.+38     	; 0xe36 <__fixunssfsi+0x30>
     e10:	b9 2f       	mov	r27, r25
     e12:	99 27       	eor	r25, r25
     e14:	b7 51       	subi	r27, 0x17	; 23
     e16:	b0 f0       	brcs	.+44     	; 0xe44 <__fixunssfsi+0x3e>
     e18:	e1 f0       	breq	.+56     	; 0xe52 <__fixunssfsi+0x4c>
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	1a f0       	brmi	.+6      	; 0xe2a <__fixunssfsi+0x24>
     e24:	ba 95       	dec	r27
     e26:	c9 f7       	brne	.-14     	; 0xe1a <__fixunssfsi+0x14>
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <__fixunssfsi+0x4c>
     e2a:	b1 30       	cpi	r27, 0x01	; 1
     e2c:	91 f0       	breq	.+36     	; 0xe52 <__fixunssfsi+0x4c>
     e2e:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_zero>
     e32:	b1 e0       	ldi	r27, 0x01	; 1
     e34:	08 95       	ret
     e36:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     e3a:	67 2f       	mov	r22, r23
     e3c:	78 2f       	mov	r23, r24
     e3e:	88 27       	eor	r24, r24
     e40:	b8 5f       	subi	r27, 0xF8	; 248
     e42:	39 f0       	breq	.+14     	; 0xe52 <__fixunssfsi+0x4c>
     e44:	b9 3f       	cpi	r27, 0xF9	; 249
     e46:	cc f3       	brlt	.-14     	; 0xe3a <__fixunssfsi+0x34>
     e48:	86 95       	lsr	r24
     e4a:	77 95       	ror	r23
     e4c:	67 95       	ror	r22
     e4e:	b3 95       	inc	r27
     e50:	d9 f7       	brne	.-10     	; 0xe48 <__fixunssfsi+0x42>
     e52:	3e f4       	brtc	.+14     	; 0xe62 <__fixunssfsi+0x5c>
     e54:	90 95       	com	r25
     e56:	80 95       	com	r24
     e58:	70 95       	com	r23
     e5a:	61 95       	neg	r22
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	08 95       	ret

00000e64 <__floatunsisf>:
     e64:	e8 94       	clt
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <__floatsisf+0x12>

00000e68 <__floatsisf>:
     e68:	97 fb       	bst	r25, 7
     e6a:	3e f4       	brtc	.+14     	; 0xe7a <__floatsisf+0x12>
     e6c:	90 95       	com	r25
     e6e:	80 95       	com	r24
     e70:	70 95       	com	r23
     e72:	61 95       	neg	r22
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	8f 4f       	sbci	r24, 0xFF	; 255
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	99 23       	and	r25, r25
     e7c:	a9 f0       	breq	.+42     	; 0xea8 <__floatsisf+0x40>
     e7e:	f9 2f       	mov	r31, r25
     e80:	96 e9       	ldi	r25, 0x96	; 150
     e82:	bb 27       	eor	r27, r27
     e84:	93 95       	inc	r25
     e86:	f6 95       	lsr	r31
     e88:	87 95       	ror	r24
     e8a:	77 95       	ror	r23
     e8c:	67 95       	ror	r22
     e8e:	b7 95       	ror	r27
     e90:	f1 11       	cpse	r31, r1
     e92:	f8 cf       	rjmp	.-16     	; 0xe84 <__floatsisf+0x1c>
     e94:	fa f4       	brpl	.+62     	; 0xed4 <__floatsisf+0x6c>
     e96:	bb 0f       	add	r27, r27
     e98:	11 f4       	brne	.+4      	; 0xe9e <__floatsisf+0x36>
     e9a:	60 ff       	sbrs	r22, 0
     e9c:	1b c0       	rjmp	.+54     	; 0xed4 <__floatsisf+0x6c>
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	16 c0       	rjmp	.+44     	; 0xed4 <__floatsisf+0x6c>
     ea8:	88 23       	and	r24, r24
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <__floatsisf+0x48>
     eac:	96 e9       	ldi	r25, 0x96	; 150
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <__floatsisf+0x6a>
     eb0:	77 23       	and	r23, r23
     eb2:	21 f0       	breq	.+8      	; 0xebc <__floatsisf+0x54>
     eb4:	9e e8       	ldi	r25, 0x8E	; 142
     eb6:	87 2f       	mov	r24, r23
     eb8:	76 2f       	mov	r23, r22
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <__floatsisf+0x5e>
     ebc:	66 23       	and	r22, r22
     ebe:	71 f0       	breq	.+28     	; 0xedc <__floatsisf+0x74>
     ec0:	96 e8       	ldi	r25, 0x86	; 134
     ec2:	86 2f       	mov	r24, r22
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	2a f0       	brmi	.+10     	; 0xed4 <__floatsisf+0x6c>
     eca:	9a 95       	dec	r25
     ecc:	66 0f       	add	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	88 1f       	adc	r24, r24
     ed2:	da f7       	brpl	.-10     	; 0xeca <__floatsisf+0x62>
     ed4:	88 0f       	add	r24, r24
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	97 f9       	bld	r25, 7
     edc:	08 95       	ret
     ede:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__floatsisf+0x84>
     ee4:	19 f0       	breq	.+6      	; 0xeec <__floatsisf+0x84>
     ee6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     eea:	50 f4       	brcc	.+20     	; 0xf00 <fmod+0xc>
     eec:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
     ef0:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

00000ef4 <fmod>:
     ef4:	e9 2f       	mov	r30, r25
     ef6:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     efa:	88 f3       	brcs	.-30     	; 0xede <__floatsisf+0x76>
     efc:	55 23       	and	r21, r21
     efe:	b1 f3       	breq	.-20     	; 0xeec <__floatsisf+0x84>
     f00:	e7 fb       	bst	r30, 7
     f02:	62 17       	cp	r22, r18
     f04:	73 07       	cpc	r23, r19
     f06:	84 07       	cpc	r24, r20
     f08:	95 07       	cpc	r25, r21
     f0a:	a8 f1       	brcs	.+106    	; 0xf76 <fmod+0x82>
     f0c:	89 f3       	breq	.-30     	; 0xef0 <__floatsisf+0x88>
     f0e:	e9 2f       	mov	r30, r25
     f10:	ff 27       	eor	r31, r31
     f12:	88 23       	and	r24, r24
     f14:	2a f0       	brmi	.+10     	; 0xf20 <fmod+0x2c>
     f16:	31 97       	sbiw	r30, 0x01	; 1
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	da f7       	brpl	.-10     	; 0xf16 <fmod+0x22>
     f20:	95 2f       	mov	r25, r21
     f22:	55 27       	eor	r21, r21
     f24:	44 23       	and	r20, r20
     f26:	32 f0       	brmi	.+12     	; 0xf34 <fmod+0x40>
     f28:	91 50       	subi	r25, 0x01	; 1
     f2a:	50 40       	sbci	r21, 0x00	; 0
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	44 1f       	adc	r20, r20
     f32:	d2 f7       	brpl	.-12     	; 0xf28 <fmod+0x34>
     f34:	bb 27       	eor	r27, r27
     f36:	e9 1b       	sub	r30, r25
     f38:	f5 0b       	sbc	r31, r21
     f3a:	62 1b       	sub	r22, r18
     f3c:	73 0b       	sbc	r23, r19
     f3e:	84 0b       	sbc	r24, r20
     f40:	b1 09       	sbc	r27, r1
     f42:	b1 f2       	breq	.-84     	; 0xef0 <__floatsisf+0x88>
     f44:	22 f4       	brpl	.+8      	; 0xf4e <fmod+0x5a>
     f46:	62 0f       	add	r22, r18
     f48:	73 1f       	adc	r23, r19
     f4a:	84 1f       	adc	r24, r20
     f4c:	b1 1d       	adc	r27, r1
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	2a f0       	brmi	.+10     	; 0xf5c <fmod+0x68>
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	bb 1f       	adc	r27, r27
     f5a:	ef cf       	rjmp	.-34     	; 0xf3a <fmod+0x46>
     f5c:	91 50       	subi	r25, 0x01	; 1
     f5e:	50 40       	sbci	r21, 0x00	; 0
     f60:	62 f0       	brmi	.+24     	; 0xf7a <fmod+0x86>
     f62:	41 f0       	breq	.+16     	; 0xf74 <fmod+0x80>
     f64:	88 23       	and	r24, r24
     f66:	32 f0       	brmi	.+12     	; 0xf74 <fmod+0x80>
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	50 40       	sbci	r21, 0x00	; 0
     f72:	c1 f7       	brne	.-16     	; 0xf64 <fmod+0x70>
     f74:	93 95       	inc	r25
     f76:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_mpack>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	9f 5f       	subi	r25, 0xFF	; 255
     f82:	d9 f7       	brne	.-10     	; 0xf7a <fmod+0x86>
     f84:	f7 cf       	rjmp	.-18     	; 0xf74 <fmod+0x80>

00000f86 <__fp_inf>:
     f86:	97 f9       	bld	r25, 7
     f88:	9f 67       	ori	r25, 0x7F	; 127
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	08 95       	ret

00000f92 <__fp_mpack>:
     f92:	9f 3f       	cpi	r25, 0xFF	; 255
     f94:	31 f0       	breq	.+12     	; 0xfa2 <__fp_mpack_finite+0xc>

00000f96 <__fp_mpack_finite>:
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	20 f4       	brcc	.+8      	; 0xfa2 <__fp_mpack_finite+0xc>
     f9a:	87 95       	ror	r24
     f9c:	77 95       	ror	r23
     f9e:	67 95       	ror	r22
     fa0:	b7 95       	ror	r27
     fa2:	88 0f       	add	r24, r24
     fa4:	91 1d       	adc	r25, r1
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__fp_nan>:
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	80 ec       	ldi	r24, 0xC0	; 192
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <__mulsf3>:
    1044:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3x>
    1048:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    104c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    1050:	38 f0       	brcs	.+14     	; 0x1060 <__mulsf3+0x1c>
    1052:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1056:	20 f0       	brcs	.+8      	; 0x1060 <__mulsf3+0x1c>
    1058:	95 23       	and	r25, r21
    105a:	11 f0       	breq	.+4      	; 0x1060 <__mulsf3+0x1c>
    105c:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
    1060:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    1064:	11 24       	eor	r1, r1
    1066:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

0000106a <__mulsf3x>:
    106a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    106e:	70 f3       	brcs	.-36     	; 0x104c <__mulsf3+0x8>

00001070 <__mulsf3_pse>:
    1070:	95 9f       	mul	r25, r21
    1072:	c1 f3       	breq	.-16     	; 0x1064 <__mulsf3+0x20>
    1074:	95 0f       	add	r25, r21
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	55 1f       	adc	r21, r21
    107a:	62 9f       	mul	r22, r18
    107c:	f0 01       	movw	r30, r0
    107e:	72 9f       	mul	r23, r18
    1080:	bb 27       	eor	r27, r27
    1082:	f0 0d       	add	r31, r0
    1084:	b1 1d       	adc	r27, r1
    1086:	63 9f       	mul	r22, r19
    1088:	aa 27       	eor	r26, r26
    108a:	f0 0d       	add	r31, r0
    108c:	b1 1d       	adc	r27, r1
    108e:	aa 1f       	adc	r26, r26
    1090:	64 9f       	mul	r22, r20
    1092:	66 27       	eor	r22, r22
    1094:	b0 0d       	add	r27, r0
    1096:	a1 1d       	adc	r26, r1
    1098:	66 1f       	adc	r22, r22
    109a:	82 9f       	mul	r24, r18
    109c:	22 27       	eor	r18, r18
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	62 1f       	adc	r22, r18
    10a4:	73 9f       	mul	r23, r19
    10a6:	b0 0d       	add	r27, r0
    10a8:	a1 1d       	adc	r26, r1
    10aa:	62 1f       	adc	r22, r18
    10ac:	83 9f       	mul	r24, r19
    10ae:	a0 0d       	add	r26, r0
    10b0:	61 1d       	adc	r22, r1
    10b2:	22 1f       	adc	r18, r18
    10b4:	74 9f       	mul	r23, r20
    10b6:	33 27       	eor	r19, r19
    10b8:	a0 0d       	add	r26, r0
    10ba:	61 1d       	adc	r22, r1
    10bc:	23 1f       	adc	r18, r19
    10be:	84 9f       	mul	r24, r20
    10c0:	60 0d       	add	r22, r0
    10c2:	21 1d       	adc	r18, r1
    10c4:	82 2f       	mov	r24, r18
    10c6:	76 2f       	mov	r23, r22
    10c8:	6a 2f       	mov	r22, r26
    10ca:	11 24       	eor	r1, r1
    10cc:	9f 57       	subi	r25, 0x7F	; 127
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	9a f0       	brmi	.+38     	; 0x10f8 <__mulsf3_pse+0x88>
    10d2:	f1 f0       	breq	.+60     	; 0x1110 <__mulsf3_pse+0xa0>
    10d4:	88 23       	and	r24, r24
    10d6:	4a f0       	brmi	.+18     	; 0x10ea <__mulsf3_pse+0x7a>
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	bb 1f       	adc	r27, r27
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <__mulsf3_pse+0x64>
    10ea:	9e 3f       	cpi	r25, 0xFE	; 254
    10ec:	51 05       	cpc	r21, r1
    10ee:	80 f0       	brcs	.+32     	; 0x1110 <__mulsf3_pse+0xa0>
    10f0:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
    10f4:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    10f8:	5f 3f       	cpi	r21, 0xFF	; 255
    10fa:	e4 f3       	brlt	.-8      	; 0x10f4 <__mulsf3_pse+0x84>
    10fc:	98 3e       	cpi	r25, 0xE8	; 232
    10fe:	d4 f3       	brlt	.-12     	; 0x10f4 <__mulsf3_pse+0x84>
    1100:	86 95       	lsr	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b7 95       	ror	r27
    1108:	f7 95       	ror	r31
    110a:	e7 95       	ror	r30
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	c1 f7       	brne	.-16     	; 0x1100 <__mulsf3_pse+0x90>
    1110:	fe 2b       	or	r31, r30
    1112:	88 0f       	add	r24, r24
    1114:	91 1d       	adc	r25, r1
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	97 f9       	bld	r25, 7
    111c:	08 95       	ret

0000111e <__tablejump2__>:
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	05 90       	lpm	r0, Z+
    1124:	f4 91       	lpm	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	09 94       	ijmp

0000112a <_exit>:
    112a:	f8 94       	cli

0000112c <__stop_program>:
    112c:	ff cf       	rjmp	.-2      	; 0x112c <__stop_program>
