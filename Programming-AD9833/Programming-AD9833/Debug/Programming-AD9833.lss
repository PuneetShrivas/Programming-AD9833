
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000afa  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00000b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138b  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000785  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b1  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2e  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_9>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_12>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	f7 02       	muls	r31, r23

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	ea ef       	ldi	r30, 0xFA	; 250
  6a:	fa e0       	ldi	r31, 0x0A	; 10
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a2 36       	cpi	r26, 0x62	; 98
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a2 e6       	ldi	r26, 0x62	; 98
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	ae 36       	cpi	r26, 0x6E	; 110
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 75 05 	call	0xaea	; 0xaea <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  a2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z8SPI_initv>:
{
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	UART_send(MSdata);
	UART_send(LSdata);
}
  aa:	81 ea       	ldi	r24, 0xA1	; 161
  ac:	87 bb       	out	0x17, r24	; 23
  ae:	81 e1       	ldi	r24, 0x11	; 17
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	89 ed       	ldi	r24, 0xD9	; 217
  b4:	8d b9       	out	0x0d, r24	; 13
  b6:	08 95       	ret

000000b8 <_Z9UART_initv>:
  b8:	10 bc       	out	0x20, r1	; 32
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	89 b9       	out	0x09, r24	; 9
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	8e e8       	ldi	r24, 0x8E	; 142
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <_Z12SPI_transferh>:
  c8:	8f b9       	out	0x0f, r24	; 15
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <_Z12SPI_transferh+0x2>
  ce:	08 95       	ret

000000d0 <_Z11SPI_write16t>:

void SPI_write16 (unsigned short data)    			//send a 16bit word and use f sync
{  
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PINB0);						    //F sync Low --> begin frame
  d4:	c0 98       	cbi	0x18, 0	; 24
	SPI_transfer(MSdata);							
  d6:	89 2f       	mov	r24, r25
  d8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	SPI_transfer(LSdata);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	PORTB |= (1<<PINB0);						    //F sync High --> End of frame
  e2:	c0 9a       	sbi	0x18, 0	; 24
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_Z10Set_AD9833fj>:

void Set_AD9833(float frequency, unsigned int phase)
{
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8a 01       	movw	r16, r20
	long FreqReg = (frequency*pow(2,28))/(float)Fmclk;	  //Calculate frequency to be sent to AD9833
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5d e4       	ldi	r21, 0x4D	; 77
 102:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 106:	20 e2       	ldi	r18, 0x20	; 32
 108:	3c eb       	ldi	r19, 0xBC	; 188
 10a:	4e eb       	ldi	r20, 0xBE	; 190
 10c:	5b e4       	ldi	r21, 0x4B	; 75
 10e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3>
 112:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);		  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 116:	6b 01       	movw	r12, r22
 118:	7c 01       	movw	r14, r24
 11a:	cc 24       	eor	r12, r12
 11c:	20 ec       	ldi	r18, 0xC0	; 192
 11e:	d2 22       	and	r13, r18
 120:	2f e0       	ldi	r18, 0x0F	; 15
 122:	f2 22       	and	r15, r18
 124:	0b 2e       	mov	r0, r27
 126:	be e0       	ldi	r27, 0x0E	; 14
 128:	f5 94       	asr	r15
 12a:	e7 94       	ror	r14
 12c:	d7 94       	ror	r13
 12e:	c7 94       	ror	r12
 130:	ba 95       	dec	r27
 132:	d1 f7       	brne	.-12     	; 0x128 <_Z10Set_AD9833fj+0x40>
 134:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
 136:	eb 01       	movw	r28, r22
 138:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     									  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_write16(0x2100);								  //define waveform and set reset bit
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e2       	ldi	r25, 0x21	; 33
 13e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(LSB);									  //Write LSBs
 142:	ce 01       	movw	r24, r28
 144:	90 64       	ori	r25, 0x40	; 64
 146:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(MSB);									  //Write MSBs
 14a:	c6 01       	movw	r24, r12
 14c:	90 64       	ori	r25, 0x40	; 64
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	phase&=0x0FFF;
 152:	c8 01       	movw	r24, r16
 154:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;
	//SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_write16(phase);
 156:	90 6c       	ori	r25, 0xC0	; 192
 158:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(0x2000);                                                                                                                                                                                                                                                                                             
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e2       	ldi	r25, 0x20	; 32
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	df 90       	pop	r13
 172:	cf 90       	pop	r12
 174:	08 95       	ret

00000176 <_Z8getphasefff>:

unsigned int getphase(float pphase,float freq, float time)
{
 176:	4f 92       	push	r4
 178:	5f 92       	push	r5
 17a:	6f 92       	push	r6
 17c:	7f 92       	push	r7
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <_Z8getphasefff+0x22>
 198:	00 d0       	rcall	.+0      	; 0x19a <_Z8getphasefff+0x24>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	2b 01       	movw	r4, r22
 1a0:	3c 01       	movw	r6, r24
 1a2:	49 01       	movw	r8, r18
 1a4:	5a 01       	movw	r10, r20
 1a6:	67 01       	movw	r12, r14
 1a8:	78 01       	movw	r14, r16
	time/=1000000;
	pphase/=2048/PI;
	float ph=((fmod(time,(1/freq))*2*PI*freq)+pphase)*2048/PI;
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	9f e3       	ldi	r25, 0x3F	; 63
 1b2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3>
 1b6:	69 83       	std	Y+1, r22	; 0x01
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	34 e2       	ldi	r19, 0x24	; 36
 1c2:	44 e7       	ldi	r20, 0x74	; 116
 1c4:	59 e4       	ldi	r21, 0x49	; 73
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3>
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	3a 81       	ldd	r19, Y+2	; 0x02
 1d2:	4b 81       	ldd	r20, Y+3	; 0x03
 1d4:	5c 81       	ldd	r21, Y+4	; 0x04
 1d6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <fmod>
	return (unsigned int) ph;
 1da:	9b 01       	movw	r18, r22
 1dc:	ac 01       	movw	r20, r24
 1de:	0e 94 04 03 	call	0x608	; 0x608 <__addsf3>
 1e2:	20 ed       	ldi	r18, 0xD0	; 208
 1e4:	3f e0       	ldi	r19, 0x0F	; 15
 1e6:	49 e4       	ldi	r20, 0x49	; 73
 1e8:	50 e4       	ldi	r21, 0x40	; 64
 1ea:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 1ee:	a5 01       	movw	r20, r10
 1f0:	94 01       	movw	r18, r8
 1f2:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 1f6:	6b 01       	movw	r12, r22
 1f8:	7c 01       	movw	r14, r24
 1fa:	2c e8       	ldi	r18, 0x8C	; 140
 1fc:	39 ef       	ldi	r19, 0xF9	; 249
 1fe:	42 e2       	ldi	r20, 0x22	; 34
 200:	54 e4       	ldi	r21, 0x44	; 68
 202:	c3 01       	movw	r24, r6
 204:	b2 01       	movw	r22, r4
 206:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3>
 20a:	9b 01       	movw	r18, r22
 20c:	ac 01       	movw	r20, r24
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	0e 94 04 03 	call	0x608	; 0x608 <__addsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	55 e4       	ldi	r21, 0x45	; 69
 21e:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 222:	20 ed       	ldi	r18, 0xD0	; 208
 224:	3f e0       	ldi	r19, 0x0F	; 15
 226:	49 e4       	ldi	r20, 0x49	; 73
 228:	50 e4       	ldi	r21, 0x40	; 64
 22a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3>
 22e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fixunssfsi>
}
 232:	cb 01       	movw	r24, r22
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	08 95       	ret

0000025e <main>:

int main(void)
{
	UART_init();
 25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9UART_initv>
	SPI_init();
 262:	0e 94 55 00 	call	0xaa	; 0xaa <_Z8SPI_initv>
	DDRA=(1<<PINA0)|(1<<PINA1)|(1<<PINA2);			//output pins for LEDs
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	8a bb       	out	0x1a, r24	; 26
	TCCR1A=0;
 26a:	1f bc       	out	0x2f, r1	; 47
	PORTA=0;
 26c:	1b ba       	out	0x1b, r1	; 27
	SPI_write16(0x100);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	//frequency calculation and documented values
	float freqY  =  1500 + (Y * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)	
	float freqRY =  1500 + (RY * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
	float freqBY =  1500 + (BY * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)|
	
	SPI_write16(0x100);								//Reset AD9833 
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	
	//VIS Code
	{//leader tone
	Set_AD9833(1900,0);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e8       	ldi	r23, 0x80	; 128
 286:	8d ee       	ldi	r24, 0xED	; 237
 288:	94 e4       	ldi	r25, 0x44	; 68
 28a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	8f e7       	ldi	r24, 0x7F	; 127
 292:	9d e0       	ldi	r25, 0x0D	; 13
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x36>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x40>
 29e:	00 00       	nop
	_delay_ms(300);
	//break
	Set_AD9833(1200,0);
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	86 e9       	ldi	r24, 0x96	; 150
 2aa:	94 e4       	ldi	r25, 0x44	; 68
 2ac:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	9f e8       	ldi	r25, 0x8F	; 143
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x56>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x5c>
 2ba:	00 00       	nop
	_delay_ms(10);
	//leader
	Set_AD9833(1900,0);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e8       	ldi	r23, 0x80	; 128
 2c4:	8d ee       	ldi	r24, 0xED	; 237
 2c6:	94 e4       	ldi	r25, 0x44	; 68
 2c8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	2f e7       	ldi	r18, 0x7F	; 127
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x74>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x7e>
 2dc:	00 00       	nop
	_delay_ms(300);
	//VIS start bit
	Set_AD9833(1200,0);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	86 e9       	ldi	r24, 0x96	; 150
 2e8:	94 e4       	ldi	r25, 0x44	; 68
 2ea:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2ee:	99 e9       	ldi	r25, 0x99	; 153
 2f0:	29 e5       	ldi	r18, 0x59	; 89
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	91 50       	subi	r25, 0x01	; 1
 2f6:	20 40       	sbci	r18, 0x00	; 0
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x96>
 2fc:	00 00       	nop
	_delay_ms(30);
	//PD90 VIS code = 99d = 0b1100011
	//bit 0=1
	Set_AD9833(1100,0);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e8       	ldi	r23, 0x80	; 128
 306:	89 e8       	ldi	r24, 0x89	; 137
 308:	94 e4       	ldi	r25, 0x44	; 68
 30a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 30e:	99 e9       	ldi	r25, 0x99	; 153
 310:	29 e5       	ldi	r18, 0x59	; 89
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	91 50       	subi	r25, 0x01	; 1
 316:	20 40       	sbci	r18, 0x00	; 0
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0xb6>
 31c:	00 00       	nop
	_delay_ms(30);
	//bit 1=1
	Set_AD9833(1100,0);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	70 e8       	ldi	r23, 0x80	; 128
 326:	89 e8       	ldi	r24, 0x89	; 137
 328:	94 e4       	ldi	r25, 0x44	; 68
 32a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 32e:	99 e9       	ldi	r25, 0x99	; 153
 330:	29 e5       	ldi	r18, 0x59	; 89
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	91 50       	subi	r25, 0x01	; 1
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0xd6>
 33c:	00 00       	nop
	_delay_ms(30);
	//bit 2=0
	Set_AD9833(1300,0);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 e8       	ldi	r23, 0x80	; 128
 346:	82 ea       	ldi	r24, 0xA2	; 162
 348:	94 e4       	ldi	r25, 0x44	; 68
 34a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 34e:	99 e9       	ldi	r25, 0x99	; 153
 350:	29 e5       	ldi	r18, 0x59	; 89
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	91 50       	subi	r25, 0x01	; 1
 356:	20 40       	sbci	r18, 0x00	; 0
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0xf6>
 35c:	00 00       	nop
	_delay_ms(30);
	//bit 3=0
	Set_AD9833(1300,0);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e8       	ldi	r23, 0x80	; 128
 366:	82 ea       	ldi	r24, 0xA2	; 162
 368:	94 e4       	ldi	r25, 0x44	; 68
 36a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 36e:	99 e9       	ldi	r25, 0x99	; 153
 370:	29 e5       	ldi	r18, 0x59	; 89
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	91 50       	subi	r25, 0x01	; 1
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x116>
 37c:	00 00       	nop
	_delay_ms(30);
	//bit 4=0
	Set_AD9833(1300,0);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e8       	ldi	r23, 0x80	; 128
 386:	82 ea       	ldi	r24, 0xA2	; 162
 388:	94 e4       	ldi	r25, 0x44	; 68
 38a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 38e:	99 e9       	ldi	r25, 0x99	; 153
 390:	29 e5       	ldi	r18, 0x59	; 89
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	91 50       	subi	r25, 0x01	; 1
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x136>
 39c:	00 00       	nop
	_delay_ms(30);
	//bit 5=1
	Set_AD9833(1100,0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e8       	ldi	r23, 0x80	; 128
 3a6:	89 e8       	ldi	r24, 0x89	; 137
 3a8:	94 e4       	ldi	r25, 0x44	; 68
 3aa:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 3ae:	99 e9       	ldi	r25, 0x99	; 153
 3b0:	29 e5       	ldi	r18, 0x59	; 89
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	91 50       	subi	r25, 0x01	; 1
 3b6:	20 40       	sbci	r18, 0x00	; 0
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x156>
 3bc:	00 00       	nop
	_delay_ms(30);
	//bit 6=1
	Set_AD9833(1100,0);
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e8       	ldi	r23, 0x80	; 128
 3c6:	89 e8       	ldi	r24, 0x89	; 137
 3c8:	94 e4       	ldi	r25, 0x44	; 68
 3ca:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 3ce:	99 e9       	ldi	r25, 0x99	; 153
 3d0:	29 e5       	ldi	r18, 0x59	; 89
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	20 40       	sbci	r18, 0x00	; 0
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x176>
 3dc:	00 00       	nop
	_delay_ms(30);
	//Parity bit
	Set_AD9833(1100,0);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e8       	ldi	r23, 0x80	; 128
 3e6:	89 e8       	ldi	r24, 0x89	; 137
 3e8:	94 e4       	ldi	r25, 0x44	; 68
 3ea:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 3ee:	99 e9       	ldi	r25, 0x99	; 153
 3f0:	29 e5       	ldi	r18, 0x59	; 89
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x196>
 3fc:	00 00       	nop
	_delay_ms(30);
	//stop bit
	Set_AD9833(1200,0);
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	86 e9       	ldi	r24, 0x96	; 150
 408:	94 e4       	ldi	r25, 0x44	; 68
 40a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 40e:	99 e9       	ldi	r25, 0x99	; 153
 410:	29 e5       	ldi	r18, 0x59	; 89
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	91 50       	subi	r25, 0x01	; 1
 416:	20 40       	sbci	r18, 0x00	; 0
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 00       	nop
 41e:	c0 e8       	ldi	r28, 0x80	; 128
 420:	d0 e0       	ldi	r29, 0x00	; 0
	
	//image data
	for (int i=1;i<=128;i++)
	{
	//Sync Pulse
	Set_AD9833(1200,0);
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	86 e9       	ldi	r24, 0x96	; 150
 42c:	94 e4       	ldi	r25, 0x44	; 68
 42e:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 432:	91 ee       	ldi	r25, 0xE1	; 225
 434:	2a ed       	ldi	r18, 0xDA	; 218
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	20 40       	sbci	r18, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 440:	84 e1       	ldi	r24, 0x14	; 20
 442:	9c e0       	ldi	r25, 0x0C	; 12
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
	_delay_ms(19);
	_delay_us(839);
	//Porch
	Set_AD9833(1500,0);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e8       	ldi	r23, 0x80	; 128
 454:	8b eb       	ldi	r24, 0xBB	; 187
 456:	94 e4       	ldi	r25, 0x44	; 68
 458:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	86 e6       	ldi	r24, 0x66	; 102
 45e:	9e e0       	ldi	r25, 0x0E	; 14
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 464:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	8f e3       	ldi	r24, 0x3F	; 63
 468:	9d e0       	ldi	r25, 0x0D	; 13
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 00       	nop
// 		{
// 			Set_AD9833(1757.2549); _delay_us(10479.409722);
// 			Set_AD9833(1954.90196); _delay_us(10479.409722);
// 		}
		//Y Scan odd line
		Set_AD9833(freqY,0); 
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	66 e2       	ldi	r22, 0x26	; 38
 476:	7f e2       	ldi	r23, 0x2F	; 47
 478:	84 ef       	ldi	r24, 0xF4	; 244
 47a:	94 e4       	ldi	r25, 0x44	; 68
 47c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 480:	90 e5       	ldi	r25, 0x50	; 80
 482:	27 ea       	ldi	r18, 0xA7	; 167
 484:	87 e0       	ldi	r24, 0x07	; 7
 486:	91 50       	subi	r25, 0x01	; 1
 488:	20 40       	sbci	r18, 0x00	; 0
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	00 00       	nop
		_delay_us(170079.41);

		//R-Y Scan average
		Set_AD9833(freqRY,0); 
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	66 e6       	ldi	r22, 0x66	; 102
 496:	7b ee       	ldi	r23, 0xEB	; 235
 498:	88 ec       	ldi	r24, 0xC8	; 200
 49a:	94 e4       	ldi	r25, 0x44	; 68
 49c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 4a0:	90 e5       	ldi	r25, 0x50	; 80
 4a2:	27 ea       	ldi	r18, 0xA7	; 167
 4a4:	87 e0       	ldi	r24, 0x07	; 7
 4a6:	91 50       	subi	r25, 0x01	; 1
 4a8:	20 40       	sbci	r18, 0x00	; 0
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ae:	00 00       	nop
		_delay_us(170079.41);

		//B-Y Scan average
		Set_AD9833(freqBY,0); 
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	66 e4       	ldi	r22, 0x46	; 70
 4b6:	79 e9       	ldi	r23, 0x99	; 153
 4b8:	80 ed       	ldi	r24, 0xD0	; 208
 4ba:	94 e4       	ldi	r25, 0x44	; 68
 4bc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 4c0:	90 e5       	ldi	r25, 0x50	; 80
 4c2:	27 ea       	ldi	r18, 0xA7	; 167
 4c4:	87 e0       	ldi	r24, 0x07	; 7
 4c6:	91 50       	subi	r25, 0x01	; 1
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ce:	00 00       	nop
		_delay_us(170079.41);

		//Y Scan even line
		Set_AD9833(freqY,0);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	66 e2       	ldi	r22, 0x26	; 38
 4d6:	7f e2       	ldi	r23, 0x2F	; 47
 4d8:	84 ef       	ldi	r24, 0xF4	; 244
 4da:	94 e4       	ldi	r25, 0x44	; 68
 4dc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 4e0:	90 e5       	ldi	r25, 0x50	; 80
 4e2:	27 ea       	ldi	r18, 0xA7	; 167
 4e4:	87 e0       	ldi	r24, 0x07	; 7
 4e6:	91 50       	subi	r25, 0x01	; 1
 4e8:	20 40       	sbci	r18, 0x00	; 0
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ee:	00 00       	nop
 4f0:	21 97       	sbiw	r28, 0x01	; 1
	Set_AD9833(1200,0);
	_delay_ms(30);
	}
	
	//image data
	for (int i=1;i<=128;i++)
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	96 cf       	rjmp	.-212    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		//Y Scan even line
		Set_AD9833(freqY,0);
		_delay_us(170079.41);
}
}	
    Set_AD9833(0x00,0);
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	cb 01       	movw	r24, r22
 500:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 504:	ff cf       	rjmp	.-2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>

00000506 <__vector_9>:
	{		
	}
}

ISR(TIMER1_OVF_vect)
{	
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	8f 92       	push	r8
 512:	9f 92       	push	r9
 514:	af 92       	push	r10
 516:	bf 92       	push	r11
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	2f 93       	push	r18
 522:	3f 93       	push	r19
 524:	4f 93       	push	r20
 526:	5f 93       	push	r21
 528:	6f 93       	push	r22
 52a:	7f 93       	push	r23
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	TCNT1=TICKS;
 538:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TICKS>
 53c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TICKS+0x1>
 540:	9d bd       	out	0x2d, r25	; 45
 542:	8c bd       	out	0x2c, r24	; 44
	next_phase = getphase(prev_phase,global_frequency,532);
 544:	80 90 68 00 	lds	r8, 0x0068	; 0x800068 <global_frequency>
 548:	90 90 69 00 	lds	r9, 0x0069	; 0x800069 <global_frequency+0x1>
 54c:	a0 90 6a 00 	lds	r10, 0x006A	; 0x80006a <global_frequency+0x2>
 550:	b0 90 6b 00 	lds	r11, 0x006B	; 0x80006b <global_frequency+0x3>
 554:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <prev_phase>
 558:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <prev_phase+0x1>
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 18 04 	call	0x830	; 0x830 <__floatunsisf>
 564:	e1 2c       	mov	r14, r1
 566:	f1 2c       	mov	r15, r1
 568:	05 e0       	ldi	r16, 0x05	; 5
 56a:	14 e4       	ldi	r17, 0x44	; 68
 56c:	a5 01       	movw	r20, r10
 56e:	94 01       	movw	r18, r8
 570:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8getphasefff>
 574:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 578:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	cont++;
 57c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cont>
 580:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cont+0x1>
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cont+0x1>
 58a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cont>
	//add frequency retrieval function here
	Set_AD9833(global_frequency,prev_phase);
 58e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <prev_phase>
 592:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <prev_phase+0x1>
 596:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <global_frequency>
 59a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <global_frequency+0x1>
 59e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <global_frequency+0x2>
 5a2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <global_frequency+0x3>
 5a6:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	prev_phase=next_phase;
 5aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5ae:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5b2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <prev_phase+0x1>
 5b6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <prev_phase>
}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	9f 90       	pop	r9
 5e0:	8f 90       	pop	r8
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <__vector_12>:
	
 5ec:	18 95       	reti

000005ee <_GLOBAL__sub_I_TEMP>:
#include <util/delay.h>
#include <math.h>
#include <avr/interrupt.h>

int TEMP = ((((F_CPU)/(TIMER1_PRESCALER*1000000))*532)-1);			//Counter Cycles for required time
int TICKS = 65536-TEMP;												//Value for TCNT1 to implement timing by overflow
 5ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <TEMP>
 5f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TEMP+0x1>
 5f6:	91 95       	neg	r25
 5f8:	81 95       	neg	r24
 5fa:	91 09       	sbc	r25, r1
 5fc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <TICKS+0x1>
 600:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <TICKS>
 604:	08 95       	ret

00000606 <__subsf3>:
 606:	50 58       	subi	r21, 0x80	; 128

00000608 <__addsf3>:
 608:	bb 27       	eor	r27, r27
 60a:	aa 27       	eor	r26, r26
 60c:	0e 94 1b 03 	call	0x636	; 0x636 <__addsf3x>
 610:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_round>
 614:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 618:	38 f0       	brcs	.+14     	; 0x628 <__addsf3+0x20>
 61a:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 61e:	20 f0       	brcs	.+8      	; 0x628 <__addsf3+0x20>
 620:	39 f4       	brne	.+14     	; 0x630 <__addsf3+0x28>
 622:	9f 3f       	cpi	r25, 0xFF	; 255
 624:	19 f4       	brne	.+6      	; 0x62c <__addsf3+0x24>
 626:	26 f4       	brtc	.+8      	; 0x630 <__addsf3+0x28>
 628:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>
 62c:	0e f4       	brtc	.+2      	; 0x630 <__addsf3+0x28>
 62e:	e0 95       	com	r30
 630:	e7 fb       	bst	r30, 7
 632:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>

00000636 <__addsf3x>:
 636:	e9 2f       	mov	r30, r25
 638:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 63c:	58 f3       	brcs	.-42     	; 0x614 <__addsf3+0xc>
 63e:	ba 17       	cp	r27, r26
 640:	62 07       	cpc	r22, r18
 642:	73 07       	cpc	r23, r19
 644:	84 07       	cpc	r24, r20
 646:	95 07       	cpc	r25, r21
 648:	20 f0       	brcs	.+8      	; 0x652 <__addsf3x+0x1c>
 64a:	79 f4       	brne	.+30     	; 0x66a <__addsf3x+0x34>
 64c:	a6 f5       	brtc	.+104    	; 0x6b6 <__addsf3x+0x80>
 64e:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_zero>
 652:	0e f4       	brtc	.+2      	; 0x656 <__addsf3x+0x20>
 654:	e0 95       	com	r30
 656:	0b 2e       	mov	r0, r27
 658:	ba 2f       	mov	r27, r26
 65a:	a0 2d       	mov	r26, r0
 65c:	0b 01       	movw	r0, r22
 65e:	b9 01       	movw	r22, r18
 660:	90 01       	movw	r18, r0
 662:	0c 01       	movw	r0, r24
 664:	ca 01       	movw	r24, r20
 666:	a0 01       	movw	r20, r0
 668:	11 24       	eor	r1, r1
 66a:	ff 27       	eor	r31, r31
 66c:	59 1b       	sub	r21, r25
 66e:	99 f0       	breq	.+38     	; 0x696 <__addsf3x+0x60>
 670:	59 3f       	cpi	r21, 0xF9	; 249
 672:	50 f4       	brcc	.+20     	; 0x688 <__addsf3x+0x52>
 674:	50 3e       	cpi	r21, 0xE0	; 224
 676:	68 f1       	brcs	.+90     	; 0x6d2 <__addsf3x+0x9c>
 678:	1a 16       	cp	r1, r26
 67a:	f0 40       	sbci	r31, 0x00	; 0
 67c:	a2 2f       	mov	r26, r18
 67e:	23 2f       	mov	r18, r19
 680:	34 2f       	mov	r19, r20
 682:	44 27       	eor	r20, r20
 684:	58 5f       	subi	r21, 0xF8	; 248
 686:	f3 cf       	rjmp	.-26     	; 0x66e <__addsf3x+0x38>
 688:	46 95       	lsr	r20
 68a:	37 95       	ror	r19
 68c:	27 95       	ror	r18
 68e:	a7 95       	ror	r26
 690:	f0 40       	sbci	r31, 0x00	; 0
 692:	53 95       	inc	r21
 694:	c9 f7       	brne	.-14     	; 0x688 <__addsf3x+0x52>
 696:	7e f4       	brtc	.+30     	; 0x6b6 <__addsf3x+0x80>
 698:	1f 16       	cp	r1, r31
 69a:	ba 0b       	sbc	r27, r26
 69c:	62 0b       	sbc	r22, r18
 69e:	73 0b       	sbc	r23, r19
 6a0:	84 0b       	sbc	r24, r20
 6a2:	ba f0       	brmi	.+46     	; 0x6d2 <__addsf3x+0x9c>
 6a4:	91 50       	subi	r25, 0x01	; 1
 6a6:	a1 f0       	breq	.+40     	; 0x6d0 <__addsf3x+0x9a>
 6a8:	ff 0f       	add	r31, r31
 6aa:	bb 1f       	adc	r27, r27
 6ac:	66 1f       	adc	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	c2 f7       	brpl	.-16     	; 0x6a4 <__addsf3x+0x6e>
 6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <__addsf3x+0x9c>
 6b6:	ba 0f       	add	r27, r26
 6b8:	62 1f       	adc	r22, r18
 6ba:	73 1f       	adc	r23, r19
 6bc:	84 1f       	adc	r24, r20
 6be:	48 f4       	brcc	.+18     	; 0x6d2 <__addsf3x+0x9c>
 6c0:	87 95       	ror	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b7 95       	ror	r27
 6c8:	f7 95       	ror	r31
 6ca:	9e 3f       	cpi	r25, 0xFE	; 254
 6cc:	08 f0       	brcs	.+2      	; 0x6d0 <__addsf3x+0x9a>
 6ce:	b0 cf       	rjmp	.-160    	; 0x630 <__addsf3+0x28>
 6d0:	93 95       	inc	r25
 6d2:	88 0f       	add	r24, r24
 6d4:	08 f0       	brcs	.+2      	; 0x6d8 <__addsf3x+0xa2>
 6d6:	99 27       	eor	r25, r25
 6d8:	ee 0f       	add	r30, r30
 6da:	97 95       	ror	r25
 6dc:	87 95       	ror	r24
 6de:	08 95       	ret

000006e0 <__divsf3>:
 6e0:	0e 94 84 03 	call	0x708	; 0x708 <__divsf3x>
 6e4:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_round>
 6e8:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 6ec:	58 f0       	brcs	.+22     	; 0x704 <__divsf3+0x24>
 6ee:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 6f2:	40 f0       	brcs	.+16     	; 0x704 <__divsf3+0x24>
 6f4:	29 f4       	brne	.+10     	; 0x700 <__divsf3+0x20>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	29 f0       	breq	.+10     	; 0x704 <__divsf3+0x24>
 6fa:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 6fe:	51 11       	cpse	r21, r1
 700:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 704:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>

00000708 <__divsf3x>:
 708:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 70c:	68 f3       	brcs	.-38     	; 0x6e8 <__divsf3+0x8>

0000070e <__divsf3_pse>:
 70e:	99 23       	and	r25, r25
 710:	b1 f3       	breq	.-20     	; 0x6fe <__divsf3+0x1e>
 712:	55 23       	and	r21, r21
 714:	91 f3       	breq	.-28     	; 0x6fa <__divsf3+0x1a>
 716:	95 1b       	sub	r25, r21
 718:	55 0b       	sbc	r21, r21
 71a:	bb 27       	eor	r27, r27
 71c:	aa 27       	eor	r26, r26
 71e:	62 17       	cp	r22, r18
 720:	73 07       	cpc	r23, r19
 722:	84 07       	cpc	r24, r20
 724:	38 f0       	brcs	.+14     	; 0x734 <__divsf3_pse+0x26>
 726:	9f 5f       	subi	r25, 0xFF	; 255
 728:	5f 4f       	sbci	r21, 0xFF	; 255
 72a:	22 0f       	add	r18, r18
 72c:	33 1f       	adc	r19, r19
 72e:	44 1f       	adc	r20, r20
 730:	aa 1f       	adc	r26, r26
 732:	a9 f3       	breq	.-22     	; 0x71e <__divsf3_pse+0x10>
 734:	35 d0       	rcall	.+106    	; 0x7a0 <__divsf3_pse+0x92>
 736:	0e 2e       	mov	r0, r30
 738:	3a f0       	brmi	.+14     	; 0x748 <__divsf3_pse+0x3a>
 73a:	e0 e8       	ldi	r30, 0x80	; 128
 73c:	32 d0       	rcall	.+100    	; 0x7a2 <__divsf3_pse+0x94>
 73e:	91 50       	subi	r25, 0x01	; 1
 740:	50 40       	sbci	r21, 0x00	; 0
 742:	e6 95       	lsr	r30
 744:	00 1c       	adc	r0, r0
 746:	ca f7       	brpl	.-14     	; 0x73a <__divsf3_pse+0x2c>
 748:	2b d0       	rcall	.+86     	; 0x7a0 <__divsf3_pse+0x92>
 74a:	fe 2f       	mov	r31, r30
 74c:	29 d0       	rcall	.+82     	; 0x7a0 <__divsf3_pse+0x92>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	bb 1f       	adc	r27, r27
 756:	26 17       	cp	r18, r22
 758:	37 07       	cpc	r19, r23
 75a:	48 07       	cpc	r20, r24
 75c:	ab 07       	cpc	r26, r27
 75e:	b0 e8       	ldi	r27, 0x80	; 128
 760:	09 f0       	breq	.+2      	; 0x764 <__divsf3_pse+0x56>
 762:	bb 0b       	sbc	r27, r27
 764:	80 2d       	mov	r24, r0
 766:	bf 01       	movw	r22, r30
 768:	ff 27       	eor	r31, r31
 76a:	93 58       	subi	r25, 0x83	; 131
 76c:	5f 4f       	sbci	r21, 0xFF	; 255
 76e:	3a f0       	brmi	.+14     	; 0x77e <__divsf3_pse+0x70>
 770:	9e 3f       	cpi	r25, 0xFE	; 254
 772:	51 05       	cpc	r21, r1
 774:	78 f0       	brcs	.+30     	; 0x794 <__divsf3_pse+0x86>
 776:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 77a:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 77e:	5f 3f       	cpi	r21, 0xFF	; 255
 780:	e4 f3       	brlt	.-8      	; 0x77a <__divsf3_pse+0x6c>
 782:	98 3e       	cpi	r25, 0xE8	; 232
 784:	d4 f3       	brlt	.-12     	; 0x77a <__divsf3_pse+0x6c>
 786:	86 95       	lsr	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	c9 f7       	brne	.-14     	; 0x786 <__divsf3_pse+0x78>
 794:	88 0f       	add	r24, r24
 796:	91 1d       	adc	r25, r1
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret
 7a0:	e1 e0       	ldi	r30, 0x01	; 1
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	bb 1f       	adc	r27, r27
 7aa:	62 17       	cp	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	ba 07       	cpc	r27, r26
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__divsf3_pse+0xae>
 7b4:	62 1b       	sub	r22, r18
 7b6:	73 0b       	sbc	r23, r19
 7b8:	84 0b       	sbc	r24, r20
 7ba:	ba 0b       	sbc	r27, r26
 7bc:	ee 1f       	adc	r30, r30
 7be:	88 f7       	brcc	.-30     	; 0x7a2 <__divsf3_pse+0x94>
 7c0:	e0 95       	com	r30
 7c2:	08 95       	ret

000007c4 <__fixsfsi>:
 7c4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fixunssfsi>
 7c8:	68 94       	set
 7ca:	b1 11       	cpse	r27, r1
 7cc:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 7d0:	08 95       	ret

000007d2 <__fixunssfsi>:
 7d2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_splitA>
 7d6:	88 f0       	brcs	.+34     	; 0x7fa <__fixunssfsi+0x28>
 7d8:	9f 57       	subi	r25, 0x7F	; 127
 7da:	98 f0       	brcs	.+38     	; 0x802 <__fixunssfsi+0x30>
 7dc:	b9 2f       	mov	r27, r25
 7de:	99 27       	eor	r25, r25
 7e0:	b7 51       	subi	r27, 0x17	; 23
 7e2:	b0 f0       	brcs	.+44     	; 0x810 <__fixunssfsi+0x3e>
 7e4:	e1 f0       	breq	.+56     	; 0x81e <__fixunssfsi+0x4c>
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	1a f0       	brmi	.+6      	; 0x7f6 <__fixunssfsi+0x24>
 7f0:	ba 95       	dec	r27
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__fixunssfsi+0x14>
 7f4:	14 c0       	rjmp	.+40     	; 0x81e <__fixunssfsi+0x4c>
 7f6:	b1 30       	cpi	r27, 0x01	; 1
 7f8:	91 f0       	breq	.+36     	; 0x81e <__fixunssfsi+0x4c>
 7fa:	0e 94 01 05 	call	0xa02	; 0xa02 <__fp_zero>
 7fe:	b1 e0       	ldi	r27, 0x01	; 1
 800:	08 95       	ret
 802:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_zero>
 806:	67 2f       	mov	r22, r23
 808:	78 2f       	mov	r23, r24
 80a:	88 27       	eor	r24, r24
 80c:	b8 5f       	subi	r27, 0xF8	; 248
 80e:	39 f0       	breq	.+14     	; 0x81e <__fixunssfsi+0x4c>
 810:	b9 3f       	cpi	r27, 0xF9	; 249
 812:	cc f3       	brlt	.-14     	; 0x806 <__fixunssfsi+0x34>
 814:	86 95       	lsr	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b3 95       	inc	r27
 81c:	d9 f7       	brne	.-10     	; 0x814 <__fixunssfsi+0x42>
 81e:	3e f4       	brtc	.+14     	; 0x82e <__fixunssfsi+0x5c>
 820:	90 95       	com	r25
 822:	80 95       	com	r24
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__floatunsisf>:
 830:	e8 94       	clt
 832:	09 c0       	rjmp	.+18     	; 0x846 <__floatsisf+0x12>

00000834 <__floatsisf>:
 834:	97 fb       	bst	r25, 7
 836:	3e f4       	brtc	.+14     	; 0x846 <__floatsisf+0x12>
 838:	90 95       	com	r25
 83a:	80 95       	com	r24
 83c:	70 95       	com	r23
 83e:	61 95       	neg	r22
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	99 23       	and	r25, r25
 848:	a9 f0       	breq	.+42     	; 0x874 <__stack+0x15>
 84a:	f9 2f       	mov	r31, r25
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	bb 27       	eor	r27, r27
 850:	93 95       	inc	r25
 852:	f6 95       	lsr	r31
 854:	87 95       	ror	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f1 11       	cpse	r31, r1
 85e:	f8 cf       	rjmp	.-16     	; 0x850 <__floatsisf+0x1c>
 860:	fa f4       	brpl	.+62     	; 0x8a0 <__stack+0x41>
 862:	bb 0f       	add	r27, r27
 864:	11 f4       	brne	.+4      	; 0x86a <__stack+0xb>
 866:	60 ff       	sbrs	r22, 0
 868:	1b c0       	rjmp	.+54     	; 0x8a0 <__stack+0x41>
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	16 c0       	rjmp	.+44     	; 0x8a0 <__stack+0x41>
 874:	88 23       	and	r24, r24
 876:	11 f0       	breq	.+4      	; 0x87c <__stack+0x1d>
 878:	96 e9       	ldi	r25, 0x96	; 150
 87a:	11 c0       	rjmp	.+34     	; 0x89e <__stack+0x3f>
 87c:	77 23       	and	r23, r23
 87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
 880:	9e e8       	ldi	r25, 0x8E	; 142
 882:	87 2f       	mov	r24, r23
 884:	76 2f       	mov	r23, r22
 886:	05 c0       	rjmp	.+10     	; 0x892 <__stack+0x33>
 888:	66 23       	and	r22, r22
 88a:	71 f0       	breq	.+28     	; 0x8a8 <__stack+0x49>
 88c:	96 e8       	ldi	r25, 0x86	; 134
 88e:	86 2f       	mov	r24, r22
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	2a f0       	brmi	.+10     	; 0x8a0 <__stack+0x41>
 896:	9a 95       	dec	r25
 898:	66 0f       	add	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	da f7       	brpl	.-10     	; 0x896 <__stack+0x37>
 8a0:	88 0f       	add	r24, r24
 8a2:	96 95       	lsr	r25
 8a4:	87 95       	ror	r24
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret
 8aa:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__stack+0x59>
 8b0:	19 f0       	breq	.+6      	; 0x8b8 <__stack+0x59>
 8b2:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 8b6:	50 f4       	brcc	.+20     	; 0x8cc <fmod+0xc>
 8b8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>
 8bc:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>

000008c0 <fmod>:
 8c0:	e9 2f       	mov	r30, r25
 8c2:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 8c6:	88 f3       	brcs	.-30     	; 0x8aa <__stack+0x4b>
 8c8:	55 23       	and	r21, r21
 8ca:	b1 f3       	breq	.-20     	; 0x8b8 <__stack+0x59>
 8cc:	e7 fb       	bst	r30, 7
 8ce:	62 17       	cp	r22, r18
 8d0:	73 07       	cpc	r23, r19
 8d2:	84 07       	cpc	r24, r20
 8d4:	95 07       	cpc	r25, r21
 8d6:	a8 f1       	brcs	.+106    	; 0x942 <fmod+0x82>
 8d8:	89 f3       	breq	.-30     	; 0x8bc <__stack+0x5d>
 8da:	e9 2f       	mov	r30, r25
 8dc:	ff 27       	eor	r31, r31
 8de:	88 23       	and	r24, r24
 8e0:	2a f0       	brmi	.+10     	; 0x8ec <fmod+0x2c>
 8e2:	31 97       	sbiw	r30, 0x01	; 1
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	da f7       	brpl	.-10     	; 0x8e2 <fmod+0x22>
 8ec:	95 2f       	mov	r25, r21
 8ee:	55 27       	eor	r21, r21
 8f0:	44 23       	and	r20, r20
 8f2:	32 f0       	brmi	.+12     	; 0x900 <fmod+0x40>
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	44 1f       	adc	r20, r20
 8fe:	d2 f7       	brpl	.-12     	; 0x8f4 <fmod+0x34>
 900:	bb 27       	eor	r27, r27
 902:	e9 1b       	sub	r30, r25
 904:	f5 0b       	sbc	r31, r21
 906:	62 1b       	sub	r22, r18
 908:	73 0b       	sbc	r23, r19
 90a:	84 0b       	sbc	r24, r20
 90c:	b1 09       	sbc	r27, r1
 90e:	b1 f2       	breq	.-84     	; 0x8bc <__stack+0x5d>
 910:	22 f4       	brpl	.+8      	; 0x91a <fmod+0x5a>
 912:	62 0f       	add	r22, r18
 914:	73 1f       	adc	r23, r19
 916:	84 1f       	adc	r24, r20
 918:	b1 1d       	adc	r27, r1
 91a:	31 97       	sbiw	r30, 0x01	; 1
 91c:	2a f0       	brmi	.+10     	; 0x928 <fmod+0x68>
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	bb 1f       	adc	r27, r27
 926:	ef cf       	rjmp	.-34     	; 0x906 <fmod+0x46>
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	62 f0       	brmi	.+24     	; 0x946 <fmod+0x86>
 92e:	41 f0       	breq	.+16     	; 0x940 <fmod+0x80>
 930:	88 23       	and	r24, r24
 932:	32 f0       	brmi	.+12     	; 0x940 <fmod+0x80>
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	50 40       	sbci	r21, 0x00	; 0
 93e:	c1 f7       	brne	.-16     	; 0x930 <fmod+0x70>
 940:	93 95       	inc	r25
 942:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_mpack>
 946:	86 95       	lsr	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	9f 5f       	subi	r25, 0xFF	; 255
 94e:	d9 f7       	brne	.-10     	; 0x946 <fmod+0x86>
 950:	f7 cf       	rjmp	.-18     	; 0x940 <fmod+0x80>

00000952 <__fp_inf>:
 952:	97 f9       	bld	r25, 7
 954:	9f 67       	ori	r25, 0x7F	; 127
 956:	80 e8       	ldi	r24, 0x80	; 128
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	08 95       	ret

0000095e <__fp_mpack>:
 95e:	9f 3f       	cpi	r25, 0xFF	; 255
 960:	31 f0       	breq	.+12     	; 0x96e <__fp_mpack_finite+0xc>

00000962 <__fp_mpack_finite>:
 962:	91 50       	subi	r25, 0x01	; 1
 964:	20 f4       	brcc	.+8      	; 0x96e <__fp_mpack_finite+0xc>
 966:	87 95       	ror	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b7 95       	ror	r27
 96e:	88 0f       	add	r24, r24
 970:	91 1d       	adc	r25, r1
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__fp_nan>:
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	80 ec       	ldi	r24, 0xC0	; 192
 97e:	08 95       	ret

00000980 <__fp_pscA>:
 980:	00 24       	eor	r0, r0
 982:	0a 94       	dec	r0
 984:	16 16       	cp	r1, r22
 986:	17 06       	cpc	r1, r23
 988:	18 06       	cpc	r1, r24
 98a:	09 06       	cpc	r0, r25
 98c:	08 95       	ret

0000098e <__fp_pscB>:
 98e:	00 24       	eor	r0, r0
 990:	0a 94       	dec	r0
 992:	12 16       	cp	r1, r18
 994:	13 06       	cpc	r1, r19
 996:	14 06       	cpc	r1, r20
 998:	05 06       	cpc	r0, r21
 99a:	08 95       	ret

0000099c <__fp_round>:
 99c:	09 2e       	mov	r0, r25
 99e:	03 94       	inc	r0
 9a0:	00 0c       	add	r0, r0
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__fp_round+0xc>
 9a4:	88 23       	and	r24, r24
 9a6:	52 f0       	brmi	.+20     	; 0x9bc <__fp_round+0x20>
 9a8:	bb 0f       	add	r27, r27
 9aa:	40 f4       	brcc	.+16     	; 0x9bc <__fp_round+0x20>
 9ac:	bf 2b       	or	r27, r31
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0x18>
 9b0:	60 ff       	sbrs	r22, 0
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__fp_round+0x20>
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__fp_split3>:
 9be:	57 fd       	sbrc	r21, 7
 9c0:	90 58       	subi	r25, 0x80	; 128
 9c2:	44 0f       	add	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	59 f0       	breq	.+22     	; 0x9de <__fp_splitA+0x10>
 9c8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ca:	71 f0       	breq	.+28     	; 0x9e8 <__fp_splitA+0x1a>
 9cc:	47 95       	ror	r20

000009ce <__fp_splitA>:
 9ce:	88 0f       	add	r24, r24
 9d0:	97 fb       	bst	r25, 7
 9d2:	99 1f       	adc	r25, r25
 9d4:	61 f0       	breq	.+24     	; 0x9ee <__fp_splitA+0x20>
 9d6:	9f 3f       	cpi	r25, 0xFF	; 255
 9d8:	79 f0       	breq	.+30     	; 0x9f8 <__fp_splitA+0x2a>
 9da:	87 95       	ror	r24
 9dc:	08 95       	ret
 9de:	12 16       	cp	r1, r18
 9e0:	13 06       	cpc	r1, r19
 9e2:	14 06       	cpc	r1, r20
 9e4:	55 1f       	adc	r21, r21
 9e6:	f2 cf       	rjmp	.-28     	; 0x9cc <__fp_split3+0xe>
 9e8:	46 95       	lsr	r20
 9ea:	f1 df       	rcall	.-30     	; 0x9ce <__fp_splitA>
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__fp_splitA+0x30>
 9ee:	16 16       	cp	r1, r22
 9f0:	17 06       	cpc	r1, r23
 9f2:	18 06       	cpc	r1, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	f1 cf       	rjmp	.-30     	; 0x9da <__fp_splitA+0xc>
 9f8:	86 95       	lsr	r24
 9fa:	71 05       	cpc	r23, r1
 9fc:	61 05       	cpc	r22, r1
 9fe:	08 94       	sec
 a00:	08 95       	ret

00000a02 <__fp_zero>:
 a02:	e8 94       	clt

00000a04 <__fp_szero>:
 a04:	bb 27       	eor	r27, r27
 a06:	66 27       	eor	r22, r22
 a08:	77 27       	eor	r23, r23
 a0a:	cb 01       	movw	r24, r22
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__mulsf3>:
 a10:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3x>
 a14:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_round>
 a18:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 a1c:	38 f0       	brcs	.+14     	; 0xa2c <__mulsf3+0x1c>
 a1e:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__mulsf3+0x1c>
 a24:	95 23       	and	r25, r21
 a26:	11 f0       	breq	.+4      	; 0xa2c <__mulsf3+0x1c>
 a28:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 a2c:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>
 a30:	11 24       	eor	r1, r1
 a32:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>

00000a36 <__mulsf3x>:
 a36:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 a3a:	70 f3       	brcs	.-36     	; 0xa18 <__mulsf3+0x8>

00000a3c <__mulsf3_pse>:
 a3c:	95 9f       	mul	r25, r21
 a3e:	c1 f3       	breq	.-16     	; 0xa30 <__mulsf3+0x20>
 a40:	95 0f       	add	r25, r21
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	55 1f       	adc	r21, r21
 a46:	62 9f       	mul	r22, r18
 a48:	f0 01       	movw	r30, r0
 a4a:	72 9f       	mul	r23, r18
 a4c:	bb 27       	eor	r27, r27
 a4e:	f0 0d       	add	r31, r0
 a50:	b1 1d       	adc	r27, r1
 a52:	63 9f       	mul	r22, r19
 a54:	aa 27       	eor	r26, r26
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	aa 1f       	adc	r26, r26
 a5c:	64 9f       	mul	r22, r20
 a5e:	66 27       	eor	r22, r22
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	66 1f       	adc	r22, r22
 a66:	82 9f       	mul	r24, r18
 a68:	22 27       	eor	r18, r18
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	62 1f       	adc	r22, r18
 a70:	73 9f       	mul	r23, r19
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	83 9f       	mul	r24, r19
 a7a:	a0 0d       	add	r26, r0
 a7c:	61 1d       	adc	r22, r1
 a7e:	22 1f       	adc	r18, r18
 a80:	74 9f       	mul	r23, r20
 a82:	33 27       	eor	r19, r19
 a84:	a0 0d       	add	r26, r0
 a86:	61 1d       	adc	r22, r1
 a88:	23 1f       	adc	r18, r19
 a8a:	84 9f       	mul	r24, r20
 a8c:	60 0d       	add	r22, r0
 a8e:	21 1d       	adc	r18, r1
 a90:	82 2f       	mov	r24, r18
 a92:	76 2f       	mov	r23, r22
 a94:	6a 2f       	mov	r22, r26
 a96:	11 24       	eor	r1, r1
 a98:	9f 57       	subi	r25, 0x7F	; 127
 a9a:	50 40       	sbci	r21, 0x00	; 0
 a9c:	9a f0       	brmi	.+38     	; 0xac4 <__mulsf3_pse+0x88>
 a9e:	f1 f0       	breq	.+60     	; 0xadc <__mulsf3_pse+0xa0>
 aa0:	88 23       	and	r24, r24
 aa2:	4a f0       	brmi	.+18     	; 0xab6 <__mulsf3_pse+0x7a>
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	bb 1f       	adc	r27, r27
 aaa:	66 1f       	adc	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	91 50       	subi	r25, 0x01	; 1
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	a9 f7       	brne	.-22     	; 0xaa0 <__mulsf3_pse+0x64>
 ab6:	9e 3f       	cpi	r25, 0xFE	; 254
 ab8:	51 05       	cpc	r21, r1
 aba:	80 f0       	brcs	.+32     	; 0xadc <__mulsf3_pse+0xa0>
 abc:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 ac0:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 ac4:	5f 3f       	cpi	r21, 0xFF	; 255
 ac6:	e4 f3       	brlt	.-8      	; 0xac0 <__mulsf3_pse+0x84>
 ac8:	98 3e       	cpi	r25, 0xE8	; 232
 aca:	d4 f3       	brlt	.-12     	; 0xac0 <__mulsf3_pse+0x84>
 acc:	86 95       	lsr	r24
 ace:	77 95       	ror	r23
 ad0:	67 95       	ror	r22
 ad2:	b7 95       	ror	r27
 ad4:	f7 95       	ror	r31
 ad6:	e7 95       	ror	r30
 ad8:	9f 5f       	subi	r25, 0xFF	; 255
 ada:	c1 f7       	brne	.-16     	; 0xacc <__mulsf3_pse+0x90>
 adc:	fe 2b       	or	r31, r30
 ade:	88 0f       	add	r24, r24
 ae0:	91 1d       	adc	r25, r1
 ae2:	96 95       	lsr	r25
 ae4:	87 95       	ror	r24
 ae6:	97 f9       	bld	r25, 7
 ae8:	08 95       	ret

00000aea <__tablejump2__>:
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	05 90       	lpm	r0, Z+
 af0:	f4 91       	lpm	r31, Z
 af2:	e0 2d       	mov	r30, r0
 af4:	09 94       	ijmp

00000af6 <_exit>:
 af6:	f8 94       	cli

00000af8 <__stop_program>:
 af8:	ff cf       	rjmp	.-2      	; 0xaf8 <__stop_program>
