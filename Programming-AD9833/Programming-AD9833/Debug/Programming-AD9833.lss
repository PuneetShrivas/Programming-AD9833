
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000136a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000136a  000013fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800066  00800066  00001404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156c  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000603  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f08  00000000  00000000  00003f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004e8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_7>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_12>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	45 04       	cpc	r4, r5

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ea e6       	ldi	r30, 0x6A	; 106
      6a:	f3 e1       	ldi	r31, 0x13	; 19
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 36       	cpi	r26, 0x66	; 102
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	20 e0       	ldi	r18, 0x00	; 0
      7a:	a6 e6       	ldi	r26, 0x66	; 102
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a2 3b       	cpi	r26, 0xB2	; 178
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 ad 09 	call	0x135a	; 0x135a <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
      a2:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z8SPI_initv>:
{
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	UART_send(MSdata);
	UART_send(LSdata);
}
      aa:	81 ea       	ldi	r24, 0xA1	; 161
      ac:	87 bb       	out	0x17, r24	; 23
      ae:	81 e1       	ldi	r24, 0x11	; 17
      b0:	88 bb       	out	0x18, r24	; 24
      b2:	89 ed       	ldi	r24, 0xD9	; 217
      b4:	8d b9       	out	0x0d, r24	; 13
      b6:	08 95       	ret

000000b8 <_Z9UART_initv>:
      b8:	10 bc       	out	0x20, r1	; 32
      ba:	8f e5       	ldi	r24, 0x5F	; 95
      bc:	89 b9       	out	0x09, r24	; 9
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	8a b9       	out	0x0a, r24	; 10
      c2:	8e e8       	ldi	r24, 0x8E	; 142
      c4:	80 bd       	out	0x20, r24	; 32
      c6:	08 95       	ret

000000c8 <_Z12SPI_transferh>:
      c8:	8f b9       	out	0x0f, r24	; 15
      ca:	77 9b       	sbis	0x0e, 7	; 14
      cc:	fe cf       	rjmp	.-4      	; 0xca <_Z12SPI_transferh+0x2>
      ce:	08 95       	ret

000000d0 <_Z11SPI_write16t>:

void SPI_write16 (unsigned short data)    			//send a 16bit word and use f sync
{  
      d0:	cf 93       	push	r28
      d2:	c8 2f       	mov	r28, r24
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PINB0);						    //F sync Low --> begin frame
      d4:	c0 98       	cbi	0x18, 0	; 24
	SPI_transfer(MSdata);							
      d6:	89 2f       	mov	r24, r25
      d8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	SPI_transfer(LSdata);
      dc:	8c 2f       	mov	r24, r28
      de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	PORTB |= (1<<PINB0);						    //F sync High --> End of frame
      e2:	c0 9a       	sbi	0x18, 0	; 24
}
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <_Z10Set_AD9833fj>:

void Set_AD9833(float frequency, unsigned int phase)
{
      e8:	cf 92       	push	r12
      ea:	df 92       	push	r13
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	8a 01       	movw	r16, r20
	long FreqReg = (frequency*pow(2,28))/(float)Fmclk;	  //Calculate frequency to be sent to AD9833
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5d e4       	ldi	r21, 0x4D	; 77
     102:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     106:	20 e2       	ldi	r18, 0x20	; 32
     108:	3c eb       	ldi	r19, 0xBC	; 188
     10a:	4e eb       	ldi	r20, 0xBE	; 190
     10c:	5b e4       	ldi	r21, 0x4B	; 75
     10e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     112:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);		   //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
     116:	6b 01       	movw	r12, r22
     118:	7c 01       	movw	r14, r24
     11a:	cc 24       	eor	r12, r12
     11c:	20 ec       	ldi	r18, 0xC0	; 192
     11e:	d2 22       	and	r13, r18
     120:	2f e0       	ldi	r18, 0x0F	; 15
     122:	f2 22       	and	r15, r18
     124:	0b 2e       	mov	r0, r27
     126:	be e0       	ldi	r27, 0x0E	; 14
     128:	f5 94       	asr	r15
     12a:	e7 94       	ror	r14
     12c:	d7 94       	ror	r13
     12e:	c7 94       	ror	r12
     130:	ba 95       	dec	r27
     132:	d1 f7       	brne	.-12     	; 0x128 <_Z10Set_AD9833fj+0x40>
     134:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
     136:	eb 01       	movw	r28, r22
     138:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     									  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_write16(0x2100);								  //define waveform and set reset bit
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	91 e2       	ldi	r25, 0x21	; 33
     13e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(LSB);									  //Write LSBs
     142:	ce 01       	movw	r24, r28
     144:	90 64       	ori	r25, 0x40	; 64
     146:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(MSB);									  //Write MSBs
     14a:	c6 01       	movw	r24, r12
     14c:	90 64       	ori	r25, 0x40	; 64
     14e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	phase&=0x0FFF;
     152:	c8 01       	movw	r24, r16
     154:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;
	//SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_write16(phase);
     156:	90 6c       	ori	r25, 0xC0	; 192
     158:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(0x2000);                                                                                                                                                                                                                                                                                
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e2       	ldi	r25, 0x20	; 32
     160:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	ff 90       	pop	r15
     16e:	ef 90       	pop	r14
     170:	df 90       	pop	r13
     172:	cf 90       	pop	r12
     174:	08 95       	ret

00000176 <_Z8getphasefff>:

unsigned int getphase(float pphase,float freq, float time)
{
     176:	4f 92       	push	r4
     178:	5f 92       	push	r5
     17a:	6f 92       	push	r6
     17c:	7f 92       	push	r7
     17e:	8f 92       	push	r8
     180:	9f 92       	push	r9
     182:	af 92       	push	r10
     184:	bf 92       	push	r11
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	00 d0       	rcall	.+0      	; 0x198 <_Z8getphasefff+0x22>
     198:	00 d0       	rcall	.+0      	; 0x19a <_Z8getphasefff+0x24>
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	2b 01       	movw	r4, r22
     1a0:	3c 01       	movw	r6, r24
     1a2:	49 01       	movw	r8, r18
     1a4:	5a 01       	movw	r10, r20
     1a6:	67 01       	movw	r12, r14
     1a8:	78 01       	movw	r14, r16
	time/=1000000;
	pphase/=2048/PI;
	float ph=((fmod(time,(1/freq))*2*PI*freq)+pphase)*2048/PI;
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	80 e8       	ldi	r24, 0x80	; 128
     1b0:	9f e3       	ldi	r25, 0x3F	; 63
     1b2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     1b6:	69 83       	std	Y+1, r22	; 0x01
     1b8:	7a 83       	std	Y+2, r23	; 0x02
     1ba:	8b 83       	std	Y+3, r24	; 0x03
     1bc:	9c 83       	std	Y+4, r25	; 0x04
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	34 e2       	ldi	r19, 0x24	; 36
     1c2:	44 e7       	ldi	r20, 0x74	; 116
     1c4:	59 e4       	ldi	r21, 0x49	; 73
     1c6:	c7 01       	movw	r24, r14
     1c8:	b6 01       	movw	r22, r12
     1ca:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     1ce:	29 81       	ldd	r18, Y+1	; 0x01
     1d0:	3a 81       	ldd	r19, Y+2	; 0x02
     1d2:	4b 81       	ldd	r20, Y+3	; 0x03
     1d4:	5c 81       	ldd	r21, Y+4	; 0x04
     1d6:	0e 94 4c 08 	call	0x1098	; 0x1098 <fmod>
	return (unsigned int) ph;
     1da:	9b 01       	movw	r18, r22
     1dc:	ac 01       	movw	r20, r24
     1de:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     1e2:	20 ed       	ldi	r18, 0xD0	; 208
     1e4:	3f e0       	ldi	r19, 0x0F	; 15
     1e6:	49 e4       	ldi	r20, 0x49	; 73
     1e8:	50 e4       	ldi	r21, 0x40	; 64
     1ea:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     1ee:	a5 01       	movw	r20, r10
     1f0:	94 01       	movw	r18, r8
     1f2:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
     1fa:	2c e8       	ldi	r18, 0x8C	; 140
     1fc:	39 ef       	ldi	r19, 0xF9	; 249
     1fe:	42 e2       	ldi	r20, 0x22	; 34
     200:	54 e4       	ldi	r21, 0x44	; 68
     202:	c3 01       	movw	r24, r6
     204:	b2 01       	movw	r22, r4
     206:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     20a:	9b 01       	movw	r18, r22
     20c:	ac 01       	movw	r20, r24
     20e:	c7 01       	movw	r24, r14
     210:	b6 01       	movw	r22, r12
     212:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	55 e4       	ldi	r21, 0x45	; 69
     21e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     222:	20 ed       	ldi	r18, 0xD0	; 208
     224:	3f e0       	ldi	r19, 0x0F	; 15
     226:	49 e4       	ldi	r20, 0x49	; 73
     228:	50 e4       	ldi	r21, 0x40	; 64
     22a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     22e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fixunssfsi>
}
     232:	cb 01       	movw	r24, r22
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	bf 90       	pop	r11
     24e:	af 90       	pop	r10
     250:	9f 90       	pop	r9
     252:	8f 90       	pop	r8
     254:	7f 90       	pop	r7
     256:	6f 90       	pop	r6
     258:	5f 90       	pop	r5
     25a:	4f 90       	pop	r4
     25c:	08 95       	ret

0000025e <main>:
volatile float freqRY2 =  1500 + (RY2 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
volatile float freqBY2 =  1500 + (BY2 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)

int main(void)
{
	UART_init();
     25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9UART_initv>
	SPI_init();
     262:	0e 94 55 00 	call	0xaa	; 0xaa <_Z8SPI_initv>
	DDRA=(1<<PINA0)|(1<<PINA1)|(1<<PINA2);			//output pins for LEDs
     266:	87 e0       	ldi	r24, 0x07	; 7
     268:	8a bb       	out	0x1a, r24	; 26
	TCCR1A=0;
     26a:	1f bc       	out	0x2f, r1	; 47
	PORTA=0;
     26c:	1b ba       	out	0x1b, r1	; 27
	// // 	UART_send(contnext);
	// 	}
	//////////////////////////////////////////////////////////////////////////
	

	SPI_write16(0x100);								//Reset AD9833 
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     276:	2f ef       	ldi	r18, 0xFF	; 255
     278:	8f e7       	ldi	r24, 0x7F	; 127
     27a:	96 e1       	ldi	r25, 0x16	; 22
     27c:	21 50       	subi	r18, 0x01	; 1
     27e:	80 40       	sbci	r24, 0x00	; 0
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	e1 f7       	brne	.-8      	; 0x27c <main+0x1e>
     284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x28>
     286:	00 00       	nop

	//VIS Code
	{//leader tone
	_delay_ms(500);
	Set_AD9833(1900,0);
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e8       	ldi	r23, 0x80	; 128
     290:	8d ee       	ldi	r24, 0xED	; 237
     292:	94 e4       	ldi	r25, 0x44	; 68
     294:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	8f e7       	ldi	r24, 0x7F	; 127
     29c:	9d e0       	ldi	r25, 0x0D	; 13
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	80 40       	sbci	r24, 0x00	; 0
     2a2:	90 40       	sbci	r25, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x40>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x4a>
     2a8:	00 00       	nop
	_delay_ms(300);
	//break
	Set_AD9833(1200,0);
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	86 e9       	ldi	r24, 0x96	; 150
     2b4:	94 e4       	ldi	r25, 0x44	; 68
     2b6:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	9f e8       	ldi	r25, 0x8F	; 143
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x60>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x66>
     2c4:	00 00       	nop
	_delay_ms(10);
	//leader
	Set_AD9833(1900,0);
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e8       	ldi	r23, 0x80	; 128
     2ce:	8d ee       	ldi	r24, 0xED	; 237
     2d0:	94 e4       	ldi	r25, 0x44	; 68
     2d2:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     2d6:	9f ef       	ldi	r25, 0xFF	; 255
     2d8:	2f e7       	ldi	r18, 0x7F	; 127
     2da:	8d e0       	ldi	r24, 0x0D	; 13
     2dc:	91 50       	subi	r25, 0x01	; 1
     2de:	20 40       	sbci	r18, 0x00	; 0
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x7e>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x88>
     2e6:	00 00       	nop
	_delay_ms(300);
	//VIS start bit
	Set_AD9833(1200,0);
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	86 e9       	ldi	r24, 0x96	; 150
     2f2:	94 e4       	ldi	r25, 0x44	; 68
     2f4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     2f8:	94 e1       	ldi	r25, 0x14	; 20
     2fa:	2e e4       	ldi	r18, 0x4E	; 78
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	91 50       	subi	r25, 0x01	; 1
     300:	20 40       	sbci	r18, 0x00	; 0
     302:	80 40       	sbci	r24, 0x00	; 0
     304:	e1 f7       	brne	.-8      	; 0x2fe <main+0xa0>
     306:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     308:	84 e1       	ldi	r24, 0x14	; 20
     30a:	9c e0       	ldi	r25, 0x0C	; 12
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xae>
     310:	00 c0       	rjmp	.+0      	; 0x312 <main+0xb4>
     312:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//PD90 VIS code = 99d = 0b1100011
	//bit 0=1
	Set_AD9833(1100,0);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e8       	ldi	r23, 0x80	; 128
     31c:	89 e8       	ldi	r24, 0x89	; 137
     31e:	94 e4       	ldi	r25, 0x44	; 68
     320:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     324:	94 e1       	ldi	r25, 0x14	; 20
     326:	2e e4       	ldi	r18, 0x4E	; 78
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	91 50       	subi	r25, 0x01	; 1
     32c:	20 40       	sbci	r18, 0x00	; 0
     32e:	80 40       	sbci	r24, 0x00	; 0
     330:	e1 f7       	brne	.-8      	; 0x32a <main+0xcc>
     332:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	84 e1       	ldi	r24, 0x14	; 20
     336:	9c e0       	ldi	r25, 0x0C	; 12
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <main+0xda>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0xe0>
     33e:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 1=1
	Set_AD9833(1100,0);
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e8       	ldi	r23, 0x80	; 128
     348:	89 e8       	ldi	r24, 0x89	; 137
     34a:	94 e4       	ldi	r25, 0x44	; 68
     34c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     350:	94 e1       	ldi	r25, 0x14	; 20
     352:	2e e4       	ldi	r18, 0x4E	; 78
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	91 50       	subi	r25, 0x01	; 1
     358:	20 40       	sbci	r18, 0x00	; 0
     35a:	80 40       	sbci	r24, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <main+0xf8>
     35e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	84 e1       	ldi	r24, 0x14	; 20
     362:	9c e0       	ldi	r25, 0x0C	; 12
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <main+0x106>
     368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x10c>
     36a:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 2=0
	Set_AD9833(1300,0);
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	70 e8       	ldi	r23, 0x80	; 128
     374:	82 ea       	ldi	r24, 0xA2	; 162
     376:	94 e4       	ldi	r25, 0x44	; 68
     378:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37c:	94 e1       	ldi	r25, 0x14	; 20
     37e:	2e e4       	ldi	r18, 0x4E	; 78
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	91 50       	subi	r25, 0x01	; 1
     384:	20 40       	sbci	r18, 0x00	; 0
     386:	80 40       	sbci	r24, 0x00	; 0
     388:	e1 f7       	brne	.-8      	; 0x382 <main+0x124>
     38a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38c:	84 e1       	ldi	r24, 0x14	; 20
     38e:	9c e0       	ldi	r25, 0x0C	; 12
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <main+0x132>
     394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x138>
     396:	00 00       	nop
	_delay_ms(29);  _delay_us(839);
	//bit 3=0
	Set_AD9833(1300,0);
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e8       	ldi	r23, 0x80	; 128
     3a0:	82 ea       	ldi	r24, 0xA2	; 162
     3a2:	94 e4       	ldi	r25, 0x44	; 68
     3a4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a8:	94 e1       	ldi	r25, 0x14	; 20
     3aa:	2e e4       	ldi	r18, 0x4E	; 78
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	91 50       	subi	r25, 0x01	; 1
     3b0:	20 40       	sbci	r18, 0x00	; 0
     3b2:	80 40       	sbci	r24, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x150>
     3b6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	84 e1       	ldi	r24, 0x14	; 20
     3ba:	9c e0       	ldi	r25, 0x0C	; 12
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x15e>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x164>
     3c2:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 4=0
	Set_AD9833(1300,0);
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e8       	ldi	r23, 0x80	; 128
     3cc:	82 ea       	ldi	r24, 0xA2	; 162
     3ce:	94 e4       	ldi	r25, 0x44	; 68
     3d0:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d4:	94 e1       	ldi	r25, 0x14	; 20
     3d6:	2e e4       	ldi	r18, 0x4E	; 78
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	91 50       	subi	r25, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	80 40       	sbci	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x17c>
     3e2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e4:	84 e1       	ldi	r24, 0x14	; 20
     3e6:	9c e0       	ldi	r25, 0x0C	; 12
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x18a>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x190>
     3ee:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 5=1
	Set_AD9833(1100,0);
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e8       	ldi	r23, 0x80	; 128
     3f8:	89 e8       	ldi	r24, 0x89	; 137
     3fa:	94 e4       	ldi	r25, 0x44	; 68
     3fc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	94 e1       	ldi	r25, 0x14	; 20
     402:	2e e4       	ldi	r18, 0x4E	; 78
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	91 50       	subi	r25, 0x01	; 1
     408:	20 40       	sbci	r18, 0x00	; 0
     40a:	80 40       	sbci	r24, 0x00	; 0
     40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     410:	84 e1       	ldi	r24, 0x14	; 20
     412:	9c e0       	ldi	r25, 0x0C	; 12
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//bit 6=1
	Set_AD9833(1100,0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e8       	ldi	r23, 0x80	; 128
     424:	89 e8       	ldi	r24, 0x89	; 137
     426:	94 e4       	ldi	r25, 0x44	; 68
     428:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42c:	94 e1       	ldi	r25, 0x14	; 20
     42e:	2e e4       	ldi	r18, 0x4E	; 78
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	91 50       	subi	r25, 0x01	; 1
     434:	20 40       	sbci	r18, 0x00	; 0
     436:	80 40       	sbci	r24, 0x00	; 0
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	84 e1       	ldi	r24, 0x14	; 20
     43e:	9c e0       	ldi	r25, 0x0C	; 12
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//Parity bit
	Set_AD9833(1300,0);
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e8       	ldi	r23, 0x80	; 128
     450:	82 ea       	ldi	r24, 0xA2	; 162
     452:	94 e4       	ldi	r25, 0x44	; 68
     454:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	94 e1       	ldi	r25, 0x14	; 20
     45a:	2e e4       	ldi	r18, 0x4E	; 78
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	91 50       	subi	r25, 0x01	; 1
     460:	20 40       	sbci	r18, 0x00	; 0
     462:	80 40       	sbci	r24, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     468:	84 e1       	ldi	r24, 0x14	; 20
     46a:	9c e0       	ldi	r25, 0x0C	; 12
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     472:	00 00       	nop
	_delay_ms(29);	_delay_us(839);
	//stop bit
	Set_AD9833(1200,0);
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	86 e9       	ldi	r24, 0x96	; 150
     47e:	94 e4       	ldi	r25, 0x44	; 68
     480:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     484:	94 e1       	ldi	r25, 0x14	; 20
     486:	2e e4       	ldi	r18, 0x4E	; 78
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	91 50       	subi	r25, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     494:	8e e4       	ldi	r24, 0x4E	; 78
     496:	9d e0       	ldi	r25, 0x0D	; 13
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     49c:	00 e8       	ldi	r16, 0x80	; 128
     49e:	10 e0       	ldi	r17, 0x00	; 0
	//Porch
	Set_AD9833(1500,0);
	_delay_ms(1);	_delay_us(919);		//Time in protocol minus programming time of Set_AD9833()

	//Color transmission	
	cont=1;								// variable for maintaining count of pixels
     4a0:	c1 e0       	ldi	r28, 0x01	; 1
     4a2:	d0 e0       	ldi	r29, 0x00	; 0

	//image data
	for (int i=1;i<=128;i++)
	{
	//Sync Pulse
	Set_AD9833(1200,0);
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	86 e9       	ldi	r24, 0x96	; 150
     4ae:	94 e4       	ldi	r25, 0x44	; 68
     4b0:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b4:	91 ee       	ldi	r25, 0xE1	; 225
     4b6:	2a ed       	ldi	r18, 0xDA	; 218
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	91 50       	subi	r25, 0x01	; 1
     4bc:	20 40       	sbci	r18, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c2:	88 e1       	ldi	r24, 0x18	; 24
     4c4:	9c e0       	ldi	r25, 0x0C	; 12
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	_delay_ms(19);	_delay_us(840);		//Time in protocol minus programming time of Set_AD9833()
	
	//Porch
	Set_AD9833(1500,0);
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e8       	ldi	r23, 0x80	; 128
     4d4:	8b eb       	ldi	r24, 0xBB	; 187
     4d6:	94 e4       	ldi	r25, 0x44	; 68
     4d8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	86 e6       	ldi	r24, 0x66	; 102
     4de:	9e e0       	ldi	r25, 0x0E	; 14
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4e4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	8b e3       	ldi	r24, 0x3B	; 59
     4e8:	9d e0       	ldi	r25, 0x0D	; 13
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f0:	00 00       	nop
	_delay_ms(1);	_delay_us(919);		//Time in protocol minus programming time of Set_AD9833()

	//Color transmission	
	cont=1;								// variable for maintaining count of pixels
     4f2:	d0 93 a7 00 	sts	0x00A7, r29	; 0x8000a7 <cont+0x1>
     4f6:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <cont>
	global_frequency=freqY1;			//initialization for first pixel
     4fa:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     4fe:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     502:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     506:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     50a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     50e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     512:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     516:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
	sei();				
     51a:	78 94       	sei
	TCCR1B=0;		
     51c:	1e bc       	out	0x2e, r1	; 46
	TCCR1B|=(1<<CS10)|(1<<WGM12);
     51e:	8e b5       	in	r24, 0x2e	; 46
     520:	89 60       	ori	r24, 0x09	; 9
     522:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);
     524:	89 b7       	in	r24, 0x39	; 57
     526:	80 61       	ori	r24, 0x10	; 16
     528:	89 bf       	out	0x39, r24	; 57
	OCR1A=TEMP;
     52a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     52e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     532:	9b bd       	out	0x2b, r25	; 43
     534:	8a bd       	out	0x2a, r24	; 42
	TCNT1=TEMP-1; 
     536:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     53a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	9d bd       	out	0x2d, r25	; 45
     542:	8c bd       	out	0x2c, r24	; 44
	while(cont<=1280);					// wait loop for interrupts  to complete
     544:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <cont>
     548:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <cont+0x1>
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	95 40       	sbci	r25, 0x05	; 5
     550:	cc f3       	brlt	.-14     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
	cli();
     552:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
     554:	89 b7       	in	r24, 0x39	; 57
     556:	8f 7e       	andi	r24, 0xEF	; 239
     558:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
     55a:	1e bc       	out	0x2e, r1	; 46
	PORTA=0;
     55c:	1b ba       	out	0x1b, r1	; 27
     55e:	01 50       	subi	r16, 0x01	; 1
     560:	11 09       	sbc	r17, r1
	Set_AD9833(1200,0);
	_delay_ms(29);	_delay_us(924);			
	}

	//image data
	for (int i=1;i<=128;i++)
     562:	09 f0       	breq	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     564:	9f cf       	rjmp	.-194    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

}

	}

Set_AD9833(0x00,0);
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	cb 01       	movw	r24, r22
     570:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     574:	ff cf       	rjmp	.-2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>

00000576 <__vector_7>:
	}

}

ISR(TIMER1_COMPA_vect)
{
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	ef 93       	push	r30
     5a6:	ff 93       	push	r31
//single color	
//pattern of 2 colors
	if(compare==0){Set_AD9833(global_frequency,next_phase);		}
     5a8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <compare>
     5ac:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <compare+0x1>
     5b0:	89 2b       	or	r24, r25
     5b2:	71 f4       	brne	.+28     	; 0x5d0 <__vector_7+0x5a>
     5b4:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <next_phase>
     5b8:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <next_phase+0x1>
     5bc:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <global_frequency>
     5c0:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <global_frequency+0x1>
     5c4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <global_frequency+0x2>
     5c8:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <global_frequency+0x3>
     5cc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	prev_phase=next_phase;
     5d0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <next_phase>
     5d4:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <next_phase+0x1>
     5d8:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <prev_phase+0x1>
     5dc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <prev_phase>
	prev_freq = global_frequency;	
     5e0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <global_frequency>
     5e4:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <global_frequency+0x1>
     5e8:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <global_frequency+0x2>
     5ec:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <global_frequency+0x3>
     5f0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <prev_freq>
     5f4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <prev_freq+0x1>
     5f8:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <prev_freq+0x2>
     5fc:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <prev_freq+0x3>
// 	if(cont==319) global_frequency = freqRY1;
// 	else if(cont==639) global_frequency = freqBY1;
// 	else if(cont==959) global_frequency = freqY1;
	if(((cont-2)%20)==0) 
     600:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <cont>
     604:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <cont+0x1>
     608:	02 97       	sbiw	r24, 0x02	; 2
     60a:	64 e1       	ldi	r22, 0x14	; 20
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 85 09 	call	0x130a	; 0x130a <__divmodhi4>
     612:	89 2b       	or	r24, r25
     614:	09 f0       	breq	.+2      	; 0x618 <__vector_7+0xa2>
     616:	db c0       	rjmp	.+438    	; 0x7ce <__vector_7+0x258>
	{
		t = (cont-2)/20;
     618:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <cont>
     61c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <cont+0x1>
     620:	02 97       	sbiw	r24, 0x02	; 2
     622:	64 e1       	ldi	r22, 0x14	; 20
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	0e 94 85 09 	call	0x130a	; 0x130a <__divmodhi4>
     62a:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <t+0x1>
     62e:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <t>
		if((t%2)==0)
     632:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     636:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     63a:	80 fd       	sbrc	r24, 0
     63c:	5d c0       	rjmp	.+186    	; 0x6f8 <__vector_7+0x182>
		{
			if(t<15) global_frequency = freqY1;
     63e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     642:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     646:	0f 97       	sbiw	r24, 0x0f	; 15
     648:	8c f4       	brge	.+34     	; 0x66c <__vector_7+0xf6>
     64a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     64e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     652:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     656:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     65a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     65e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     662:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     666:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     66a:	b1 c0       	rjmp	.+354    	; 0x7ce <__vector_7+0x258>
			else if(t<31) global_frequency = freqRY1;
     66c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     670:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     674:	4f 97       	sbiw	r24, 0x1f	; 31
     676:	8c f4       	brge	.+34     	; 0x69a <__vector_7+0x124>
     678:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <freqRY1>
     67c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <freqRY1+0x1>
     680:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <freqRY1+0x2>
     684:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <freqRY1+0x3>
     688:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     68c:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     690:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     694:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     698:	9a c0       	rjmp	.+308    	; 0x7ce <__vector_7+0x258>
			else if(t<47) global_frequency = freqBY1;
     69a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     69e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     6a2:	8f 97       	sbiw	r24, 0x2f	; 47
     6a4:	8c f4       	brge	.+34     	; 0x6c8 <__vector_7+0x152>
     6a6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <freqBY1>
     6aa:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <freqBY1+0x1>
     6ae:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <freqBY1+0x2>
     6b2:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <freqBY1+0x3>
     6b6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     6ba:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     6be:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     6c2:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     6c6:	83 c0       	rjmp	.+262    	; 0x7ce <__vector_7+0x258>
			else if(t<63) global_frequency = freqY1;
     6c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     6cc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     6d0:	cf 97       	sbiw	r24, 0x3f	; 63
     6d2:	0c f0       	brlt	.+2      	; 0x6d6 <__vector_7+0x160>
     6d4:	7c c0       	rjmp	.+248    	; 0x7ce <__vector_7+0x258>
     6d6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     6da:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     6de:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     6e2:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     6e6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     6ea:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     6ee:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     6f2:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     6f6:	6b c0       	rjmp	.+214    	; 0x7ce <__vector_7+0x258>
		}
		else if((t%2)==1)
     6f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     6fc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     700:	81 70       	andi	r24, 0x01	; 1
     702:	90 78       	andi	r25, 0x80	; 128
     704:	99 23       	and	r25, r25
     706:	24 f4       	brge	.+8      	; 0x710 <__vector_7+0x19a>
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	8e 6f       	ori	r24, 0xFE	; 254
     70c:	9f 6f       	ori	r25, 0xFF	; 255
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	09 f0       	breq	.+2      	; 0x716 <__vector_7+0x1a0>
     714:	5c c0       	rjmp	.+184    	; 0x7ce <__vector_7+0x258>
		{
			if(t<16) global_frequency = freqY2;
     716:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     71a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     71e:	40 97       	sbiw	r24, 0x10	; 16
     720:	8c f4       	brge	.+34     	; 0x744 <__vector_7+0x1ce>
     722:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <freqY2>
     726:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <freqY2+0x1>
     72a:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <freqY2+0x2>
     72e:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <freqY2+0x3>
     732:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     736:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     73a:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     73e:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     742:	45 c0       	rjmp	.+138    	; 0x7ce <__vector_7+0x258>
			else if(t<32) global_frequency = freqRY2;
     744:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     748:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     74c:	80 97       	sbiw	r24, 0x20	; 32
     74e:	8c f4       	brge	.+34     	; 0x772 <__vector_7+0x1fc>
     750:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <freqRY2>
     754:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <freqRY2+0x1>
     758:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <freqRY2+0x2>
     75c:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <freqRY2+0x3>
     760:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     764:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     768:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     76c:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     770:	2e c0       	rjmp	.+92     	; 0x7ce <__vector_7+0x258>
			else if(t<48) global_frequency = freqBY2;
     772:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     776:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     77a:	c0 97       	sbiw	r24, 0x30	; 48
     77c:	8c f4       	brge	.+34     	; 0x7a0 <__vector_7+0x22a>
     77e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     782:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     786:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__data_end+0x2>
     78a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__data_end+0x3>
     78e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     792:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     796:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     79a:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
     79e:	17 c0       	rjmp	.+46     	; 0x7ce <__vector_7+0x258>
			else if(t<64) global_frequency = freqY2;
     7a0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <t>
     7a4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <t+0x1>
     7a8:	80 34       	cpi	r24, 0x40	; 64
     7aa:	91 05       	cpc	r25, r1
     7ac:	84 f4       	brge	.+32     	; 0x7ce <__vector_7+0x258>
     7ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <freqY2>
     7b2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <freqY2+0x1>
     7b6:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <freqY2+0x2>
     7ba:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <freqY2+0x3>
     7be:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <global_frequency>
     7c2:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <global_frequency+0x1>
     7c6:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <global_frequency+0x2>
     7ca:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <global_frequency+0x3>
		}
	}
	next_phase = getphase(prev_phase,prev_freq,532);		//calculation of phase to be added in new wave
     7ce:	80 90 a8 00 	lds	r8, 0x00A8	; 0x8000a8 <prev_freq>
     7d2:	90 90 a9 00 	lds	r9, 0x00A9	; 0x8000a9 <prev_freq+0x1>
     7d6:	a0 90 aa 00 	lds	r10, 0x00AA	; 0x8000aa <prev_freq+0x2>
     7da:	b0 90 ab 00 	lds	r11, 0x00AB	; 0x8000ab <prev_freq+0x3>
     7de:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <prev_phase>
     7e2:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <prev_phase+0x1>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 04 08 	call	0x1008	; 0x1008 <__floatunsisf>
     7ee:	e1 2c       	mov	r14, r1
     7f0:	f1 2c       	mov	r15, r1
     7f2:	05 e0       	ldi	r16, 0x05	; 5
     7f4:	14 e4       	ldi	r17, 0x44	; 68
     7f6:	a5 01       	movw	r20, r10
     7f8:	94 01       	movw	r18, r8
     7fa:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8getphasefff>
     7fe:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <next_phase+0x1>
     802:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <next_phase>
	cont++;
     806:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <cont>
     80a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <cont+0x1>
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <cont+0x1>
     814:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <cont>
	if (global_frequency==prev_freq) compare=1;
     818:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <global_frequency>
     81c:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <global_frequency+0x1>
     820:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <global_frequency+0x2>
     824:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <global_frequency+0x3>
     828:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <prev_freq>
     82c:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <prev_freq+0x1>
     830:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <prev_freq+0x2>
     834:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <prev_freq+0x3>
     838:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
     83c:	81 11       	cpse	r24, r1
     83e:	07 c0       	rjmp	.+14     	; 0x84e <__vector_7+0x2d8>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <compare+0x1>
     848:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <compare>
     84c:	04 c0       	rjmp	.+8      	; 0x856 <__vector_7+0x2e0>
	else compare =0;
     84e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <compare+0x1>
     852:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <compare>
// 	if(prev_freq==global_frequency) ;
// 	else {}
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	9f 90       	pop	r9
     87c:	8f 90       	pop	r8
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <__vector_12>:
	
     888:	18 95       	reti

0000088a <_GLOBAL__sub_I_TEMP>:
     88a:	4f 92       	push	r4
     88c:	5f 92       	push	r5
     88e:	6f 92       	push	r6
     890:	7f 92       	push	r7
     892:	8f 92       	push	r8
     894:	9f 92       	push	r9
     896:	af 92       	push	r10
     898:	bf 92       	push	r11
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	28 97       	sbiw	r28, 0x08	; 8
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
#include <math.h>
#include <avr/interrupt.h>
#include <util/atomic.h>

int TEMP = ((((F_CPU)/(TIMER1_PRESCALER*1000000))*560.5)-1);			//Counter Cycles for required time557
int TICKS = 65535-TEMP;												//Value for TCNT1 to implement timing by overflow
     8b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     8ba:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     8be:	80 95       	com	r24
     8c0:	90 95       	com	r25
     8c2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <TICKS+0x1>
     8c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <TICKS>
	return (unsigned int) ph;
}

//color conversion from RGB to Y/RY/BY
int R1=255,G1=0,B1=0;
float Y1 = 16.0 + (.003906 * ((65.738 * R1) + (129.057 * G1) + (25.064 * B1)));
     8ca:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <R1>
     8ce:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <R1+0x1>
     8d2:	07 2e       	mov	r0, r23
     8d4:	00 0c       	add	r0, r0
     8d6:	88 0b       	sbc	r24, r24
     8d8:	99 0b       	sbc	r25, r25
     8da:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     8de:	69 83       	std	Y+1, r22	; 0x01
     8e0:	7a 83       	std	Y+2, r23	; 0x02
     8e2:	8b 83       	std	Y+3, r24	; 0x03
     8e4:	9c 83       	std	Y+4, r25	; 0x04
     8e6:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <G1>
     8ea:	70 91 9d 00 	lds	r23, 0x009D	; 0x80009d <G1+0x1>
     8ee:	07 2e       	mov	r0, r23
     8f0:	00 0c       	add	r0, r0
     8f2:	88 0b       	sbc	r24, r24
     8f4:	99 0b       	sbc	r25, r25
     8f6:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     8fa:	6d 83       	std	Y+5, r22	; 0x05
     8fc:	7e 83       	std	Y+6, r23	; 0x06
     8fe:	8f 83       	std	Y+7, r24	; 0x07
     900:	98 87       	std	Y+8, r25	; 0x08
     902:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <B1>
     906:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <B1+0x1>
     90a:	07 2e       	mov	r0, r23
     90c:	00 0c       	add	r0, r0
     90e:	88 0b       	sbc	r24, r24
     910:	99 0b       	sbc	r25, r25
     912:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     916:	6b 01       	movw	r12, r22
     918:	7c 01       	movw	r14, r24
     91a:	2b ed       	ldi	r18, 0xDB	; 219
     91c:	39 e7       	ldi	r19, 0x79	; 121
     91e:	43 e8       	ldi	r20, 0x83	; 131
     920:	52 e4       	ldi	r21, 0x42	; 66
     922:	69 81       	ldd	r22, Y+1	; 0x01
     924:	7a 81       	ldd	r23, Y+2	; 0x02
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     92e:	4b 01       	movw	r8, r22
     930:	5c 01       	movw	r10, r24
     932:	28 e9       	ldi	r18, 0x98	; 152
     934:	3e e0       	ldi	r19, 0x0E	; 14
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	53 e4       	ldi	r21, 0x43	; 67
     93a:	6d 81       	ldd	r22, Y+5	; 0x05
     93c:	7e 81       	ldd	r23, Y+6	; 0x06
     93e:	8f 81       	ldd	r24, Y+7	; 0x07
     940:	98 85       	ldd	r25, Y+8	; 0x08
     942:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c5 01       	movw	r24, r10
     94c:	b4 01       	movw	r22, r8
     94e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     952:	4b 01       	movw	r8, r22
     954:	5c 01       	movw	r10, r24
     956:	22 e1       	ldi	r18, 0x12	; 18
     958:	33 e8       	ldi	r19, 0x83	; 131
     95a:	48 ec       	ldi	r20, 0xC8	; 200
     95c:	51 e4       	ldi	r21, 0x41	; 65
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	c5 01       	movw	r24, r10
     96c:	b4 01       	movw	r22, r8
     96e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     972:	2e ec       	ldi	r18, 0xCE	; 206
     974:	3b ef       	ldi	r19, 0xFB	; 251
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	5b e3       	ldi	r21, 0x3B	; 59
     97a:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e8       	ldi	r20, 0x80	; 128
     984:	51 e4       	ldi	r21, 0x41	; 65
     986:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     98a:	2b 01       	movw	r4, r22
     98c:	3c 01       	movw	r6, r24
     98e:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <Y1>
     992:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <Y1+0x1>
     996:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Y1+0x2>
     99a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Y1+0x3>
float RY1 = 128.0 + (.003906 * ((112.439 * R1) + (-94.154 * G1) + (-18.285 * B1)));
     99e:	25 ec       	ldi	r18, 0xC5	; 197
     9a0:	30 ee       	ldi	r19, 0xE0	; 224
     9a2:	40 ee       	ldi	r20, 0xE0	; 224
     9a4:	52 e4       	ldi	r21, 0x42	; 66
     9a6:	69 81       	ldd	r22, Y+1	; 0x01
     9a8:	7a 81       	ldd	r23, Y+2	; 0x02
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     9b2:	4b 01       	movw	r8, r22
     9b4:	5c 01       	movw	r10, r24
     9b6:	29 ed       	ldi	r18, 0xD9	; 217
     9b8:	3e e4       	ldi	r19, 0x4E	; 78
     9ba:	4c eb       	ldi	r20, 0xBC	; 188
     9bc:	52 ec       	ldi	r21, 0xC2	; 194
     9be:	6d 81       	ldd	r22, Y+5	; 0x05
     9c0:	7e 81       	ldd	r23, Y+6	; 0x06
     9c2:	8f 81       	ldd	r24, Y+7	; 0x07
     9c4:	98 85       	ldd	r25, Y+8	; 0x08
     9c6:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c5 01       	movw	r24, r10
     9d0:	b4 01       	movw	r22, r8
     9d2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     9d6:	4b 01       	movw	r8, r22
     9d8:	5c 01       	movw	r10, r24
     9da:	2e ea       	ldi	r18, 0xAE	; 174
     9dc:	37 e4       	ldi	r19, 0x47	; 71
     9de:	42 e9       	ldi	r20, 0x92	; 146
     9e0:	51 ec       	ldi	r21, 0xC1	; 193
     9e2:	c7 01       	movw	r24, r14
     9e4:	b6 01       	movw	r22, r12
     9e6:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c5 01       	movw	r24, r10
     9f0:	b4 01       	movw	r22, r8
     9f2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     9f6:	2e ec       	ldi	r18, 0xCE	; 206
     9f8:	3b ef       	ldi	r19, 0xFB	; 251
     9fa:	4f e7       	ldi	r20, 0x7F	; 127
     9fc:	5b e3       	ldi	r21, 0x3B	; 59
     9fe:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	53 e4       	ldi	r21, 0x43	; 67
     a0a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     a0e:	4b 01       	movw	r8, r22
     a10:	5c 01       	movw	r10, r24
     a12:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <RY1>
     a16:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <RY1+0x1>
     a1a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <RY1+0x2>
     a1e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <RY1+0x3>
float BY1 = 128.0 + (.003906 * ((-37.945 * R1) + (-74.494 * G1) + (112.439 * B1)));
     a22:	2e ea       	ldi	r18, 0xAE	; 174
     a24:	37 ec       	ldi	r19, 0xC7	; 199
     a26:	47 e1       	ldi	r20, 0x17	; 23
     a28:	52 ec       	ldi	r21, 0xC2	; 194
     a2a:	69 81       	ldd	r22, Y+1	; 0x01
     a2c:	7a 81       	ldd	r23, Y+2	; 0x02
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     a36:	69 83       	std	Y+1, r22	; 0x01
     a38:	7a 83       	std	Y+2, r23	; 0x02
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	2e ee       	ldi	r18, 0xEE	; 238
     a40:	3c ef       	ldi	r19, 0xFC	; 252
     a42:	44 e9       	ldi	r20, 0x94	; 148
     a44:	52 ec       	ldi	r21, 0xC2	; 194
     a46:	6d 81       	ldd	r22, Y+5	; 0x05
     a48:	7e 81       	ldd	r23, Y+6	; 0x06
     a4a:	8f 81       	ldd	r24, Y+7	; 0x07
     a4c:	98 85       	ldd	r25, Y+8	; 0x08
     a4e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	69 81       	ldd	r22, Y+1	; 0x01
     a58:	7a 81       	ldd	r23, Y+2	; 0x02
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     a62:	69 83       	std	Y+1, r22	; 0x01
     a64:	7a 83       	std	Y+2, r23	; 0x02
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	25 ec       	ldi	r18, 0xC5	; 197
     a6c:	30 ee       	ldi	r19, 0xE0	; 224
     a6e:	40 ee       	ldi	r20, 0xE0	; 224
     a70:	52 e4       	ldi	r21, 0x42	; 66
     a72:	c7 01       	movw	r24, r14
     a74:	b6 01       	movw	r22, r12
     a76:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	69 81       	ldd	r22, Y+1	; 0x01
     a80:	7a 81       	ldd	r23, Y+2	; 0x02
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     a8a:	2e ec       	ldi	r18, 0xCE	; 206
     a8c:	3b ef       	ldi	r19, 0xFB	; 251
     a8e:	4f e7       	ldi	r20, 0x7F	; 127
     a90:	5b e3       	ldi	r21, 0x3B	; 59
     a92:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	53 e4       	ldi	r21, 0x43	; 67
     a9e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     aa2:	6b 01       	movw	r12, r22
     aa4:	7c 01       	movw	r14, r24
     aa6:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <BY1>
     aaa:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <BY1+0x1>
     aae:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <BY1+0x2>
     ab2:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <BY1+0x3>
//frequency calculation and documented values
volatile float freqY1  =  1500 + (Y1 * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
     ab6:	29 ec       	ldi	r18, 0xC9	; 201
     ab8:	38 ec       	ldi	r19, 0xC8	; 200
     aba:	48 e4       	ldi	r20, 0x48	; 72
     abc:	50 e4       	ldi	r21, 0x40	; 64
     abe:	c3 01       	movw	r24, r6
     ac0:	b2 01       	movw	r22, r4
     ac2:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e8       	ldi	r19, 0x80	; 128
     aca:	4b eb       	ldi	r20, 0xBB	; 187
     acc:	54 e4       	ldi	r21, 0x44	; 68
     ace:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     ad2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <freqY1>
     ad6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <freqY1+0x1>
     ada:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <freqY1+0x2>
     ade:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <freqY1+0x3>
volatile float freqRY1 =   1500 + (RY1 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
     ae2:	29 ec       	ldi	r18, 0xC9	; 201
     ae4:	38 ec       	ldi	r19, 0xC8	; 200
     ae6:	48 e4       	ldi	r20, 0x48	; 72
     ae8:	50 e4       	ldi	r21, 0x40	; 64
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e8       	ldi	r19, 0x80	; 128
     af6:	4b eb       	ldi	r20, 0xBB	; 187
     af8:	54 e4       	ldi	r21, 0x44	; 68
     afa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     afe:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <freqRY1>
     b02:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <freqRY1+0x1>
     b06:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <freqRY1+0x2>
     b0a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <freqRY1+0x3>
volatile float freqBY1 =  1500 + (BY1 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
     b0e:	29 ec       	ldi	r18, 0xC9	; 201
     b10:	38 ec       	ldi	r19, 0xC8	; 200
     b12:	48 e4       	ldi	r20, 0x48	; 72
     b14:	50 e4       	ldi	r21, 0x40	; 64
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e8       	ldi	r19, 0x80	; 128
     b22:	4b eb       	ldi	r20, 0xBB	; 187
     b24:	54 e4       	ldi	r21, 0x44	; 68
     b26:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     b2a:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <freqBY1>
     b2e:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <freqBY1+0x1>
     b32:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <freqBY1+0x2>
     b36:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <freqBY1+0x3>

int R2=0,G2=255,B2=0;
float Y2 = 16.0 + (.003906 * ((65.738 * R2) + (129.057 * G2) + (25.064 * B2)));
     b3a:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <R2>
     b3e:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <R2+0x1>
     b42:	07 2e       	mov	r0, r23
     b44:	00 0c       	add	r0, r0
     b46:	88 0b       	sbc	r24, r24
     b48:	99 0b       	sbc	r25, r25
     b4a:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     b4e:	69 83       	std	Y+1, r22	; 0x01
     b50:	7a 83       	std	Y+2, r23	; 0x02
     b52:	8b 83       	std	Y+3, r24	; 0x03
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <G2>
     b5a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <G2+0x1>
     b5e:	07 2e       	mov	r0, r23
     b60:	00 0c       	add	r0, r0
     b62:	88 0b       	sbc	r24, r24
     b64:	99 0b       	sbc	r25, r25
     b66:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     b6a:	6d 83       	std	Y+5, r22	; 0x05
     b6c:	7e 83       	std	Y+6, r23	; 0x06
     b6e:	8f 83       	std	Y+7, r24	; 0x07
     b70:	98 87       	std	Y+8, r25	; 0x08
     b72:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <B2>
     b76:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <B2+0x1>
     b7a:	07 2e       	mov	r0, r23
     b7c:	00 0c       	add	r0, r0
     b7e:	88 0b       	sbc	r24, r24
     b80:	99 0b       	sbc	r25, r25
     b82:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     b86:	6b 01       	movw	r12, r22
     b88:	7c 01       	movw	r14, r24
     b8a:	2b ed       	ldi	r18, 0xDB	; 219
     b8c:	39 e7       	ldi	r19, 0x79	; 121
     b8e:	43 e8       	ldi	r20, 0x83	; 131
     b90:	52 e4       	ldi	r21, 0x42	; 66
     b92:	69 81       	ldd	r22, Y+1	; 0x01
     b94:	7a 81       	ldd	r23, Y+2	; 0x02
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     b9e:	4b 01       	movw	r8, r22
     ba0:	5c 01       	movw	r10, r24
     ba2:	28 e9       	ldi	r18, 0x98	; 152
     ba4:	3e e0       	ldi	r19, 0x0E	; 14
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	53 e4       	ldi	r21, 0x43	; 67
     baa:	6d 81       	ldd	r22, Y+5	; 0x05
     bac:	7e 81       	ldd	r23, Y+6	; 0x06
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	c5 01       	movw	r24, r10
     bbc:	b4 01       	movw	r22, r8
     bbe:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     bc2:	4b 01       	movw	r8, r22
     bc4:	5c 01       	movw	r10, r24
     bc6:	22 e1       	ldi	r18, 0x12	; 18
     bc8:	33 e8       	ldi	r19, 0x83	; 131
     bca:	48 ec       	ldi	r20, 0xC8	; 200
     bcc:	51 e4       	ldi	r21, 0x41	; 65
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	c5 01       	movw	r24, r10
     bdc:	b4 01       	movw	r22, r8
     bde:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     be2:	2e ec       	ldi	r18, 0xCE	; 206
     be4:	3b ef       	ldi	r19, 0xFB	; 251
     be6:	4f e7       	ldi	r20, 0x7F	; 127
     be8:	5b e3       	ldi	r21, 0x3B	; 59
     bea:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     bfa:	2b 01       	movw	r4, r22
     bfc:	3c 01       	movw	r6, r24
     bfe:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <Y2>
     c02:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <Y2+0x1>
     c06:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Y2+0x2>
     c0a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <Y2+0x3>
float RY2 = 128.0 + (.003906 * ((112.439 * R2) + (-94.154 * G2) + (-18.285 * B2)));
     c0e:	25 ec       	ldi	r18, 0xC5	; 197
     c10:	30 ee       	ldi	r19, 0xE0	; 224
     c12:	40 ee       	ldi	r20, 0xE0	; 224
     c14:	52 e4       	ldi	r21, 0x42	; 66
     c16:	69 81       	ldd	r22, Y+1	; 0x01
     c18:	7a 81       	ldd	r23, Y+2	; 0x02
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c22:	4b 01       	movw	r8, r22
     c24:	5c 01       	movw	r10, r24
     c26:	29 ed       	ldi	r18, 0xD9	; 217
     c28:	3e e4       	ldi	r19, 0x4E	; 78
     c2a:	4c eb       	ldi	r20, 0xBC	; 188
     c2c:	52 ec       	ldi	r21, 0xC2	; 194
     c2e:	6d 81       	ldd	r22, Y+5	; 0x05
     c30:	7e 81       	ldd	r23, Y+6	; 0x06
     c32:	8f 81       	ldd	r24, Y+7	; 0x07
     c34:	98 85       	ldd	r25, Y+8	; 0x08
     c36:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	c5 01       	movw	r24, r10
     c40:	b4 01       	movw	r22, r8
     c42:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     c46:	4b 01       	movw	r8, r22
     c48:	5c 01       	movw	r10, r24
     c4a:	2e ea       	ldi	r18, 0xAE	; 174
     c4c:	37 e4       	ldi	r19, 0x47	; 71
     c4e:	42 e9       	ldi	r20, 0x92	; 146
     c50:	51 ec       	ldi	r21, 0xC1	; 193
     c52:	c7 01       	movw	r24, r14
     c54:	b6 01       	movw	r22, r12
     c56:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
     c5e:	c5 01       	movw	r24, r10
     c60:	b4 01       	movw	r22, r8
     c62:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     c66:	2e ec       	ldi	r18, 0xCE	; 206
     c68:	3b ef       	ldi	r19, 0xFB	; 251
     c6a:	4f e7       	ldi	r20, 0x7F	; 127
     c6c:	5b e3       	ldi	r21, 0x3B	; 59
     c6e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	53 e4       	ldi	r21, 0x43	; 67
     c7a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     c7e:	4b 01       	movw	r8, r22
     c80:	5c 01       	movw	r10, r24
     c82:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <RY2>
     c86:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <RY2+0x1>
     c8a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <RY2+0x2>
     c8e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <RY2+0x3>
float BY2 = 128.0 + (.003906 * ((-37.945 * R2) + (-74.494 * G2) + (112.439 * B2)));
     c92:	2e ea       	ldi	r18, 0xAE	; 174
     c94:	37 ec       	ldi	r19, 0xC7	; 199
     c96:	47 e1       	ldi	r20, 0x17	; 23
     c98:	52 ec       	ldi	r21, 0xC2	; 194
     c9a:	69 81       	ldd	r22, Y+1	; 0x01
     c9c:	7a 81       	ldd	r23, Y+2	; 0x02
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     ca6:	69 83       	std	Y+1, r22	; 0x01
     ca8:	7a 83       	std	Y+2, r23	; 0x02
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	2e ee       	ldi	r18, 0xEE	; 238
     cb0:	3c ef       	ldi	r19, 0xFC	; 252
     cb2:	44 e9       	ldi	r20, 0x94	; 148
     cb4:	52 ec       	ldi	r21, 0xC2	; 194
     cb6:	6d 81       	ldd	r22, Y+5	; 0x05
     cb8:	7e 81       	ldd	r23, Y+6	; 0x06
     cba:	8f 81       	ldd	r24, Y+7	; 0x07
     cbc:	98 85       	ldd	r25, Y+8	; 0x08
     cbe:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	69 81       	ldd	r22, Y+1	; 0x01
     cc8:	7a 81       	ldd	r23, Y+2	; 0x02
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     cd2:	69 83       	std	Y+1, r22	; 0x01
     cd4:	7a 83       	std	Y+2, r23	; 0x02
     cd6:	8b 83       	std	Y+3, r24	; 0x03
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	25 ec       	ldi	r18, 0xC5	; 197
     cdc:	30 ee       	ldi	r19, 0xE0	; 224
     cde:	40 ee       	ldi	r20, 0xE0	; 224
     ce0:	52 e4       	ldi	r21, 0x42	; 66
     ce2:	c7 01       	movw	r24, r14
     ce4:	b6 01       	movw	r22, r12
     ce6:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     cea:	9b 01       	movw	r18, r22
     cec:	ac 01       	movw	r20, r24
     cee:	69 81       	ldd	r22, Y+1	; 0x01
     cf0:	7a 81       	ldd	r23, Y+2	; 0x02
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     cfa:	2e ec       	ldi	r18, 0xCE	; 206
     cfc:	3b ef       	ldi	r19, 0xFB	; 251
     cfe:	4f e7       	ldi	r20, 0x7F	; 127
     d00:	5b e3       	ldi	r21, 0x3B	; 59
     d02:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	53 e4       	ldi	r21, 0x43	; 67
     d0e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     d12:	6b 01       	movw	r12, r22
     d14:	7c 01       	movw	r14, r24
     d16:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <BY2>
     d1a:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <BY2+0x1>
     d1e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <BY2+0x2>
     d22:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <BY2+0x3>
//frequency calculation and documented values
volatile float freqY2  =  1500 + (Y2  * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
     d26:	29 ec       	ldi	r18, 0xC9	; 201
     d28:	38 ec       	ldi	r19, 0xC8	; 200
     d2a:	48 e4       	ldi	r20, 0x48	; 72
     d2c:	50 e4       	ldi	r21, 0x40	; 64
     d2e:	c3 01       	movw	r24, r6
     d30:	b2 01       	movw	r22, r4
     d32:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e8       	ldi	r19, 0x80	; 128
     d3a:	4b eb       	ldi	r20, 0xBB	; 187
     d3c:	54 e4       	ldi	r21, 0x44	; 68
     d3e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     d42:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <freqY2>
     d46:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <freqY2+0x1>
     d4a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <freqY2+0x2>
     d4e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <freqY2+0x3>
volatile float freqRY2 =  1500 + (RY2 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
     d52:	29 ec       	ldi	r18, 0xC9	; 201
     d54:	38 ec       	ldi	r19, 0xC8	; 200
     d56:	48 e4       	ldi	r20, 0x48	; 72
     d58:	50 e4       	ldi	r21, 0x40	; 64
     d5a:	c5 01       	movw	r24, r10
     d5c:	b4 01       	movw	r22, r8
     d5e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e8       	ldi	r19, 0x80	; 128
     d66:	4b eb       	ldi	r20, 0xBB	; 187
     d68:	54 e4       	ldi	r21, 0x44	; 68
     d6a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     d6e:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <freqRY2>
     d72:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <freqRY2+0x1>
     d76:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <freqRY2+0x2>
     d7a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <freqRY2+0x3>
volatile float freqBY2 =  1500 + (BY2 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
     d7e:	29 ec       	ldi	r18, 0xC9	; 201
     d80:	38 ec       	ldi	r19, 0xC8	; 200
     d82:	48 e4       	ldi	r20, 0x48	; 72
     d84:	50 e4       	ldi	r21, 0x40	; 64
     d86:	c7 01       	movw	r24, r14
     d88:	b6 01       	movw	r22, r12
     d8a:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e8       	ldi	r19, 0x80	; 128
     d92:	4b eb       	ldi	r20, 0xBB	; 187
     d94:	54 e4       	ldi	r21, 0x44	; 68
     d96:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     d9a:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end>
     d9e:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x1>
     da2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end+0x2>
     da6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x3>
	else compare =0;
// 	if(prev_freq==global_frequency) ;
// 	else {}
}
	
     daa:	28 96       	adiw	r28, 0x08	; 8
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	9f 90       	pop	r9
     dc8:	8f 90       	pop	r8
     dca:	7f 90       	pop	r7
     dcc:	6f 90       	pop	r6
     dce:	5f 90       	pop	r5
     dd0:	4f 90       	pop	r4
     dd2:	08 95       	ret

00000dd4 <__subsf3>:
     dd4:	50 58       	subi	r21, 0x80	; 128

00000dd6 <__addsf3>:
     dd6:	bb 27       	eor	r27, r27
     dd8:	aa 27       	eor	r26, r26
     dda:	0e 94 02 07 	call	0xe04	; 0xe04 <__addsf3x>
     dde:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_round>
     de2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_pscA>
     de6:	38 f0       	brcs	.+14     	; 0xdf6 <__addsf3+0x20>
     de8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_pscB>
     dec:	20 f0       	brcs	.+8      	; 0xdf6 <__addsf3+0x20>
     dee:	39 f4       	brne	.+14     	; 0xdfe <__addsf3+0x28>
     df0:	9f 3f       	cpi	r25, 0xFF	; 255
     df2:	19 f4       	brne	.+6      	; 0xdfa <__addsf3+0x24>
     df4:	26 f4       	brtc	.+8      	; 0xdfe <__addsf3+0x28>
     df6:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_nan>
     dfa:	0e f4       	brtc	.+2      	; 0xdfe <__addsf3+0x28>
     dfc:	e0 95       	com	r30
     dfe:	e7 fb       	bst	r30, 7
     e00:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_inf>

00000e04 <__addsf3x>:
     e04:	e9 2f       	mov	r30, r25
     e06:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_split3>
     e0a:	58 f3       	brcs	.-42     	; 0xde2 <__addsf3+0xc>
     e0c:	ba 17       	cp	r27, r26
     e0e:	62 07       	cpc	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__addsf3x+0x1c>
     e18:	79 f4       	brne	.+30     	; 0xe38 <__addsf3x+0x34>
     e1a:	a6 f5       	brtc	.+104    	; 0xe84 <__addsf3x+0x80>
     e1c:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_zero>
     e20:	0e f4       	brtc	.+2      	; 0xe24 <__addsf3x+0x20>
     e22:	e0 95       	com	r30
     e24:	0b 2e       	mov	r0, r27
     e26:	ba 2f       	mov	r27, r26
     e28:	a0 2d       	mov	r26, r0
     e2a:	0b 01       	movw	r0, r22
     e2c:	b9 01       	movw	r22, r18
     e2e:	90 01       	movw	r18, r0
     e30:	0c 01       	movw	r0, r24
     e32:	ca 01       	movw	r24, r20
     e34:	a0 01       	movw	r20, r0
     e36:	11 24       	eor	r1, r1
     e38:	ff 27       	eor	r31, r31
     e3a:	59 1b       	sub	r21, r25
     e3c:	99 f0       	breq	.+38     	; 0xe64 <__addsf3x+0x60>
     e3e:	59 3f       	cpi	r21, 0xF9	; 249
     e40:	50 f4       	brcc	.+20     	; 0xe56 <__addsf3x+0x52>
     e42:	50 3e       	cpi	r21, 0xE0	; 224
     e44:	68 f1       	brcs	.+90     	; 0xea0 <__addsf3x+0x9c>
     e46:	1a 16       	cp	r1, r26
     e48:	f0 40       	sbci	r31, 0x00	; 0
     e4a:	a2 2f       	mov	r26, r18
     e4c:	23 2f       	mov	r18, r19
     e4e:	34 2f       	mov	r19, r20
     e50:	44 27       	eor	r20, r20
     e52:	58 5f       	subi	r21, 0xF8	; 248
     e54:	f3 cf       	rjmp	.-26     	; 0xe3c <__addsf3x+0x38>
     e56:	46 95       	lsr	r20
     e58:	37 95       	ror	r19
     e5a:	27 95       	ror	r18
     e5c:	a7 95       	ror	r26
     e5e:	f0 40       	sbci	r31, 0x00	; 0
     e60:	53 95       	inc	r21
     e62:	c9 f7       	brne	.-14     	; 0xe56 <__addsf3x+0x52>
     e64:	7e f4       	brtc	.+30     	; 0xe84 <__addsf3x+0x80>
     e66:	1f 16       	cp	r1, r31
     e68:	ba 0b       	sbc	r27, r26
     e6a:	62 0b       	sbc	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	ba f0       	brmi	.+46     	; 0xea0 <__addsf3x+0x9c>
     e72:	91 50       	subi	r25, 0x01	; 1
     e74:	a1 f0       	breq	.+40     	; 0xe9e <__addsf3x+0x9a>
     e76:	ff 0f       	add	r31, r31
     e78:	bb 1f       	adc	r27, r27
     e7a:	66 1f       	adc	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	c2 f7       	brpl	.-16     	; 0xe72 <__addsf3x+0x6e>
     e82:	0e c0       	rjmp	.+28     	; 0xea0 <__addsf3x+0x9c>
     e84:	ba 0f       	add	r27, r26
     e86:	62 1f       	adc	r22, r18
     e88:	73 1f       	adc	r23, r19
     e8a:	84 1f       	adc	r24, r20
     e8c:	48 f4       	brcc	.+18     	; 0xea0 <__addsf3x+0x9c>
     e8e:	87 95       	ror	r24
     e90:	77 95       	ror	r23
     e92:	67 95       	ror	r22
     e94:	b7 95       	ror	r27
     e96:	f7 95       	ror	r31
     e98:	9e 3f       	cpi	r25, 0xFE	; 254
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <__addsf3x+0x9a>
     e9c:	b0 cf       	rjmp	.-160    	; 0xdfe <__addsf3+0x28>
     e9e:	93 95       	inc	r25
     ea0:	88 0f       	add	r24, r24
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <__addsf3x+0xa2>
     ea4:	99 27       	eor	r25, r25
     ea6:	ee 0f       	add	r30, r30
     ea8:	97 95       	ror	r25
     eaa:	87 95       	ror	r24
     eac:	08 95       	ret

00000eae <__cmpsf2>:
     eae:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_cmp>
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__cmpsf2+0x8>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	08 95       	ret

00000eb8 <__divsf3>:
     eb8:	0e 94 70 07 	call	0xee0	; 0xee0 <__divsf3x>
     ebc:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_round>
     ec0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_pscB>
     ec4:	58 f0       	brcs	.+22     	; 0xedc <__divsf3+0x24>
     ec6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_pscA>
     eca:	40 f0       	brcs	.+16     	; 0xedc <__divsf3+0x24>
     ecc:	29 f4       	brne	.+10     	; 0xed8 <__divsf3+0x20>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	29 f0       	breq	.+10     	; 0xedc <__divsf3+0x24>
     ed2:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_inf>
     ed6:	51 11       	cpse	r21, r1
     ed8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     edc:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_nan>

00000ee0 <__divsf3x>:
     ee0:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_split3>
     ee4:	68 f3       	brcs	.-38     	; 0xec0 <__divsf3+0x8>

00000ee6 <__divsf3_pse>:
     ee6:	99 23       	and	r25, r25
     ee8:	b1 f3       	breq	.-20     	; 0xed6 <__divsf3+0x1e>
     eea:	55 23       	and	r21, r21
     eec:	91 f3       	breq	.-28     	; 0xed2 <__divsf3+0x1a>
     eee:	95 1b       	sub	r25, r21
     ef0:	55 0b       	sbc	r21, r21
     ef2:	bb 27       	eor	r27, r27
     ef4:	aa 27       	eor	r26, r26
     ef6:	62 17       	cp	r22, r18
     ef8:	73 07       	cpc	r23, r19
     efa:	84 07       	cpc	r24, r20
     efc:	38 f0       	brcs	.+14     	; 0xf0c <__divsf3_pse+0x26>
     efe:	9f 5f       	subi	r25, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	44 1f       	adc	r20, r20
     f08:	aa 1f       	adc	r26, r26
     f0a:	a9 f3       	breq	.-22     	; 0xef6 <__divsf3_pse+0x10>
     f0c:	35 d0       	rcall	.+106    	; 0xf78 <__divsf3_pse+0x92>
     f0e:	0e 2e       	mov	r0, r30
     f10:	3a f0       	brmi	.+14     	; 0xf20 <__divsf3_pse+0x3a>
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	32 d0       	rcall	.+100    	; 0xf7a <__divsf3_pse+0x94>
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	e6 95       	lsr	r30
     f1c:	00 1c       	adc	r0, r0
     f1e:	ca f7       	brpl	.-14     	; 0xf12 <__divsf3_pse+0x2c>
     f20:	2b d0       	rcall	.+86     	; 0xf78 <__divsf3_pse+0x92>
     f22:	fe 2f       	mov	r31, r30
     f24:	29 d0       	rcall	.+82     	; 0xf78 <__divsf3_pse+0x92>
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	bb 1f       	adc	r27, r27
     f2e:	26 17       	cp	r18, r22
     f30:	37 07       	cpc	r19, r23
     f32:	48 07       	cpc	r20, r24
     f34:	ab 07       	cpc	r26, r27
     f36:	b0 e8       	ldi	r27, 0x80	; 128
     f38:	09 f0       	breq	.+2      	; 0xf3c <__divsf3_pse+0x56>
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	80 2d       	mov	r24, r0
     f3e:	bf 01       	movw	r22, r30
     f40:	ff 27       	eor	r31, r31
     f42:	93 58       	subi	r25, 0x83	; 131
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	3a f0       	brmi	.+14     	; 0xf56 <__divsf3_pse+0x70>
     f48:	9e 3f       	cpi	r25, 0xFE	; 254
     f4a:	51 05       	cpc	r21, r1
     f4c:	78 f0       	brcs	.+30     	; 0xf6c <__divsf3_pse+0x86>
     f4e:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_inf>
     f52:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	e4 f3       	brlt	.-8      	; 0xf52 <__divsf3_pse+0x6c>
     f5a:	98 3e       	cpi	r25, 0xE8	; 232
     f5c:	d4 f3       	brlt	.-12     	; 0xf52 <__divsf3_pse+0x6c>
     f5e:	86 95       	lsr	r24
     f60:	77 95       	ror	r23
     f62:	67 95       	ror	r22
     f64:	b7 95       	ror	r27
     f66:	f7 95       	ror	r31
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <__divsf3_pse+0x78>
     f6c:	88 0f       	add	r24, r24
     f6e:	91 1d       	adc	r25, r1
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret
     f78:	e1 e0       	ldi	r30, 0x01	; 1
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	bb 1f       	adc	r27, r27
     f82:	62 17       	cp	r22, r18
     f84:	73 07       	cpc	r23, r19
     f86:	84 07       	cpc	r24, r20
     f88:	ba 07       	cpc	r27, r26
     f8a:	20 f0       	brcs	.+8      	; 0xf94 <__divsf3_pse+0xae>
     f8c:	62 1b       	sub	r22, r18
     f8e:	73 0b       	sbc	r23, r19
     f90:	84 0b       	sbc	r24, r20
     f92:	ba 0b       	sbc	r27, r26
     f94:	ee 1f       	adc	r30, r30
     f96:	88 f7       	brcc	.-30     	; 0xf7a <__divsf3_pse+0x94>
     f98:	e0 95       	com	r30
     f9a:	08 95       	ret

00000f9c <__fixsfsi>:
     f9c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fixunssfsi>
     fa0:	68 94       	set
     fa2:	b1 11       	cpse	r27, r1
     fa4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     fa8:	08 95       	ret

00000faa <__fixunssfsi>:
     faa:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fp_splitA>
     fae:	88 f0       	brcs	.+34     	; 0xfd2 <__fixunssfsi+0x28>
     fb0:	9f 57       	subi	r25, 0x7F	; 127
     fb2:	98 f0       	brcs	.+38     	; 0xfda <__fixunssfsi+0x30>
     fb4:	b9 2f       	mov	r27, r25
     fb6:	99 27       	eor	r25, r25
     fb8:	b7 51       	subi	r27, 0x17	; 23
     fba:	b0 f0       	brcs	.+44     	; 0xfe8 <__fixunssfsi+0x3e>
     fbc:	e1 f0       	breq	.+56     	; 0xff6 <__fixunssfsi+0x4c>
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	1a f0       	brmi	.+6      	; 0xfce <__fixunssfsi+0x24>
     fc8:	ba 95       	dec	r27
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__fixunssfsi+0x14>
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <__fixunssfsi+0x4c>
     fce:	b1 30       	cpi	r27, 0x01	; 1
     fd0:	91 f0       	breq	.+36     	; 0xff6 <__fixunssfsi+0x4c>
     fd2:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_zero>
     fd6:	b1 e0       	ldi	r27, 0x01	; 1
     fd8:	08 95       	ret
     fda:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_zero>
     fde:	67 2f       	mov	r22, r23
     fe0:	78 2f       	mov	r23, r24
     fe2:	88 27       	eor	r24, r24
     fe4:	b8 5f       	subi	r27, 0xF8	; 248
     fe6:	39 f0       	breq	.+14     	; 0xff6 <__fixunssfsi+0x4c>
     fe8:	b9 3f       	cpi	r27, 0xF9	; 249
     fea:	cc f3       	brlt	.-14     	; 0xfde <__fixunssfsi+0x34>
     fec:	86 95       	lsr	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	b3 95       	inc	r27
     ff4:	d9 f7       	brne	.-10     	; 0xfec <__fixunssfsi+0x42>
     ff6:	3e f4       	brtc	.+14     	; 0x1006 <__fixunssfsi+0x5c>
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__floatunsisf>:
    1008:	e8 94       	clt
    100a:	09 c0       	rjmp	.+18     	; 0x101e <__floatsisf+0x12>

0000100c <__floatsisf>:
    100c:	97 fb       	bst	r25, 7
    100e:	3e f4       	brtc	.+14     	; 0x101e <__floatsisf+0x12>
    1010:	90 95       	com	r25
    1012:	80 95       	com	r24
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	99 23       	and	r25, r25
    1020:	a9 f0       	breq	.+42     	; 0x104c <__floatsisf+0x40>
    1022:	f9 2f       	mov	r31, r25
    1024:	96 e9       	ldi	r25, 0x96	; 150
    1026:	bb 27       	eor	r27, r27
    1028:	93 95       	inc	r25
    102a:	f6 95       	lsr	r31
    102c:	87 95       	ror	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b7 95       	ror	r27
    1034:	f1 11       	cpse	r31, r1
    1036:	f8 cf       	rjmp	.-16     	; 0x1028 <__floatsisf+0x1c>
    1038:	fa f4       	brpl	.+62     	; 0x1078 <__floatsisf+0x6c>
    103a:	bb 0f       	add	r27, r27
    103c:	11 f4       	brne	.+4      	; 0x1042 <__floatsisf+0x36>
    103e:	60 ff       	sbrs	r22, 0
    1040:	1b c0       	rjmp	.+54     	; 0x1078 <__floatsisf+0x6c>
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	8f 4f       	sbci	r24, 0xFF	; 255
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	16 c0       	rjmp	.+44     	; 0x1078 <__floatsisf+0x6c>
    104c:	88 23       	and	r24, r24
    104e:	11 f0       	breq	.+4      	; 0x1054 <__floatsisf+0x48>
    1050:	96 e9       	ldi	r25, 0x96	; 150
    1052:	11 c0       	rjmp	.+34     	; 0x1076 <__floatsisf+0x6a>
    1054:	77 23       	and	r23, r23
    1056:	21 f0       	breq	.+8      	; 0x1060 <__floatsisf+0x54>
    1058:	9e e8       	ldi	r25, 0x8E	; 142
    105a:	87 2f       	mov	r24, r23
    105c:	76 2f       	mov	r23, r22
    105e:	05 c0       	rjmp	.+10     	; 0x106a <__floatsisf+0x5e>
    1060:	66 23       	and	r22, r22
    1062:	71 f0       	breq	.+28     	; 0x1080 <__floatsisf+0x74>
    1064:	96 e8       	ldi	r25, 0x86	; 134
    1066:	86 2f       	mov	r24, r22
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	2a f0       	brmi	.+10     	; 0x1078 <__floatsisf+0x6c>
    106e:	9a 95       	dec	r25
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	da f7       	brpl	.-10     	; 0x106e <__floatsisf+0x62>
    1078:	88 0f       	add	r24, r24
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret
    1082:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_pscA>
    1086:	20 f0       	brcs	.+8      	; 0x1090 <__floatsisf+0x84>
    1088:	19 f0       	breq	.+6      	; 0x1090 <__floatsisf+0x84>
    108a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_pscB>
    108e:	50 f4       	brcc	.+20     	; 0x10a4 <fmod+0xc>
    1090:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_nan>
    1094:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>

00001098 <fmod>:
    1098:	e9 2f       	mov	r30, r25
    109a:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_split3>
    109e:	88 f3       	brcs	.-30     	; 0x1082 <__floatsisf+0x76>
    10a0:	55 23       	and	r21, r21
    10a2:	b1 f3       	breq	.-20     	; 0x1090 <__floatsisf+0x84>
    10a4:	e7 fb       	bst	r30, 7
    10a6:	62 17       	cp	r22, r18
    10a8:	73 07       	cpc	r23, r19
    10aa:	84 07       	cpc	r24, r20
    10ac:	95 07       	cpc	r25, r21
    10ae:	a8 f1       	brcs	.+106    	; 0x111a <fmod+0x82>
    10b0:	89 f3       	breq	.-30     	; 0x1094 <__floatsisf+0x88>
    10b2:	e9 2f       	mov	r30, r25
    10b4:	ff 27       	eor	r31, r31
    10b6:	88 23       	and	r24, r24
    10b8:	2a f0       	brmi	.+10     	; 0x10c4 <fmod+0x2c>
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	da f7       	brpl	.-10     	; 0x10ba <fmod+0x22>
    10c4:	95 2f       	mov	r25, r21
    10c6:	55 27       	eor	r21, r21
    10c8:	44 23       	and	r20, r20
    10ca:	32 f0       	brmi	.+12     	; 0x10d8 <fmod+0x40>
    10cc:	91 50       	subi	r25, 0x01	; 1
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	44 1f       	adc	r20, r20
    10d6:	d2 f7       	brpl	.-12     	; 0x10cc <fmod+0x34>
    10d8:	bb 27       	eor	r27, r27
    10da:	e9 1b       	sub	r30, r25
    10dc:	f5 0b       	sbc	r31, r21
    10de:	62 1b       	sub	r22, r18
    10e0:	73 0b       	sbc	r23, r19
    10e2:	84 0b       	sbc	r24, r20
    10e4:	b1 09       	sbc	r27, r1
    10e6:	b1 f2       	breq	.-84     	; 0x1094 <__floatsisf+0x88>
    10e8:	22 f4       	brpl	.+8      	; 0x10f2 <fmod+0x5a>
    10ea:	62 0f       	add	r22, r18
    10ec:	73 1f       	adc	r23, r19
    10ee:	84 1f       	adc	r24, r20
    10f0:	b1 1d       	adc	r27, r1
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	2a f0       	brmi	.+10     	; 0x1100 <fmod+0x68>
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	bb 1f       	adc	r27, r27
    10fe:	ef cf       	rjmp	.-34     	; 0x10de <fmod+0x46>
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	50 40       	sbci	r21, 0x00	; 0
    1104:	62 f0       	brmi	.+24     	; 0x111e <fmod+0x86>
    1106:	41 f0       	breq	.+16     	; 0x1118 <fmod+0x80>
    1108:	88 23       	and	r24, r24
    110a:	32 f0       	brmi	.+12     	; 0x1118 <fmod+0x80>
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	c1 f7       	brne	.-16     	; 0x1108 <fmod+0x70>
    1118:	93 95       	inc	r25
    111a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_mpack>
    111e:	86 95       	lsr	r24
    1120:	77 95       	ror	r23
    1122:	67 95       	ror	r22
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	d9 f7       	brne	.-10     	; 0x111e <fmod+0x86>
    1128:	f7 cf       	rjmp	.-18     	; 0x1118 <fmod+0x80>

0000112a <__fp_cmp>:
    112a:	99 0f       	add	r25, r25
    112c:	00 08       	sbc	r0, r0
    112e:	55 0f       	add	r21, r21
    1130:	aa 0b       	sbc	r26, r26
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	fe ef       	ldi	r31, 0xFE	; 254
    1136:	16 16       	cp	r1, r22
    1138:	17 06       	cpc	r1, r23
    113a:	e8 07       	cpc	r30, r24
    113c:	f9 07       	cpc	r31, r25
    113e:	c0 f0       	brcs	.+48     	; 0x1170 <__fp_cmp+0x46>
    1140:	12 16       	cp	r1, r18
    1142:	13 06       	cpc	r1, r19
    1144:	e4 07       	cpc	r30, r20
    1146:	f5 07       	cpc	r31, r21
    1148:	98 f0       	brcs	.+38     	; 0x1170 <__fp_cmp+0x46>
    114a:	62 1b       	sub	r22, r18
    114c:	73 0b       	sbc	r23, r19
    114e:	84 0b       	sbc	r24, r20
    1150:	95 0b       	sbc	r25, r21
    1152:	39 f4       	brne	.+14     	; 0x1162 <__fp_cmp+0x38>
    1154:	0a 26       	eor	r0, r26
    1156:	61 f0       	breq	.+24     	; 0x1170 <__fp_cmp+0x46>
    1158:	23 2b       	or	r18, r19
    115a:	24 2b       	or	r18, r20
    115c:	25 2b       	or	r18, r21
    115e:	21 f4       	brne	.+8      	; 0x1168 <__fp_cmp+0x3e>
    1160:	08 95       	ret
    1162:	0a 26       	eor	r0, r26
    1164:	09 f4       	brne	.+2      	; 0x1168 <__fp_cmp+0x3e>
    1166:	a1 40       	sbci	r26, 0x01	; 1
    1168:	a6 95       	lsr	r26
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	81 1d       	adc	r24, r1
    116e:	81 1d       	adc	r24, r1
    1170:	08 95       	ret

00001172 <__fp_inf>:
    1172:	97 f9       	bld	r25, 7
    1174:	9f 67       	ori	r25, 0x7F	; 127
    1176:	80 e8       	ldi	r24, 0x80	; 128
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	08 95       	ret

0000117e <__fp_mpack>:
    117e:	9f 3f       	cpi	r25, 0xFF	; 255
    1180:	31 f0       	breq	.+12     	; 0x118e <__fp_mpack_finite+0xc>

00001182 <__fp_mpack_finite>:
    1182:	91 50       	subi	r25, 0x01	; 1
    1184:	20 f4       	brcc	.+8      	; 0x118e <__fp_mpack_finite+0xc>
    1186:	87 95       	ror	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b7 95       	ror	r27
    118e:	88 0f       	add	r24, r24
    1190:	91 1d       	adc	r25, r1
    1192:	96 95       	lsr	r25
    1194:	87 95       	ror	r24
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret

0000119a <__fp_nan>:
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	80 ec       	ldi	r24, 0xC0	; 192
    119e:	08 95       	ret

000011a0 <__fp_pscA>:
    11a0:	00 24       	eor	r0, r0
    11a2:	0a 94       	dec	r0
    11a4:	16 16       	cp	r1, r22
    11a6:	17 06       	cpc	r1, r23
    11a8:	18 06       	cpc	r1, r24
    11aa:	09 06       	cpc	r0, r25
    11ac:	08 95       	ret

000011ae <__fp_pscB>:
    11ae:	00 24       	eor	r0, r0
    11b0:	0a 94       	dec	r0
    11b2:	12 16       	cp	r1, r18
    11b4:	13 06       	cpc	r1, r19
    11b6:	14 06       	cpc	r1, r20
    11b8:	05 06       	cpc	r0, r21
    11ba:	08 95       	ret

000011bc <__fp_round>:
    11bc:	09 2e       	mov	r0, r25
    11be:	03 94       	inc	r0
    11c0:	00 0c       	add	r0, r0
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <__fp_round+0xc>
    11c4:	88 23       	and	r24, r24
    11c6:	52 f0       	brmi	.+20     	; 0x11dc <__fp_round+0x20>
    11c8:	bb 0f       	add	r27, r27
    11ca:	40 f4       	brcc	.+16     	; 0x11dc <__fp_round+0x20>
    11cc:	bf 2b       	or	r27, r31
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <__fp_round+0x18>
    11d0:	60 ff       	sbrs	r22, 0
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <__fp_round+0x20>
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	08 95       	ret

000011de <__fp_split3>:
    11de:	57 fd       	sbrc	r21, 7
    11e0:	90 58       	subi	r25, 0x80	; 128
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	59 f0       	breq	.+22     	; 0x11fe <__fp_splitA+0x10>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	71 f0       	breq	.+28     	; 0x1208 <__fp_splitA+0x1a>
    11ec:	47 95       	ror	r20

000011ee <__fp_splitA>:
    11ee:	88 0f       	add	r24, r24
    11f0:	97 fb       	bst	r25, 7
    11f2:	99 1f       	adc	r25, r25
    11f4:	61 f0       	breq	.+24     	; 0x120e <__fp_splitA+0x20>
    11f6:	9f 3f       	cpi	r25, 0xFF	; 255
    11f8:	79 f0       	breq	.+30     	; 0x1218 <__fp_splitA+0x2a>
    11fa:	87 95       	ror	r24
    11fc:	08 95       	ret
    11fe:	12 16       	cp	r1, r18
    1200:	13 06       	cpc	r1, r19
    1202:	14 06       	cpc	r1, r20
    1204:	55 1f       	adc	r21, r21
    1206:	f2 cf       	rjmp	.-28     	; 0x11ec <__fp_split3+0xe>
    1208:	46 95       	lsr	r20
    120a:	f1 df       	rcall	.-30     	; 0x11ee <__fp_splitA>
    120c:	08 c0       	rjmp	.+16     	; 0x121e <__fp_splitA+0x30>
    120e:	16 16       	cp	r1, r22
    1210:	17 06       	cpc	r1, r23
    1212:	18 06       	cpc	r1, r24
    1214:	99 1f       	adc	r25, r25
    1216:	f1 cf       	rjmp	.-30     	; 0x11fa <__fp_splitA+0xc>
    1218:	86 95       	lsr	r24
    121a:	71 05       	cpc	r23, r1
    121c:	61 05       	cpc	r22, r1
    121e:	08 94       	sec
    1220:	08 95       	ret

00001222 <__fp_zero>:
    1222:	e8 94       	clt

00001224 <__fp_szero>:
    1224:	bb 27       	eor	r27, r27
    1226:	66 27       	eor	r22, r22
    1228:	77 27       	eor	r23, r23
    122a:	cb 01       	movw	r24, r22
    122c:	97 f9       	bld	r25, 7
    122e:	08 95       	ret

00001230 <__mulsf3>:
    1230:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3x>
    1234:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_round>
    1238:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_pscA>
    123c:	38 f0       	brcs	.+14     	; 0x124c <__mulsf3+0x1c>
    123e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_pscB>
    1242:	20 f0       	brcs	.+8      	; 0x124c <__mulsf3+0x1c>
    1244:	95 23       	and	r25, r21
    1246:	11 f0       	breq	.+4      	; 0x124c <__mulsf3+0x1c>
    1248:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_inf>
    124c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_nan>
    1250:	11 24       	eor	r1, r1
    1252:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>

00001256 <__mulsf3x>:
    1256:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_split3>
    125a:	70 f3       	brcs	.-36     	; 0x1238 <__mulsf3+0x8>

0000125c <__mulsf3_pse>:
    125c:	95 9f       	mul	r25, r21
    125e:	c1 f3       	breq	.-16     	; 0x1250 <__mulsf3+0x20>
    1260:	95 0f       	add	r25, r21
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	55 1f       	adc	r21, r21
    1266:	62 9f       	mul	r22, r18
    1268:	f0 01       	movw	r30, r0
    126a:	72 9f       	mul	r23, r18
    126c:	bb 27       	eor	r27, r27
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	63 9f       	mul	r22, r19
    1274:	aa 27       	eor	r26, r26
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	aa 1f       	adc	r26, r26
    127c:	64 9f       	mul	r22, r20
    127e:	66 27       	eor	r22, r22
    1280:	b0 0d       	add	r27, r0
    1282:	a1 1d       	adc	r26, r1
    1284:	66 1f       	adc	r22, r22
    1286:	82 9f       	mul	r24, r18
    1288:	22 27       	eor	r18, r18
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	73 9f       	mul	r23, r19
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	83 9f       	mul	r24, r19
    129a:	a0 0d       	add	r26, r0
    129c:	61 1d       	adc	r22, r1
    129e:	22 1f       	adc	r18, r18
    12a0:	74 9f       	mul	r23, r20
    12a2:	33 27       	eor	r19, r19
    12a4:	a0 0d       	add	r26, r0
    12a6:	61 1d       	adc	r22, r1
    12a8:	23 1f       	adc	r18, r19
    12aa:	84 9f       	mul	r24, r20
    12ac:	60 0d       	add	r22, r0
    12ae:	21 1d       	adc	r18, r1
    12b0:	82 2f       	mov	r24, r18
    12b2:	76 2f       	mov	r23, r22
    12b4:	6a 2f       	mov	r22, r26
    12b6:	11 24       	eor	r1, r1
    12b8:	9f 57       	subi	r25, 0x7F	; 127
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	9a f0       	brmi	.+38     	; 0x12e4 <__mulsf3_pse+0x88>
    12be:	f1 f0       	breq	.+60     	; 0x12fc <__mulsf3_pse+0xa0>
    12c0:	88 23       	and	r24, r24
    12c2:	4a f0       	brmi	.+18     	; 0x12d6 <__mulsf3_pse+0x7a>
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	bb 1f       	adc	r27, r27
    12ca:	66 1f       	adc	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	a9 f7       	brne	.-22     	; 0x12c0 <__mulsf3_pse+0x64>
    12d6:	9e 3f       	cpi	r25, 0xFE	; 254
    12d8:	51 05       	cpc	r21, r1
    12da:	80 f0       	brcs	.+32     	; 0x12fc <__mulsf3_pse+0xa0>
    12dc:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_inf>
    12e0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
    12e4:	5f 3f       	cpi	r21, 0xFF	; 255
    12e6:	e4 f3       	brlt	.-8      	; 0x12e0 <__mulsf3_pse+0x84>
    12e8:	98 3e       	cpi	r25, 0xE8	; 232
    12ea:	d4 f3       	brlt	.-12     	; 0x12e0 <__mulsf3_pse+0x84>
    12ec:	86 95       	lsr	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b7 95       	ror	r27
    12f4:	f7 95       	ror	r31
    12f6:	e7 95       	ror	r30
    12f8:	9f 5f       	subi	r25, 0xFF	; 255
    12fa:	c1 f7       	brne	.-16     	; 0x12ec <__mulsf3_pse+0x90>
    12fc:	fe 2b       	or	r31, r30
    12fe:	88 0f       	add	r24, r24
    1300:	91 1d       	adc	r25, r1
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	97 f9       	bld	r25, 7
    1308:	08 95       	ret

0000130a <__divmodhi4>:
    130a:	97 fb       	bst	r25, 7
    130c:	07 2e       	mov	r0, r23
    130e:	16 f4       	brtc	.+4      	; 0x1314 <__divmodhi4+0xa>
    1310:	00 94       	com	r0
    1312:	07 d0       	rcall	.+14     	; 0x1322 <__divmodhi4_neg1>
    1314:	77 fd       	sbrc	r23, 7
    1316:	09 d0       	rcall	.+18     	; 0x132a <__divmodhi4_neg2>
    1318:	0e 94 99 09 	call	0x1332	; 0x1332 <__udivmodhi4>
    131c:	07 fc       	sbrc	r0, 7
    131e:	05 d0       	rcall	.+10     	; 0x132a <__divmodhi4_neg2>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__divmodhi4_exit>

00001322 <__divmodhi4_neg1>:
    1322:	90 95       	com	r25
    1324:	81 95       	neg	r24
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	08 95       	ret

0000132a <__divmodhi4_neg2>:
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255

00001330 <__divmodhi4_exit>:
    1330:	08 95       	ret

00001332 <__udivmodhi4>:
    1332:	aa 1b       	sub	r26, r26
    1334:	bb 1b       	sub	r27, r27
    1336:	51 e1       	ldi	r21, 0x11	; 17
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <__udivmodhi4_ep>

0000133a <__udivmodhi4_loop>:
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	a6 17       	cp	r26, r22
    1340:	b7 07       	cpc	r27, r23
    1342:	10 f0       	brcs	.+4      	; 0x1348 <__udivmodhi4_ep>
    1344:	a6 1b       	sub	r26, r22
    1346:	b7 0b       	sbc	r27, r23

00001348 <__udivmodhi4_ep>:
    1348:	88 1f       	adc	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	5a 95       	dec	r21
    134e:	a9 f7       	brne	.-22     	; 0x133a <__udivmodhi4_loop>
    1350:	80 95       	com	r24
    1352:	90 95       	com	r25
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	08 95       	ret

0000135a <__tablejump2__>:
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	05 90       	lpm	r0, Z+
    1360:	f4 91       	lpm	r31, Z
    1362:	e0 2d       	mov	r30, r0
    1364:	09 94       	ijmp

00001366 <_exit>:
    1366:	f8 94       	cli

00001368 <__stop_program>:
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <__stop_program>
