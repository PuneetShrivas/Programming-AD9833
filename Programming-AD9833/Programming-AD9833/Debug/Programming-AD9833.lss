
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ebc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ebc  00000f50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800062  00800062  00000f52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c0  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000534  00000000  00000000  00002c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000031a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f08  00000000  00000000  00003956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000485e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_7>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_12>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	77 03       	mulsu	r23, r23

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	ec eb       	ldi	r30, 0xBC	; 188
  6a:	fe e0       	ldi	r31, 0x0E	; 14
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a2 36       	cpi	r26, 0x62	; 98
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a2 e6       	ldi	r26, 0x62	; 98
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a0 39       	cpi	r26, 0x90	; 144
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 56 07 	call	0xeac	; 0xeac <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  a2:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z8SPI_initv>:
{
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	UART_send(MSdata);
	UART_send(LSdata);
}
  aa:	81 ea       	ldi	r24, 0xA1	; 161
  ac:	87 bb       	out	0x17, r24	; 23
  ae:	81 e1       	ldi	r24, 0x11	; 17
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	89 ed       	ldi	r24, 0xD9	; 217
  b4:	8d b9       	out	0x0d, r24	; 13
  b6:	08 95       	ret

000000b8 <_Z9UART_initv>:
  b8:	10 bc       	out	0x20, r1	; 32
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	89 b9       	out	0x09, r24	; 9
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	8e e8       	ldi	r24, 0x8E	; 142
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <_Z12SPI_transferh>:
  c8:	8f b9       	out	0x0f, r24	; 15
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <_Z12SPI_transferh+0x2>
  ce:	08 95       	ret

000000d0 <_Z11SPI_write16t>:

void SPI_write16 (unsigned short data)    			//send a 16bit word and use f sync
{  
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PINB0);						    //F sync Low --> begin frame
  d4:	c0 98       	cbi	0x18, 0	; 24
	SPI_transfer(MSdata);							
  d6:	89 2f       	mov	r24, r25
  d8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	SPI_transfer(LSdata);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	PORTB |= (1<<PINB0);						    //F sync High --> End of frame
  e2:	c0 9a       	sbi	0x18, 0	; 24
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_Z10Set_AD9833fj>:

void Set_AD9833(float frequency, unsigned int phase)
{
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8a 01       	movw	r16, r20
	long FreqReg = (frequency*pow(2,28))/(float)Fmclk;	  //Calculate frequency to be sent to AD9833
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5d e4       	ldi	r21, 0x4D	; 77
 102:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 106:	20 e2       	ldi	r18, 0x20	; 32
 108:	3c eb       	ldi	r19, 0xBC	; 188
 10a:	4e eb       	ldi	r20, 0xBE	; 190
 10c:	5b e4       	ldi	r21, 0x4B	; 75
 10e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3>
 112:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);		   //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 116:	6b 01       	movw	r12, r22
 118:	7c 01       	movw	r14, r24
 11a:	cc 24       	eor	r12, r12
 11c:	20 ec       	ldi	r18, 0xC0	; 192
 11e:	d2 22       	and	r13, r18
 120:	2f e0       	ldi	r18, 0x0F	; 15
 122:	f2 22       	and	r15, r18
 124:	0b 2e       	mov	r0, r27
 126:	be e0       	ldi	r27, 0x0E	; 14
 128:	f5 94       	asr	r15
 12a:	e7 94       	ror	r14
 12c:	d7 94       	ror	r13
 12e:	c7 94       	ror	r12
 130:	ba 95       	dec	r27
 132:	d1 f7       	brne	.-12     	; 0x128 <_Z10Set_AD9833fj+0x40>
 134:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
 136:	eb 01       	movw	r28, r22
 138:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     									  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_write16(0x2100);								  //define waveform and set reset bit
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e2       	ldi	r25, 0x21	; 33
 13e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(LSB);									  //Write LSBs
 142:	ce 01       	movw	r24, r28
 144:	90 64       	ori	r25, 0x40	; 64
 146:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(MSB);									  //Write MSBs
 14a:	c6 01       	movw	r24, r12
 14c:	90 64       	ori	r25, 0x40	; 64
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	phase&=0x0FFF;
 152:	c8 01       	movw	r24, r16
 154:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;
	//SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_write16(phase);
 156:	90 6c       	ori	r25, 0xC0	; 192
 158:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(0x2000);                                                                                                                                                                                                                                                                                             
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e2       	ldi	r25, 0x20	; 32
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	df 90       	pop	r13
 172:	cf 90       	pop	r12
 174:	08 95       	ret

00000176 <_Z8getphasefff>:

unsigned int getphase(float pphase,float freq, float time)
{
 176:	4f 92       	push	r4
 178:	5f 92       	push	r5
 17a:	6f 92       	push	r6
 17c:	7f 92       	push	r7
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <_Z8getphasefff+0x22>
 198:	00 d0       	rcall	.+0      	; 0x19a <_Z8getphasefff+0x24>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	2b 01       	movw	r4, r22
 1a0:	3c 01       	movw	r6, r24
 1a2:	49 01       	movw	r8, r18
 1a4:	5a 01       	movw	r10, r20
 1a6:	67 01       	movw	r12, r14
 1a8:	78 01       	movw	r14, r16
	time/=1000000;
	pphase/=2048/PI;
	float ph=((fmod(time,(1/freq))*2*PI*freq)+pphase)*2048/PI;
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	9f e3       	ldi	r25, 0x3F	; 63
 1b2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3>
 1b6:	69 83       	std	Y+1, r22	; 0x01
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	34 e2       	ldi	r19, 0x24	; 36
 1c2:	44 e7       	ldi	r20, 0x74	; 116
 1c4:	59 e4       	ldi	r21, 0x49	; 73
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3>
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	3a 81       	ldd	r19, Y+2	; 0x02
 1d2:	4b 81       	ldd	r20, Y+3	; 0x03
 1d4:	5c 81       	ldd	r21, Y+4	; 0x04
 1d6:	0e 94 41 06 	call	0xc82	; 0xc82 <fmod>
	return (unsigned int) ph;
 1da:	9b 01       	movw	r18, r22
 1dc:	ac 01       	movw	r20, r24
 1de:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 1e2:	20 ed       	ldi	r18, 0xD0	; 208
 1e4:	3f e0       	ldi	r19, 0x0F	; 15
 1e6:	49 e4       	ldi	r20, 0x49	; 73
 1e8:	50 e4       	ldi	r21, 0x40	; 64
 1ea:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 1ee:	a5 01       	movw	r20, r10
 1f0:	94 01       	movw	r18, r8
 1f2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 1f6:	6b 01       	movw	r12, r22
 1f8:	7c 01       	movw	r14, r24
 1fa:	2c e8       	ldi	r18, 0x8C	; 140
 1fc:	39 ef       	ldi	r19, 0xF9	; 249
 1fe:	42 e2       	ldi	r20, 0x22	; 34
 200:	54 e4       	ldi	r21, 0x44	; 68
 202:	c3 01       	movw	r24, r6
 204:	b2 01       	movw	r22, r4
 206:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3>
 20a:	9b 01       	movw	r18, r22
 20c:	ac 01       	movw	r20, r24
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	55 e4       	ldi	r21, 0x45	; 69
 21e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 222:	20 ed       	ldi	r18, 0xD0	; 208
 224:	3f e0       	ldi	r19, 0x0F	; 15
 226:	49 e4       	ldi	r20, 0x49	; 73
 228:	50 e4       	ldi	r21, 0x40	; 64
 22a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3>
 22e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fixunssfsi>
}
 232:	cb 01       	movw	r24, r22
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	08 95       	ret

0000025e <main>:
float freqRY =  1500 + (RY * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
float freqBY =  1500 + (BY * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)

int main(void)
{
	UART_init();
 25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9UART_initv>
	SPI_init();
 262:	0e 94 55 00 	call	0xaa	; 0xaa <_Z8SPI_initv>
	DDRA=(1<<PINA0)|(1<<PINA1)|(1<<PINA2);			//output pins for LEDs
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	8a bb       	out	0x1a, r24	; 26
	TCCR1A=0;
 26a:	1f bc       	out	0x2f, r1	; 47
	PORTA=0;
 26c:	1b ba       	out	0x1b, r1	; 27
	TCCR0=(1<<CS00)|(1<<CS01);
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	83 bf       	out	0x33, r24	; 51
// 		UART_write16(cont);
// 	}
// }

	
	SPI_write16(0x100);								//Reset AD9833 
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	8f e7       	ldi	r24, 0x7F	; 127
 27e:	96 e1       	ldi	r25, 0x16	; 22
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x22>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x2c>
 28a:	00 00       	nop

	//VIS Code
	{//leader tone
	_delay_ms(500);
	Set_AD9833(1900,0);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	70 e8       	ldi	r23, 0x80	; 128
 294:	8d ee       	ldi	r24, 0xED	; 237
 296:	94 e4       	ldi	r25, 0x44	; 68
 298:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	8f e7       	ldi	r24, 0x7F	; 127
 2a0:	9d e0       	ldi	r25, 0x0D	; 13
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x44>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x4e>
 2ac:	00 00       	nop
	_delay_ms(300);
	//break
	Set_AD9833(1200,0);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	86 e9       	ldi	r24, 0x96	; 150
 2b8:	94 e4       	ldi	r25, 0x44	; 68
 2ba:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	9f e8       	ldi	r25, 0x8F	; 143
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x64>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x6a>
 2c8:	00 00       	nop
	_delay_ms(10);
	//leader
	Set_AD9833(1900,0);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e8       	ldi	r23, 0x80	; 128
 2d2:	8d ee       	ldi	r24, 0xED	; 237
 2d4:	94 e4       	ldi	r25, 0x44	; 68
 2d6:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	2f e7       	ldi	r18, 0x7F	; 127
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	91 50       	subi	r25, 0x01	; 1
 2e2:	20 40       	sbci	r18, 0x00	; 0
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x82>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x8c>
 2ea:	00 00       	nop
	_delay_ms(300);
	//VIS start bit
	Set_AD9833(1200,0);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	86 e9       	ldi	r24, 0x96	; 150
 2f6:	94 e4       	ldi	r25, 0x44	; 68
 2f8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2fc:	94 e1       	ldi	r25, 0x14	; 20
 2fe:	2e e4       	ldi	r18, 0x4E	; 78
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	91 50       	subi	r25, 0x01	; 1
 304:	20 40       	sbci	r18, 0x00	; 0
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0xa4>
 30a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	84 e1       	ldi	r24, 0x14	; 20
 30e:	9c e0       	ldi	r25, 0x0C	; 12
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0xb2>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0xb8>
 316:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//PD90 VIS code = 99d = 0b1100011
	//bit 0=1
	Set_AD9833(1100,0);
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e8       	ldi	r23, 0x80	; 128
 320:	89 e8       	ldi	r24, 0x89	; 137
 322:	94 e4       	ldi	r25, 0x44	; 68
 324:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	94 e1       	ldi	r25, 0x14	; 20
 32a:	2e e4       	ldi	r18, 0x4E	; 78
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	91 50       	subi	r25, 0x01	; 1
 330:	20 40       	sbci	r18, 0x00	; 0
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0xd0>
 336:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	84 e1       	ldi	r24, 0x14	; 20
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0xde>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xe4>
 342:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 1=1
	Set_AD9833(1100,0);
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e8       	ldi	r23, 0x80	; 128
 34c:	89 e8       	ldi	r24, 0x89	; 137
 34e:	94 e4       	ldi	r25, 0x44	; 68
 350:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	94 e1       	ldi	r25, 0x14	; 20
 356:	2e e4       	ldi	r18, 0x4E	; 78
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	91 50       	subi	r25, 0x01	; 1
 35c:	20 40       	sbci	r18, 0x00	; 0
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0xfc>
 362:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	84 e1       	ldi	r24, 0x14	; 20
 366:	9c e0       	ldi	r25, 0x0C	; 12
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0x10a>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x110>
 36e:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 2=0
	Set_AD9833(1300,0);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e8       	ldi	r23, 0x80	; 128
 378:	82 ea       	ldi	r24, 0xA2	; 162
 37a:	94 e4       	ldi	r25, 0x44	; 68
 37c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	94 e1       	ldi	r25, 0x14	; 20
 382:	2e e4       	ldi	r18, 0x4E	; 78
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	91 50       	subi	r25, 0x01	; 1
 388:	20 40       	sbci	r18, 0x00	; 0
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x128>
 38e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	84 e1       	ldi	r24, 0x14	; 20
 392:	9c e0       	ldi	r25, 0x0C	; 12
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x136>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x13c>
 39a:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 3=0
	Set_AD9833(1300,0);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e8       	ldi	r23, 0x80	; 128
 3a4:	82 ea       	ldi	r24, 0xA2	; 162
 3a6:	94 e4       	ldi	r25, 0x44	; 68
 3a8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	94 e1       	ldi	r25, 0x14	; 20
 3ae:	2e e4       	ldi	r18, 0x4E	; 78
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	20 40       	sbci	r18, 0x00	; 0
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0x154>
 3ba:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	84 e1       	ldi	r24, 0x14	; 20
 3be:	9c e0       	ldi	r25, 0x0C	; 12
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <main+0x162>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x168>
 3c6:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 4=0
	Set_AD9833(1300,0);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e8       	ldi	r23, 0x80	; 128
 3d0:	82 ea       	ldi	r24, 0xA2	; 162
 3d2:	94 e4       	ldi	r25, 0x44	; 68
 3d4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	94 e1       	ldi	r25, 0x14	; 20
 3da:	2e e4       	ldi	r18, 0x4E	; 78
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	91 50       	subi	r25, 0x01	; 1
 3e0:	20 40       	sbci	r18, 0x00	; 0
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x180>
 3e6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e8:	84 e1       	ldi	r24, 0x14	; 20
 3ea:	9c e0       	ldi	r25, 0x0C	; 12
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <main+0x18e>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <main+0x194>
 3f2:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 5=1
	Set_AD9833(1100,0);
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e8       	ldi	r23, 0x80	; 128
 3fc:	89 e8       	ldi	r24, 0x89	; 137
 3fe:	94 e4       	ldi	r25, 0x44	; 68
 400:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 404:	94 e1       	ldi	r25, 0x14	; 20
 406:	2e e4       	ldi	r18, 0x4E	; 78
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	91 50       	subi	r25, 0x01	; 1
 40c:	20 40       	sbci	r18, 0x00	; 0
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	84 e1       	ldi	r24, 0x14	; 20
 416:	9c e0       	ldi	r25, 0x0C	; 12
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 6=1
	Set_AD9833(1100,0);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e8       	ldi	r23, 0x80	; 128
 428:	89 e8       	ldi	r24, 0x89	; 137
 42a:	94 e4       	ldi	r25, 0x44	; 68
 42c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	94 e1       	ldi	r25, 0x14	; 20
 432:	2e e4       	ldi	r18, 0x4E	; 78
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	91 50       	subi	r25, 0x01	; 1
 438:	20 40       	sbci	r18, 0x00	; 0
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 440:	84 e1       	ldi	r24, 0x14	; 20
 442:	9c e0       	ldi	r25, 0x0C	; 12
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//Parity bit
	Set_AD9833(1300,0);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e8       	ldi	r23, 0x80	; 128
 454:	82 ea       	ldi	r24, 0xA2	; 162
 456:	94 e4       	ldi	r25, 0x44	; 68
 458:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	94 e1       	ldi	r25, 0x14	; 20
 45e:	2e e4       	ldi	r18, 0x4E	; 78
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	91 50       	subi	r25, 0x01	; 1
 464:	20 40       	sbci	r18, 0x00	; 0
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46c:	84 e1       	ldi	r24, 0x14	; 20
 46e:	9c e0       	ldi	r25, 0x0C	; 12
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 476:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//stop bit
	Set_AD9833(1200,0);
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	86 e9       	ldi	r24, 0x96	; 150
 482:	94 e4       	ldi	r25, 0x44	; 68
 484:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 488:	94 e1       	ldi	r25, 0x14	; 20
 48a:	2e e4       	ldi	r18, 0x4E	; 78
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	20 40       	sbci	r18, 0x00	; 0
 492:	80 40       	sbci	r24, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 496:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 498:	84 e1       	ldi	r24, 0x14	; 20
 49a:	9c e0       	ldi	r25, 0x0C	; 12
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
 4a4:	c0 e8       	ldi	r28, 0x80	; 128
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
// 	
//image data
	for (int i=1;i<=128;i++)
	{
	//Sync Pulse
	Set_AD9833(1200,0);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	86 e9       	ldi	r24, 0x96	; 150
 4b2:	94 e4       	ldi	r25, 0x44	; 68
 4b4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	91 ee       	ldi	r25, 0xE1	; 225
 4ba:	2a ed       	ldi	r18, 0xDA	; 218
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	91 50       	subi	r25, 0x01	; 1
 4c0:	20 40       	sbci	r18, 0x00	; 0
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c6:	88 eb       	ldi	r24, 0xB8	; 184
 4c8:	99 e0       	ldi	r25, 0x09	; 9
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4ce:	00 00       	nop
	_delay_ms(19);
	_delay_us(675);
	//Porch
	Set_AD9833(1500,0);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e8       	ldi	r23, 0x80	; 128
 4d8:	8b eb       	ldi	r24, 0xBB	; 187
 4da:	94 e4       	ldi	r25, 0x44	; 68
 4dc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	86 e6       	ldi	r24, 0x66	; 102
 4e2:	9e e0       	ldi	r25, 0x0E	; 14
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	8b ed       	ldi	r24, 0xDB	; 219
 4ec:	9a e0       	ldi	r25, 0x0A	; 10
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
	//single color using interrupts
// 	
// 	{
// 		
	//Y Scan odd line
	cont=0;	
 4f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <cont+0x1>
 4f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <cont>
	global_frequency=freqY;	
 4fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <freqY>
 500:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <freqY+0x1>
 504:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <freqY+0x2>
 508:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <freqY+0x3>
 50c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <global_frequency>
 510:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <global_frequency+0x1>
 514:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <global_frequency+0x2>
 518:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <global_frequency+0x3>
	sei();
 51c:	78 94       	sei
	TCCR1B|=(1<<CS10)|(1<<WGM12);
 51e:	8e b5       	in	r24, 0x2e	; 46
 520:	89 60       	ori	r24, 0x09	; 9
 522:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);
 524:	89 b7       	in	r24, 0x39	; 57
 526:	80 61       	ori	r24, 0x10	; 16
 528:	89 bf       	out	0x39, r24	; 57
	//TCNT1=65534;
	OCR1A=TEMP;
 52a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <TEMP>
 52e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TEMP+0x1>
 532:	9b bd       	out	0x2b, r25	; 43
 534:	8a bd       	out	0x2a, r24	; 42
	while(cont<1280);
 536:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <cont>
 53a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <cont+0x1>
 53e:	81 15       	cp	r24, r1
 540:	95 40       	sbci	r25, 0x05	; 5
 542:	cc f3       	brlt	.-14     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
	cli();
 544:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
 546:	89 b7       	in	r24, 0x39	; 57
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
 54c:	1e bc       	out	0x2e, r1	; 46
 54e:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(839);
	}

// 	
//image data
	for (int i=1;i<=128;i++)
 550:	09 f0       	breq	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 552:	aa cf       	rjmp	.-172    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
// // 		//Y Scan even line
// // 		Set_AD9833(freqY,0);
// // 		_delay_us(170079.41);
// }
}	
    Set_AD9833(0x00,0);
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	cb 01       	movw	r24, r22
 55e:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 562:	ff cf       	rjmp	.-2      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>

00000564 <__vector_7>:
	{		
	}
}

ISR(TIMER1_COMPA_vect)
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	8f 92       	push	r8
 570:	9f 92       	push	r9
 572:	af 92       	push	r10
 574:	bf 92       	push	r11
 576:	ef 92       	push	r14
 578:	ff 92       	push	r15
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	2f 93       	push	r18
 580:	3f 93       	push	r19
 582:	4f 93       	push	r20
 584:	5f 93       	push	r21
 586:	6f 93       	push	r22
 588:	7f 93       	push	r23
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
 58e:	af 93       	push	r26
 590:	bf 93       	push	r27
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
// 	contprev=contnext;
// 	contnext=TCNT0;
	//UART_send(contnext);
	
	
 	prev_freq = global_frequency;
 596:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <global_frequency>
 59a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <global_frequency+0x1>
 59e:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <global_frequency+0x2>
 5a2:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <global_frequency+0x3>
 5a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <prev_freq>
 5aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <prev_freq+0x1>
 5ae:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <prev_freq+0x2>
 5b2:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <prev_freq+0x3>
	if(cont==320) global_frequency = freqRY;
 5b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <cont>
 5ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <cont+0x1>
 5be:	80 34       	cpi	r24, 0x40	; 64
 5c0:	91 40       	sbci	r25, 0x01	; 1
 5c2:	89 f4       	brne	.+34     	; 0x5e6 <__vector_7+0x82>
 5c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <freqRY>
 5c8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <freqRY+0x1>
 5cc:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <freqRY+0x2>
 5d0:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <freqRY+0x3>
 5d4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <global_frequency>
 5d8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <global_frequency+0x1>
 5dc:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <global_frequency+0x2>
 5e0:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <global_frequency+0x3>
 5e4:	2f c0       	rjmp	.+94     	; 0x644 <__vector_7+0xe0>
	else if(cont==640) global_frequency = freqBY;
 5e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <cont>
 5ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <cont+0x1>
 5ee:	80 38       	cpi	r24, 0x80	; 128
 5f0:	92 40       	sbci	r25, 0x02	; 2
 5f2:	89 f4       	brne	.+34     	; 0x616 <__vector_7+0xb2>
 5f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5f8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5fc:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 600:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 604:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <global_frequency>
 608:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <global_frequency+0x1>
 60c:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <global_frequency+0x2>
 610:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <global_frequency+0x3>
 614:	17 c0       	rjmp	.+46     	; 0x644 <__vector_7+0xe0>
	else if(cont==960) global_frequency = freqY;
 616:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <cont>
 61a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <cont+0x1>
 61e:	80 3c       	cpi	r24, 0xC0	; 192
 620:	93 40       	sbci	r25, 0x03	; 3
 622:	81 f4       	brne	.+32     	; 0x644 <__vector_7+0xe0>
 624:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <freqY>
 628:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <freqY+0x1>
 62c:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <freqY+0x2>
 630:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <freqY+0x3>
 634:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <global_frequency>
 638:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <global_frequency+0x1>
 63c:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <global_frequency+0x2>
 640:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <global_frequency+0x3>
	next_phase = getphase(prev_phase,prev_freq,532);
 644:	80 90 86 00 	lds	r8, 0x0086	; 0x800086 <prev_freq>
 648:	90 90 87 00 	lds	r9, 0x0087	; 0x800087 <prev_freq+0x1>
 64c:	a0 90 88 00 	lds	r10, 0x0088	; 0x800088 <prev_freq+0x2>
 650:	b0 90 89 00 	lds	r11, 0x0089	; 0x800089 <prev_freq+0x3>
 654:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <prev_phase>
 658:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <prev_phase+0x1>
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__floatunsisf>
 664:	e1 2c       	mov	r14, r1
 666:	f1 2c       	mov	r15, r1
 668:	05 e0       	ldi	r16, 0x05	; 5
 66a:	14 e4       	ldi	r17, 0x44	; 68
 66c:	a5 01       	movw	r20, r10
 66e:	94 01       	movw	r18, r8
 670:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8getphasefff>
 674:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <next_phase+0x1>
 678:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <next_phase>
	cont++;
 67c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <cont>
 680:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <cont+0x1>
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <cont+0x1>
 68a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <cont>
	Set_AD9833(global_frequency,next_phase);
 68e:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <next_phase>
 692:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <next_phase+0x1>
 696:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <global_frequency>
 69a:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <global_frequency+0x1>
 69e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <global_frequency+0x2>
 6a2:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <global_frequency+0x3>
 6a6:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	//UART_send(cont);
// 	//add frequency retrieval function here
// 	if(prev_freq==global_frequency) ;
// 	else {}
 	prev_phase=next_phase;
 6aa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <next_phase>
 6ae:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <next_phase+0x1>
 6b2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <prev_phase+0x1>
 6b6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <prev_phase>
}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	ff 90       	pop	r15
 6d8:	ef 90       	pop	r14
 6da:	bf 90       	pop	r11
 6dc:	af 90       	pop	r10
 6de:	9f 90       	pop	r9
 6e0:	8f 90       	pop	r8
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <__vector_12>:
	
 6ec:	18 95       	reti

000006ee <_GLOBAL__sub_I_TEMP>:
 6ee:	4f 92       	push	r4
 6f0:	5f 92       	push	r5
 6f2:	6f 92       	push	r6
 6f4:	7f 92       	push	r7
 6f6:	8f 92       	push	r8
 6f8:	9f 92       	push	r9
 6fa:	af 92       	push	r10
 6fc:	bf 92       	push	r11
 6fe:	cf 92       	push	r12
 700:	df 92       	push	r13
 702:	ef 92       	push	r14
 704:	ff 92       	push	r15
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	28 97       	sbiw	r28, 0x08	; 8
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
#include <avr/interrupt.h>
#include <util/atomic.h>


int TEMP = ((((F_CPU)/(TIMER1_PRESCALER*1000000))*557)-1);			//Counter Cycles for required time
int TICKS = 65535-TEMP;												//Value for TCNT1 to implement timing by overflow
 71a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <TEMP>
 71e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TEMP+0x1>
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <TICKS+0x1>
 72a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <TICKS>
	return (unsigned int) ph;
}

//color conversion from RGB to Y/RY/BY
int R=0,G=0,B=0;
float Y = 16.0 + (.003906 * ((65.738 * R) + (129.057 * G) + (25.064 * B)));
 72e:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <R>
 732:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <R+0x1>
 736:	07 2e       	mov	r0, r23
 738:	00 0c       	add	r0, r0
 73a:	88 0b       	sbc	r24, r24
 73c:	99 0b       	sbc	r25, r25
 73e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatsisf>
 742:	69 83       	std	Y+1, r22	; 0x01
 744:	7a 83       	std	Y+2, r23	; 0x02
 746:	8b 83       	std	Y+3, r24	; 0x03
 748:	9c 83       	std	Y+4, r25	; 0x04
 74a:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <G>
 74e:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <G+0x1>
 752:	07 2e       	mov	r0, r23
 754:	00 0c       	add	r0, r0
 756:	88 0b       	sbc	r24, r24
 758:	99 0b       	sbc	r25, r25
 75a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatsisf>
 75e:	6d 83       	std	Y+5, r22	; 0x05
 760:	7e 83       	std	Y+6, r23	; 0x06
 762:	8f 83       	std	Y+7, r24	; 0x07
 764:	98 87       	std	Y+8, r25	; 0x08
 766:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <B>
 76a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <B+0x1>
 76e:	07 2e       	mov	r0, r23
 770:	00 0c       	add	r0, r0
 772:	88 0b       	sbc	r24, r24
 774:	99 0b       	sbc	r25, r25
 776:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__floatsisf>
 77a:	6b 01       	movw	r12, r22
 77c:	7c 01       	movw	r14, r24
 77e:	2b ed       	ldi	r18, 0xDB	; 219
 780:	39 e7       	ldi	r19, 0x79	; 121
 782:	43 e8       	ldi	r20, 0x83	; 131
 784:	52 e4       	ldi	r21, 0x42	; 66
 786:	69 81       	ldd	r22, Y+1	; 0x01
 788:	7a 81       	ldd	r23, Y+2	; 0x02
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	9c 81       	ldd	r25, Y+4	; 0x04
 78e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 792:	4b 01       	movw	r8, r22
 794:	5c 01       	movw	r10, r24
 796:	28 e9       	ldi	r18, 0x98	; 152
 798:	3e e0       	ldi	r19, 0x0E	; 14
 79a:	41 e0       	ldi	r20, 0x01	; 1
 79c:	53 e4       	ldi	r21, 0x43	; 67
 79e:	6d 81       	ldd	r22, Y+5	; 0x05
 7a0:	7e 81       	ldd	r23, Y+6	; 0x06
 7a2:	8f 81       	ldd	r24, Y+7	; 0x07
 7a4:	98 85       	ldd	r25, Y+8	; 0x08
 7a6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 7aa:	9b 01       	movw	r18, r22
 7ac:	ac 01       	movw	r20, r24
 7ae:	c5 01       	movw	r24, r10
 7b0:	b4 01       	movw	r22, r8
 7b2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 7b6:	4b 01       	movw	r8, r22
 7b8:	5c 01       	movw	r10, r24
 7ba:	22 e1       	ldi	r18, 0x12	; 18
 7bc:	33 e8       	ldi	r19, 0x83	; 131
 7be:	48 ec       	ldi	r20, 0xC8	; 200
 7c0:	51 e4       	ldi	r21, 0x41	; 65
 7c2:	c7 01       	movw	r24, r14
 7c4:	b6 01       	movw	r22, r12
 7c6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 7ca:	9b 01       	movw	r18, r22
 7cc:	ac 01       	movw	r20, r24
 7ce:	c5 01       	movw	r24, r10
 7d0:	b4 01       	movw	r22, r8
 7d2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 7d6:	2e ec       	ldi	r18, 0xCE	; 206
 7d8:	3b ef       	ldi	r19, 0xFB	; 251
 7da:	4f e7       	ldi	r20, 0x7F	; 127
 7dc:	5b e3       	ldi	r21, 0x3B	; 59
 7de:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	40 e8       	ldi	r20, 0x80	; 128
 7e8:	51 e4       	ldi	r21, 0x41	; 65
 7ea:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 7ee:	2b 01       	movw	r4, r22
 7f0:	3c 01       	movw	r6, r24
 7f2:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <Y>
 7f6:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <Y+0x1>
 7fa:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Y+0x2>
 7fe:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Y+0x3>
float RY = 128.0 + (.003906 * ((112.439 * R) + (-94.154 * G) + (-18.285 * B)));
 802:	25 ec       	ldi	r18, 0xC5	; 197
 804:	30 ee       	ldi	r19, 0xE0	; 224
 806:	40 ee       	ldi	r20, 0xE0	; 224
 808:	52 e4       	ldi	r21, 0x42	; 66
 80a:	69 81       	ldd	r22, Y+1	; 0x01
 80c:	7a 81       	ldd	r23, Y+2	; 0x02
 80e:	8b 81       	ldd	r24, Y+3	; 0x03
 810:	9c 81       	ldd	r25, Y+4	; 0x04
 812:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 816:	4b 01       	movw	r8, r22
 818:	5c 01       	movw	r10, r24
 81a:	29 ed       	ldi	r18, 0xD9	; 217
 81c:	3e e4       	ldi	r19, 0x4E	; 78
 81e:	4c eb       	ldi	r20, 0xBC	; 188
 820:	52 ec       	ldi	r21, 0xC2	; 194
 822:	6d 81       	ldd	r22, Y+5	; 0x05
 824:	7e 81       	ldd	r23, Y+6	; 0x06
 826:	8f 81       	ldd	r24, Y+7	; 0x07
 828:	98 85       	ldd	r25, Y+8	; 0x08
 82a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 82e:	9b 01       	movw	r18, r22
 830:	ac 01       	movw	r20, r24
 832:	c5 01       	movw	r24, r10
 834:	b4 01       	movw	r22, r8
 836:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 83a:	4b 01       	movw	r8, r22
 83c:	5c 01       	movw	r10, r24
 83e:	2e ea       	ldi	r18, 0xAE	; 174
 840:	37 e4       	ldi	r19, 0x47	; 71
 842:	42 e9       	ldi	r20, 0x92	; 146
 844:	51 ec       	ldi	r21, 0xC1	; 193
 846:	c7 01       	movw	r24, r14
 848:	b6 01       	movw	r22, r12
 84a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 84e:	9b 01       	movw	r18, r22
 850:	ac 01       	movw	r20, r24
 852:	c5 01       	movw	r24, r10
 854:	b4 01       	movw	r22, r8
 856:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 85a:	2e ec       	ldi	r18, 0xCE	; 206
 85c:	3b ef       	ldi	r19, 0xFB	; 251
 85e:	4f e7       	ldi	r20, 0x7F	; 127
 860:	5b e3       	ldi	r21, 0x3B	; 59
 862:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 866:	20 e0       	ldi	r18, 0x00	; 0
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	40 e0       	ldi	r20, 0x00	; 0
 86c:	53 e4       	ldi	r21, 0x43	; 67
 86e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 872:	4b 01       	movw	r8, r22
 874:	5c 01       	movw	r10, r24
 876:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <RY>
 87a:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <RY+0x1>
 87e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <RY+0x2>
 882:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <RY+0x3>
float BY = 128.0 + (.003906 * ((-37.945 * R) + (-74.494 * G) + (112.439 * B)));
 886:	2e ea       	ldi	r18, 0xAE	; 174
 888:	37 ec       	ldi	r19, 0xC7	; 199
 88a:	47 e1       	ldi	r20, 0x17	; 23
 88c:	52 ec       	ldi	r21, 0xC2	; 194
 88e:	69 81       	ldd	r22, Y+1	; 0x01
 890:	7a 81       	ldd	r23, Y+2	; 0x02
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	9c 81       	ldd	r25, Y+4	; 0x04
 896:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 89a:	69 83       	std	Y+1, r22	; 0x01
 89c:	7a 83       	std	Y+2, r23	; 0x02
 89e:	8b 83       	std	Y+3, r24	; 0x03
 8a0:	9c 83       	std	Y+4, r25	; 0x04
 8a2:	2e ee       	ldi	r18, 0xEE	; 238
 8a4:	3c ef       	ldi	r19, 0xFC	; 252
 8a6:	44 e9       	ldi	r20, 0x94	; 148
 8a8:	52 ec       	ldi	r21, 0xC2	; 194
 8aa:	6d 81       	ldd	r22, Y+5	; 0x05
 8ac:	7e 81       	ldd	r23, Y+6	; 0x06
 8ae:	8f 81       	ldd	r24, Y+7	; 0x07
 8b0:	98 85       	ldd	r25, Y+8	; 0x08
 8b2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	69 81       	ldd	r22, Y+1	; 0x01
 8bc:	7a 81       	ldd	r23, Y+2	; 0x02
 8be:	8b 81       	ldd	r24, Y+3	; 0x03
 8c0:	9c 81       	ldd	r25, Y+4	; 0x04
 8c2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 8c6:	69 83       	std	Y+1, r22	; 0x01
 8c8:	7a 83       	std	Y+2, r23	; 0x02
 8ca:	8b 83       	std	Y+3, r24	; 0x03
 8cc:	9c 83       	std	Y+4, r25	; 0x04
 8ce:	25 ec       	ldi	r18, 0xC5	; 197
 8d0:	30 ee       	ldi	r19, 0xE0	; 224
 8d2:	40 ee       	ldi	r20, 0xE0	; 224
 8d4:	52 e4       	ldi	r21, 0x42	; 66
 8d6:	c7 01       	movw	r24, r14
 8d8:	b6 01       	movw	r22, r12
 8da:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 8de:	9b 01       	movw	r18, r22
 8e0:	ac 01       	movw	r20, r24
 8e2:	69 81       	ldd	r22, Y+1	; 0x01
 8e4:	7a 81       	ldd	r23, Y+2	; 0x02
 8e6:	8b 81       	ldd	r24, Y+3	; 0x03
 8e8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ea:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 8ee:	2e ec       	ldi	r18, 0xCE	; 206
 8f0:	3b ef       	ldi	r19, 0xFB	; 251
 8f2:	4f e7       	ldi	r20, 0x7F	; 127
 8f4:	5b e3       	ldi	r21, 0x3B	; 59
 8f6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 8fa:	20 e0       	ldi	r18, 0x00	; 0
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	53 e4       	ldi	r21, 0x43	; 67
 902:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 906:	6b 01       	movw	r12, r22
 908:	7c 01       	movw	r14, r24
 90a:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <BY>
 90e:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <BY+0x1>
 912:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <BY+0x2>
 916:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <BY+0x3>
//frequency calculation and documented values
float freqY  =  1500 + (Y * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
 91a:	29 ec       	ldi	r18, 0xC9	; 201
 91c:	38 ec       	ldi	r19, 0xC8	; 200
 91e:	48 e4       	ldi	r20, 0x48	; 72
 920:	50 e4       	ldi	r21, 0x40	; 64
 922:	c3 01       	movw	r24, r6
 924:	b2 01       	movw	r22, r4
 926:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e8       	ldi	r19, 0x80	; 128
 92e:	4b eb       	ldi	r20, 0xBB	; 187
 930:	54 e4       	ldi	r21, 0x44	; 68
 932:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 936:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <freqY>
 93a:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <freqY+0x1>
 93e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <freqY+0x2>
 942:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <freqY+0x3>
float freqRY =  1500 + (RY * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
 946:	29 ec       	ldi	r18, 0xC9	; 201
 948:	38 ec       	ldi	r19, 0xC8	; 200
 94a:	48 e4       	ldi	r20, 0x48	; 72
 94c:	50 e4       	ldi	r21, 0x40	; 64
 94e:	c5 01       	movw	r24, r10
 950:	b4 01       	movw	r22, r8
 952:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	30 e8       	ldi	r19, 0x80	; 128
 95a:	4b eb       	ldi	r20, 0xBB	; 187
 95c:	54 e4       	ldi	r21, 0x44	; 68
 95e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 962:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <freqRY>
 966:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <freqRY+0x1>
 96a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <freqRY+0x2>
 96e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <freqRY+0x3>
float freqBY =  1500 + (BY * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
 972:	29 ec       	ldi	r18, 0xC9	; 201
 974:	38 ec       	ldi	r19, 0xC8	; 200
 976:	48 e4       	ldi	r20, 0x48	; 72
 978:	50 e4       	ldi	r21, 0x40	; 64
 97a:	c7 01       	movw	r24, r14
 97c:	b6 01       	movw	r22, r12
 97e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3>
 982:	20 e0       	ldi	r18, 0x00	; 0
 984:	30 e8       	ldi	r19, 0x80	; 128
 986:	4b eb       	ldi	r20, 0xBB	; 187
 988:	54 e4       	ldi	r21, 0x44	; 68
 98a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__addsf3>
 98e:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
 992:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
 996:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
 99a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>
// 	if(prev_freq==global_frequency) ;
// 	else {}
 	prev_phase=next_phase;
}
	
 99e:	28 96       	adiw	r28, 0x08	; 8
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	ff 90       	pop	r15
 9b0:	ef 90       	pop	r14
 9b2:	df 90       	pop	r13
 9b4:	cf 90       	pop	r12
 9b6:	bf 90       	pop	r11
 9b8:	af 90       	pop	r10
 9ba:	9f 90       	pop	r9
 9bc:	8f 90       	pop	r8
 9be:	7f 90       	pop	r7
 9c0:	6f 90       	pop	r6
 9c2:	5f 90       	pop	r5
 9c4:	4f 90       	pop	r4
 9c6:	08 95       	ret

000009c8 <__subsf3>:
 9c8:	50 58       	subi	r21, 0x80	; 128

000009ca <__addsf3>:
 9ca:	bb 27       	eor	r27, r27
 9cc:	aa 27       	eor	r26, r26
 9ce:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3x>
 9d2:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_round>
 9d6:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscA>
 9da:	38 f0       	brcs	.+14     	; 0x9ea <__addsf3+0x20>
 9dc:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_pscB>
 9e0:	20 f0       	brcs	.+8      	; 0x9ea <__addsf3+0x20>
 9e2:	39 f4       	brne	.+14     	; 0x9f2 <__addsf3+0x28>
 9e4:	9f 3f       	cpi	r25, 0xFF	; 255
 9e6:	19 f4       	brne	.+6      	; 0x9ee <__addsf3+0x24>
 9e8:	26 f4       	brtc	.+8      	; 0x9f2 <__addsf3+0x28>
 9ea:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_nan>
 9ee:	0e f4       	brtc	.+2      	; 0x9f2 <__addsf3+0x28>
 9f0:	e0 95       	com	r30
 9f2:	e7 fb       	bst	r30, 7
 9f4:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>

000009f8 <__addsf3x>:
 9f8:	e9 2f       	mov	r30, r25
 9fa:	0e 94 c0 06 	call	0xd80	; 0xd80 <__fp_split3>
 9fe:	58 f3       	brcs	.-42     	; 0x9d6 <__addsf3+0xc>
 a00:	ba 17       	cp	r27, r26
 a02:	62 07       	cpc	r22, r18
 a04:	73 07       	cpc	r23, r19
 a06:	84 07       	cpc	r24, r20
 a08:	95 07       	cpc	r25, r21
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <__addsf3x+0x1c>
 a0c:	79 f4       	brne	.+30     	; 0xa2c <__addsf3x+0x34>
 a0e:	a6 f5       	brtc	.+104    	; 0xa78 <__addsf3x+0x80>
 a10:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_zero>
 a14:	0e f4       	brtc	.+2      	; 0xa18 <__addsf3x+0x20>
 a16:	e0 95       	com	r30
 a18:	0b 2e       	mov	r0, r27
 a1a:	ba 2f       	mov	r27, r26
 a1c:	a0 2d       	mov	r26, r0
 a1e:	0b 01       	movw	r0, r22
 a20:	b9 01       	movw	r22, r18
 a22:	90 01       	movw	r18, r0
 a24:	0c 01       	movw	r0, r24
 a26:	ca 01       	movw	r24, r20
 a28:	a0 01       	movw	r20, r0
 a2a:	11 24       	eor	r1, r1
 a2c:	ff 27       	eor	r31, r31
 a2e:	59 1b       	sub	r21, r25
 a30:	99 f0       	breq	.+38     	; 0xa58 <__addsf3x+0x60>
 a32:	59 3f       	cpi	r21, 0xF9	; 249
 a34:	50 f4       	brcc	.+20     	; 0xa4a <__addsf3x+0x52>
 a36:	50 3e       	cpi	r21, 0xE0	; 224
 a38:	68 f1       	brcs	.+90     	; 0xa94 <__addsf3x+0x9c>
 a3a:	1a 16       	cp	r1, r26
 a3c:	f0 40       	sbci	r31, 0x00	; 0
 a3e:	a2 2f       	mov	r26, r18
 a40:	23 2f       	mov	r18, r19
 a42:	34 2f       	mov	r19, r20
 a44:	44 27       	eor	r20, r20
 a46:	58 5f       	subi	r21, 0xF8	; 248
 a48:	f3 cf       	rjmp	.-26     	; 0xa30 <__addsf3x+0x38>
 a4a:	46 95       	lsr	r20
 a4c:	37 95       	ror	r19
 a4e:	27 95       	ror	r18
 a50:	a7 95       	ror	r26
 a52:	f0 40       	sbci	r31, 0x00	; 0
 a54:	53 95       	inc	r21
 a56:	c9 f7       	brne	.-14     	; 0xa4a <__addsf3x+0x52>
 a58:	7e f4       	brtc	.+30     	; 0xa78 <__addsf3x+0x80>
 a5a:	1f 16       	cp	r1, r31
 a5c:	ba 0b       	sbc	r27, r26
 a5e:	62 0b       	sbc	r22, r18
 a60:	73 0b       	sbc	r23, r19
 a62:	84 0b       	sbc	r24, r20
 a64:	ba f0       	brmi	.+46     	; 0xa94 <__addsf3x+0x9c>
 a66:	91 50       	subi	r25, 0x01	; 1
 a68:	a1 f0       	breq	.+40     	; 0xa92 <__addsf3x+0x9a>
 a6a:	ff 0f       	add	r31, r31
 a6c:	bb 1f       	adc	r27, r27
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	c2 f7       	brpl	.-16     	; 0xa66 <__addsf3x+0x6e>
 a76:	0e c0       	rjmp	.+28     	; 0xa94 <__addsf3x+0x9c>
 a78:	ba 0f       	add	r27, r26
 a7a:	62 1f       	adc	r22, r18
 a7c:	73 1f       	adc	r23, r19
 a7e:	84 1f       	adc	r24, r20
 a80:	48 f4       	brcc	.+18     	; 0xa94 <__addsf3x+0x9c>
 a82:	87 95       	ror	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f7 95       	ror	r31
 a8c:	9e 3f       	cpi	r25, 0xFE	; 254
 a8e:	08 f0       	brcs	.+2      	; 0xa92 <__addsf3x+0x9a>
 a90:	b0 cf       	rjmp	.-160    	; 0x9f2 <__addsf3+0x28>
 a92:	93 95       	inc	r25
 a94:	88 0f       	add	r24, r24
 a96:	08 f0       	brcs	.+2      	; 0xa9a <__addsf3x+0xa2>
 a98:	99 27       	eor	r25, r25
 a9a:	ee 0f       	add	r30, r30
 a9c:	97 95       	ror	r25
 a9e:	87 95       	ror	r24
 aa0:	08 95       	ret

00000aa2 <__divsf3>:
 aa2:	0e 94 65 05 	call	0xaca	; 0xaca <__divsf3x>
 aa6:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_round>
 aaa:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_pscB>
 aae:	58 f0       	brcs	.+22     	; 0xac6 <__divsf3+0x24>
 ab0:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscA>
 ab4:	40 f0       	brcs	.+16     	; 0xac6 <__divsf3+0x24>
 ab6:	29 f4       	brne	.+10     	; 0xac2 <__divsf3+0x20>
 ab8:	5f 3f       	cpi	r21, 0xFF	; 255
 aba:	29 f0       	breq	.+10     	; 0xac6 <__divsf3+0x24>
 abc:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 ac0:	51 11       	cpse	r21, r1
 ac2:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_szero>
 ac6:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_nan>

00000aca <__divsf3x>:
 aca:	0e 94 c0 06 	call	0xd80	; 0xd80 <__fp_split3>
 ace:	68 f3       	brcs	.-38     	; 0xaaa <__divsf3+0x8>

00000ad0 <__divsf3_pse>:
 ad0:	99 23       	and	r25, r25
 ad2:	b1 f3       	breq	.-20     	; 0xac0 <__divsf3+0x1e>
 ad4:	55 23       	and	r21, r21
 ad6:	91 f3       	breq	.-28     	; 0xabc <__divsf3+0x1a>
 ad8:	95 1b       	sub	r25, r21
 ada:	55 0b       	sbc	r21, r21
 adc:	bb 27       	eor	r27, r27
 ade:	aa 27       	eor	r26, r26
 ae0:	62 17       	cp	r22, r18
 ae2:	73 07       	cpc	r23, r19
 ae4:	84 07       	cpc	r24, r20
 ae6:	38 f0       	brcs	.+14     	; 0xaf6 <__divsf3_pse+0x26>
 ae8:	9f 5f       	subi	r25, 0xFF	; 255
 aea:	5f 4f       	sbci	r21, 0xFF	; 255
 aec:	22 0f       	add	r18, r18
 aee:	33 1f       	adc	r19, r19
 af0:	44 1f       	adc	r20, r20
 af2:	aa 1f       	adc	r26, r26
 af4:	a9 f3       	breq	.-22     	; 0xae0 <__divsf3_pse+0x10>
 af6:	35 d0       	rcall	.+106    	; 0xb62 <__divsf3_pse+0x92>
 af8:	0e 2e       	mov	r0, r30
 afa:	3a f0       	brmi	.+14     	; 0xb0a <__divsf3_pse+0x3a>
 afc:	e0 e8       	ldi	r30, 0x80	; 128
 afe:	32 d0       	rcall	.+100    	; 0xb64 <__divsf3_pse+0x94>
 b00:	91 50       	subi	r25, 0x01	; 1
 b02:	50 40       	sbci	r21, 0x00	; 0
 b04:	e6 95       	lsr	r30
 b06:	00 1c       	adc	r0, r0
 b08:	ca f7       	brpl	.-14     	; 0xafc <__divsf3_pse+0x2c>
 b0a:	2b d0       	rcall	.+86     	; 0xb62 <__divsf3_pse+0x92>
 b0c:	fe 2f       	mov	r31, r30
 b0e:	29 d0       	rcall	.+82     	; 0xb62 <__divsf3_pse+0x92>
 b10:	66 0f       	add	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	bb 1f       	adc	r27, r27
 b18:	26 17       	cp	r18, r22
 b1a:	37 07       	cpc	r19, r23
 b1c:	48 07       	cpc	r20, r24
 b1e:	ab 07       	cpc	r26, r27
 b20:	b0 e8       	ldi	r27, 0x80	; 128
 b22:	09 f0       	breq	.+2      	; 0xb26 <__divsf3_pse+0x56>
 b24:	bb 0b       	sbc	r27, r27
 b26:	80 2d       	mov	r24, r0
 b28:	bf 01       	movw	r22, r30
 b2a:	ff 27       	eor	r31, r31
 b2c:	93 58       	subi	r25, 0x83	; 131
 b2e:	5f 4f       	sbci	r21, 0xFF	; 255
 b30:	3a f0       	brmi	.+14     	; 0xb40 <__divsf3_pse+0x70>
 b32:	9e 3f       	cpi	r25, 0xFE	; 254
 b34:	51 05       	cpc	r21, r1
 b36:	78 f0       	brcs	.+30     	; 0xb56 <__divsf3_pse+0x86>
 b38:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 b3c:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_szero>
 b40:	5f 3f       	cpi	r21, 0xFF	; 255
 b42:	e4 f3       	brlt	.-8      	; 0xb3c <__divsf3_pse+0x6c>
 b44:	98 3e       	cpi	r25, 0xE8	; 232
 b46:	d4 f3       	brlt	.-12     	; 0xb3c <__divsf3_pse+0x6c>
 b48:	86 95       	lsr	r24
 b4a:	77 95       	ror	r23
 b4c:	67 95       	ror	r22
 b4e:	b7 95       	ror	r27
 b50:	f7 95       	ror	r31
 b52:	9f 5f       	subi	r25, 0xFF	; 255
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__divsf3_pse+0x78>
 b56:	88 0f       	add	r24, r24
 b58:	91 1d       	adc	r25, r1
 b5a:	96 95       	lsr	r25
 b5c:	87 95       	ror	r24
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret
 b62:	e1 e0       	ldi	r30, 0x01	; 1
 b64:	66 0f       	add	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	bb 1f       	adc	r27, r27
 b6c:	62 17       	cp	r22, r18
 b6e:	73 07       	cpc	r23, r19
 b70:	84 07       	cpc	r24, r20
 b72:	ba 07       	cpc	r27, r26
 b74:	20 f0       	brcs	.+8      	; 0xb7e <__divsf3_pse+0xae>
 b76:	62 1b       	sub	r22, r18
 b78:	73 0b       	sbc	r23, r19
 b7a:	84 0b       	sbc	r24, r20
 b7c:	ba 0b       	sbc	r27, r26
 b7e:	ee 1f       	adc	r30, r30
 b80:	88 f7       	brcc	.-30     	; 0xb64 <__divsf3_pse+0x94>
 b82:	e0 95       	com	r30
 b84:	08 95       	ret

00000b86 <__fixsfsi>:
 b86:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fixunssfsi>
 b8a:	68 94       	set
 b8c:	b1 11       	cpse	r27, r1
 b8e:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_szero>
 b92:	08 95       	ret

00000b94 <__fixunssfsi>:
 b94:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_splitA>
 b98:	88 f0       	brcs	.+34     	; 0xbbc <__fixunssfsi+0x28>
 b9a:	9f 57       	subi	r25, 0x7F	; 127
 b9c:	98 f0       	brcs	.+38     	; 0xbc4 <__fixunssfsi+0x30>
 b9e:	b9 2f       	mov	r27, r25
 ba0:	99 27       	eor	r25, r25
 ba2:	b7 51       	subi	r27, 0x17	; 23
 ba4:	b0 f0       	brcs	.+44     	; 0xbd2 <__fixunssfsi+0x3e>
 ba6:	e1 f0       	breq	.+56     	; 0xbe0 <__fixunssfsi+0x4c>
 ba8:	66 0f       	add	r22, r22
 baa:	77 1f       	adc	r23, r23
 bac:	88 1f       	adc	r24, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	1a f0       	brmi	.+6      	; 0xbb8 <__fixunssfsi+0x24>
 bb2:	ba 95       	dec	r27
 bb4:	c9 f7       	brne	.-14     	; 0xba8 <__fixunssfsi+0x14>
 bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <__fixunssfsi+0x4c>
 bb8:	b1 30       	cpi	r27, 0x01	; 1
 bba:	91 f0       	breq	.+36     	; 0xbe0 <__fixunssfsi+0x4c>
 bbc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__fp_zero>
 bc0:	b1 e0       	ldi	r27, 0x01	; 1
 bc2:	08 95       	ret
 bc4:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_zero>
 bc8:	67 2f       	mov	r22, r23
 bca:	78 2f       	mov	r23, r24
 bcc:	88 27       	eor	r24, r24
 bce:	b8 5f       	subi	r27, 0xF8	; 248
 bd0:	39 f0       	breq	.+14     	; 0xbe0 <__fixunssfsi+0x4c>
 bd2:	b9 3f       	cpi	r27, 0xF9	; 249
 bd4:	cc f3       	brlt	.-14     	; 0xbc8 <__fixunssfsi+0x34>
 bd6:	86 95       	lsr	r24
 bd8:	77 95       	ror	r23
 bda:	67 95       	ror	r22
 bdc:	b3 95       	inc	r27
 bde:	d9 f7       	brne	.-10     	; 0xbd6 <__fixunssfsi+0x42>
 be0:	3e f4       	brtc	.+14     	; 0xbf0 <__fixunssfsi+0x5c>
 be2:	90 95       	com	r25
 be4:	80 95       	com	r24
 be6:	70 95       	com	r23
 be8:	61 95       	neg	r22
 bea:	7f 4f       	sbci	r23, 0xFF	; 255
 bec:	8f 4f       	sbci	r24, 0xFF	; 255
 bee:	9f 4f       	sbci	r25, 0xFF	; 255
 bf0:	08 95       	ret

00000bf2 <__floatunsisf>:
 bf2:	e8 94       	clt
 bf4:	09 c0       	rjmp	.+18     	; 0xc08 <__floatsisf+0x12>

00000bf6 <__floatsisf>:
 bf6:	97 fb       	bst	r25, 7
 bf8:	3e f4       	brtc	.+14     	; 0xc08 <__floatsisf+0x12>
 bfa:	90 95       	com	r25
 bfc:	80 95       	com	r24
 bfe:	70 95       	com	r23
 c00:	61 95       	neg	r22
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	99 23       	and	r25, r25
 c0a:	a9 f0       	breq	.+42     	; 0xc36 <__floatsisf+0x40>
 c0c:	f9 2f       	mov	r31, r25
 c0e:	96 e9       	ldi	r25, 0x96	; 150
 c10:	bb 27       	eor	r27, r27
 c12:	93 95       	inc	r25
 c14:	f6 95       	lsr	r31
 c16:	87 95       	ror	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	b7 95       	ror	r27
 c1e:	f1 11       	cpse	r31, r1
 c20:	f8 cf       	rjmp	.-16     	; 0xc12 <__floatsisf+0x1c>
 c22:	fa f4       	brpl	.+62     	; 0xc62 <__floatsisf+0x6c>
 c24:	bb 0f       	add	r27, r27
 c26:	11 f4       	brne	.+4      	; 0xc2c <__floatsisf+0x36>
 c28:	60 ff       	sbrs	r22, 0
 c2a:	1b c0       	rjmp	.+54     	; 0xc62 <__floatsisf+0x6c>
 c2c:	6f 5f       	subi	r22, 0xFF	; 255
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	16 c0       	rjmp	.+44     	; 0xc62 <__floatsisf+0x6c>
 c36:	88 23       	and	r24, r24
 c38:	11 f0       	breq	.+4      	; 0xc3e <__floatsisf+0x48>
 c3a:	96 e9       	ldi	r25, 0x96	; 150
 c3c:	11 c0       	rjmp	.+34     	; 0xc60 <__floatsisf+0x6a>
 c3e:	77 23       	and	r23, r23
 c40:	21 f0       	breq	.+8      	; 0xc4a <__floatsisf+0x54>
 c42:	9e e8       	ldi	r25, 0x8E	; 142
 c44:	87 2f       	mov	r24, r23
 c46:	76 2f       	mov	r23, r22
 c48:	05 c0       	rjmp	.+10     	; 0xc54 <__floatsisf+0x5e>
 c4a:	66 23       	and	r22, r22
 c4c:	71 f0       	breq	.+28     	; 0xc6a <__floatsisf+0x74>
 c4e:	96 e8       	ldi	r25, 0x86	; 134
 c50:	86 2f       	mov	r24, r22
 c52:	70 e0       	ldi	r23, 0x00	; 0
 c54:	60 e0       	ldi	r22, 0x00	; 0
 c56:	2a f0       	brmi	.+10     	; 0xc62 <__floatsisf+0x6c>
 c58:	9a 95       	dec	r25
 c5a:	66 0f       	add	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	88 1f       	adc	r24, r24
 c60:	da f7       	brpl	.-10     	; 0xc58 <__floatsisf+0x62>
 c62:	88 0f       	add	r24, r24
 c64:	96 95       	lsr	r25
 c66:	87 95       	ror	r24
 c68:	97 f9       	bld	r25, 7
 c6a:	08 95       	ret
 c6c:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscA>
 c70:	20 f0       	brcs	.+8      	; 0xc7a <__floatsisf+0x84>
 c72:	19 f0       	breq	.+6      	; 0xc7a <__floatsisf+0x84>
 c74:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_pscB>
 c78:	50 f4       	brcc	.+20     	; 0xc8e <fmod+0xc>
 c7a:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_nan>
 c7e:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_szero>

00000c82 <fmod>:
 c82:	e9 2f       	mov	r30, r25
 c84:	0e 94 c0 06 	call	0xd80	; 0xd80 <__fp_split3>
 c88:	88 f3       	brcs	.-30     	; 0xc6c <__floatsisf+0x76>
 c8a:	55 23       	and	r21, r21
 c8c:	b1 f3       	breq	.-20     	; 0xc7a <__floatsisf+0x84>
 c8e:	e7 fb       	bst	r30, 7
 c90:	62 17       	cp	r22, r18
 c92:	73 07       	cpc	r23, r19
 c94:	84 07       	cpc	r24, r20
 c96:	95 07       	cpc	r25, r21
 c98:	a8 f1       	brcs	.+106    	; 0xd04 <fmod+0x82>
 c9a:	89 f3       	breq	.-30     	; 0xc7e <__floatsisf+0x88>
 c9c:	e9 2f       	mov	r30, r25
 c9e:	ff 27       	eor	r31, r31
 ca0:	88 23       	and	r24, r24
 ca2:	2a f0       	brmi	.+10     	; 0xcae <fmod+0x2c>
 ca4:	31 97       	sbiw	r30, 0x01	; 1
 ca6:	66 0f       	add	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	da f7       	brpl	.-10     	; 0xca4 <fmod+0x22>
 cae:	95 2f       	mov	r25, r21
 cb0:	55 27       	eor	r21, r21
 cb2:	44 23       	and	r20, r20
 cb4:	32 f0       	brmi	.+12     	; 0xcc2 <fmod+0x40>
 cb6:	91 50       	subi	r25, 0x01	; 1
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	22 0f       	add	r18, r18
 cbc:	33 1f       	adc	r19, r19
 cbe:	44 1f       	adc	r20, r20
 cc0:	d2 f7       	brpl	.-12     	; 0xcb6 <fmod+0x34>
 cc2:	bb 27       	eor	r27, r27
 cc4:	e9 1b       	sub	r30, r25
 cc6:	f5 0b       	sbc	r31, r21
 cc8:	62 1b       	sub	r22, r18
 cca:	73 0b       	sbc	r23, r19
 ccc:	84 0b       	sbc	r24, r20
 cce:	b1 09       	sbc	r27, r1
 cd0:	b1 f2       	breq	.-84     	; 0xc7e <__floatsisf+0x88>
 cd2:	22 f4       	brpl	.+8      	; 0xcdc <fmod+0x5a>
 cd4:	62 0f       	add	r22, r18
 cd6:	73 1f       	adc	r23, r19
 cd8:	84 1f       	adc	r24, r20
 cda:	b1 1d       	adc	r27, r1
 cdc:	31 97       	sbiw	r30, 0x01	; 1
 cde:	2a f0       	brmi	.+10     	; 0xcea <fmod+0x68>
 ce0:	66 0f       	add	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	bb 1f       	adc	r27, r27
 ce8:	ef cf       	rjmp	.-34     	; 0xcc8 <fmod+0x46>
 cea:	91 50       	subi	r25, 0x01	; 1
 cec:	50 40       	sbci	r21, 0x00	; 0
 cee:	62 f0       	brmi	.+24     	; 0xd08 <fmod+0x86>
 cf0:	41 f0       	breq	.+16     	; 0xd02 <fmod+0x80>
 cf2:	88 23       	and	r24, r24
 cf4:	32 f0       	brmi	.+12     	; 0xd02 <fmod+0x80>
 cf6:	66 0f       	add	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	88 1f       	adc	r24, r24
 cfc:	91 50       	subi	r25, 0x01	; 1
 cfe:	50 40       	sbci	r21, 0x00	; 0
 d00:	c1 f7       	brne	.-16     	; 0xcf2 <fmod+0x70>
 d02:	93 95       	inc	r25
 d04:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_mpack>
 d08:	86 95       	lsr	r24
 d0a:	77 95       	ror	r23
 d0c:	67 95       	ror	r22
 d0e:	9f 5f       	subi	r25, 0xFF	; 255
 d10:	d9 f7       	brne	.-10     	; 0xd08 <fmod+0x86>
 d12:	f7 cf       	rjmp	.-18     	; 0xd02 <fmod+0x80>

00000d14 <__fp_inf>:
 d14:	97 f9       	bld	r25, 7
 d16:	9f 67       	ori	r25, 0x7F	; 127
 d18:	80 e8       	ldi	r24, 0x80	; 128
 d1a:	70 e0       	ldi	r23, 0x00	; 0
 d1c:	60 e0       	ldi	r22, 0x00	; 0
 d1e:	08 95       	ret

00000d20 <__fp_mpack>:
 d20:	9f 3f       	cpi	r25, 0xFF	; 255
 d22:	31 f0       	breq	.+12     	; 0xd30 <__fp_mpack_finite+0xc>

00000d24 <__fp_mpack_finite>:
 d24:	91 50       	subi	r25, 0x01	; 1
 d26:	20 f4       	brcc	.+8      	; 0xd30 <__fp_mpack_finite+0xc>
 d28:	87 95       	ror	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	b7 95       	ror	r27
 d30:	88 0f       	add	r24, r24
 d32:	91 1d       	adc	r25, r1
 d34:	96 95       	lsr	r25
 d36:	87 95       	ror	r24
 d38:	97 f9       	bld	r25, 7
 d3a:	08 95       	ret

00000d3c <__fp_nan>:
 d3c:	9f ef       	ldi	r25, 0xFF	; 255
 d3e:	80 ec       	ldi	r24, 0xC0	; 192
 d40:	08 95       	ret

00000d42 <__fp_pscA>:
 d42:	00 24       	eor	r0, r0
 d44:	0a 94       	dec	r0
 d46:	16 16       	cp	r1, r22
 d48:	17 06       	cpc	r1, r23
 d4a:	18 06       	cpc	r1, r24
 d4c:	09 06       	cpc	r0, r25
 d4e:	08 95       	ret

00000d50 <__fp_pscB>:
 d50:	00 24       	eor	r0, r0
 d52:	0a 94       	dec	r0
 d54:	12 16       	cp	r1, r18
 d56:	13 06       	cpc	r1, r19
 d58:	14 06       	cpc	r1, r20
 d5a:	05 06       	cpc	r0, r21
 d5c:	08 95       	ret

00000d5e <__fp_round>:
 d5e:	09 2e       	mov	r0, r25
 d60:	03 94       	inc	r0
 d62:	00 0c       	add	r0, r0
 d64:	11 f4       	brne	.+4      	; 0xd6a <__fp_round+0xc>
 d66:	88 23       	and	r24, r24
 d68:	52 f0       	brmi	.+20     	; 0xd7e <__fp_round+0x20>
 d6a:	bb 0f       	add	r27, r27
 d6c:	40 f4       	brcc	.+16     	; 0xd7e <__fp_round+0x20>
 d6e:	bf 2b       	or	r27, r31
 d70:	11 f4       	brne	.+4      	; 0xd76 <__fp_round+0x18>
 d72:	60 ff       	sbrs	r22, 0
 d74:	04 c0       	rjmp	.+8      	; 0xd7e <__fp_round+0x20>
 d76:	6f 5f       	subi	r22, 0xFF	; 255
 d78:	7f 4f       	sbci	r23, 0xFF	; 255
 d7a:	8f 4f       	sbci	r24, 0xFF	; 255
 d7c:	9f 4f       	sbci	r25, 0xFF	; 255
 d7e:	08 95       	ret

00000d80 <__fp_split3>:
 d80:	57 fd       	sbrc	r21, 7
 d82:	90 58       	subi	r25, 0x80	; 128
 d84:	44 0f       	add	r20, r20
 d86:	55 1f       	adc	r21, r21
 d88:	59 f0       	breq	.+22     	; 0xda0 <__fp_splitA+0x10>
 d8a:	5f 3f       	cpi	r21, 0xFF	; 255
 d8c:	71 f0       	breq	.+28     	; 0xdaa <__fp_splitA+0x1a>
 d8e:	47 95       	ror	r20

00000d90 <__fp_splitA>:
 d90:	88 0f       	add	r24, r24
 d92:	97 fb       	bst	r25, 7
 d94:	99 1f       	adc	r25, r25
 d96:	61 f0       	breq	.+24     	; 0xdb0 <__fp_splitA+0x20>
 d98:	9f 3f       	cpi	r25, 0xFF	; 255
 d9a:	79 f0       	breq	.+30     	; 0xdba <__fp_splitA+0x2a>
 d9c:	87 95       	ror	r24
 d9e:	08 95       	ret
 da0:	12 16       	cp	r1, r18
 da2:	13 06       	cpc	r1, r19
 da4:	14 06       	cpc	r1, r20
 da6:	55 1f       	adc	r21, r21
 da8:	f2 cf       	rjmp	.-28     	; 0xd8e <__fp_split3+0xe>
 daa:	46 95       	lsr	r20
 dac:	f1 df       	rcall	.-30     	; 0xd90 <__fp_splitA>
 dae:	08 c0       	rjmp	.+16     	; 0xdc0 <__fp_splitA+0x30>
 db0:	16 16       	cp	r1, r22
 db2:	17 06       	cpc	r1, r23
 db4:	18 06       	cpc	r1, r24
 db6:	99 1f       	adc	r25, r25
 db8:	f1 cf       	rjmp	.-30     	; 0xd9c <__fp_splitA+0xc>
 dba:	86 95       	lsr	r24
 dbc:	71 05       	cpc	r23, r1
 dbe:	61 05       	cpc	r22, r1
 dc0:	08 94       	sec
 dc2:	08 95       	ret

00000dc4 <__fp_zero>:
 dc4:	e8 94       	clt

00000dc6 <__fp_szero>:
 dc6:	bb 27       	eor	r27, r27
 dc8:	66 27       	eor	r22, r22
 dca:	77 27       	eor	r23, r23
 dcc:	cb 01       	movw	r24, r22
 dce:	97 f9       	bld	r25, 7
 dd0:	08 95       	ret

00000dd2 <__mulsf3>:
 dd2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__mulsf3x>
 dd6:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_round>
 dda:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscA>
 dde:	38 f0       	brcs	.+14     	; 0xdee <__mulsf3+0x1c>
 de0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_pscB>
 de4:	20 f0       	brcs	.+8      	; 0xdee <__mulsf3+0x1c>
 de6:	95 23       	and	r25, r21
 de8:	11 f0       	breq	.+4      	; 0xdee <__mulsf3+0x1c>
 dea:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 dee:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_nan>
 df2:	11 24       	eor	r1, r1
 df4:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_szero>

00000df8 <__mulsf3x>:
 df8:	0e 94 c0 06 	call	0xd80	; 0xd80 <__fp_split3>
 dfc:	70 f3       	brcs	.-36     	; 0xdda <__mulsf3+0x8>

00000dfe <__mulsf3_pse>:
 dfe:	95 9f       	mul	r25, r21
 e00:	c1 f3       	breq	.-16     	; 0xdf2 <__mulsf3+0x20>
 e02:	95 0f       	add	r25, r21
 e04:	50 e0       	ldi	r21, 0x00	; 0
 e06:	55 1f       	adc	r21, r21
 e08:	62 9f       	mul	r22, r18
 e0a:	f0 01       	movw	r30, r0
 e0c:	72 9f       	mul	r23, r18
 e0e:	bb 27       	eor	r27, r27
 e10:	f0 0d       	add	r31, r0
 e12:	b1 1d       	adc	r27, r1
 e14:	63 9f       	mul	r22, r19
 e16:	aa 27       	eor	r26, r26
 e18:	f0 0d       	add	r31, r0
 e1a:	b1 1d       	adc	r27, r1
 e1c:	aa 1f       	adc	r26, r26
 e1e:	64 9f       	mul	r22, r20
 e20:	66 27       	eor	r22, r22
 e22:	b0 0d       	add	r27, r0
 e24:	a1 1d       	adc	r26, r1
 e26:	66 1f       	adc	r22, r22
 e28:	82 9f       	mul	r24, r18
 e2a:	22 27       	eor	r18, r18
 e2c:	b0 0d       	add	r27, r0
 e2e:	a1 1d       	adc	r26, r1
 e30:	62 1f       	adc	r22, r18
 e32:	73 9f       	mul	r23, r19
 e34:	b0 0d       	add	r27, r0
 e36:	a1 1d       	adc	r26, r1
 e38:	62 1f       	adc	r22, r18
 e3a:	83 9f       	mul	r24, r19
 e3c:	a0 0d       	add	r26, r0
 e3e:	61 1d       	adc	r22, r1
 e40:	22 1f       	adc	r18, r18
 e42:	74 9f       	mul	r23, r20
 e44:	33 27       	eor	r19, r19
 e46:	a0 0d       	add	r26, r0
 e48:	61 1d       	adc	r22, r1
 e4a:	23 1f       	adc	r18, r19
 e4c:	84 9f       	mul	r24, r20
 e4e:	60 0d       	add	r22, r0
 e50:	21 1d       	adc	r18, r1
 e52:	82 2f       	mov	r24, r18
 e54:	76 2f       	mov	r23, r22
 e56:	6a 2f       	mov	r22, r26
 e58:	11 24       	eor	r1, r1
 e5a:	9f 57       	subi	r25, 0x7F	; 127
 e5c:	50 40       	sbci	r21, 0x00	; 0
 e5e:	9a f0       	brmi	.+38     	; 0xe86 <__mulsf3_pse+0x88>
 e60:	f1 f0       	breq	.+60     	; 0xe9e <__mulsf3_pse+0xa0>
 e62:	88 23       	and	r24, r24
 e64:	4a f0       	brmi	.+18     	; 0xe78 <__mulsf3_pse+0x7a>
 e66:	ee 0f       	add	r30, r30
 e68:	ff 1f       	adc	r31, r31
 e6a:	bb 1f       	adc	r27, r27
 e6c:	66 1f       	adc	r22, r22
 e6e:	77 1f       	adc	r23, r23
 e70:	88 1f       	adc	r24, r24
 e72:	91 50       	subi	r25, 0x01	; 1
 e74:	50 40       	sbci	r21, 0x00	; 0
 e76:	a9 f7       	brne	.-22     	; 0xe62 <__mulsf3_pse+0x64>
 e78:	9e 3f       	cpi	r25, 0xFE	; 254
 e7a:	51 05       	cpc	r21, r1
 e7c:	80 f0       	brcs	.+32     	; 0xe9e <__mulsf3_pse+0xa0>
 e7e:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 e82:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_szero>
 e86:	5f 3f       	cpi	r21, 0xFF	; 255
 e88:	e4 f3       	brlt	.-8      	; 0xe82 <__mulsf3_pse+0x84>
 e8a:	98 3e       	cpi	r25, 0xE8	; 232
 e8c:	d4 f3       	brlt	.-12     	; 0xe82 <__mulsf3_pse+0x84>
 e8e:	86 95       	lsr	r24
 e90:	77 95       	ror	r23
 e92:	67 95       	ror	r22
 e94:	b7 95       	ror	r27
 e96:	f7 95       	ror	r31
 e98:	e7 95       	ror	r30
 e9a:	9f 5f       	subi	r25, 0xFF	; 255
 e9c:	c1 f7       	brne	.-16     	; 0xe8e <__mulsf3_pse+0x90>
 e9e:	fe 2b       	or	r31, r30
 ea0:	88 0f       	add	r24, r24
 ea2:	91 1d       	adc	r25, r1
 ea4:	96 95       	lsr	r25
 ea6:	87 95       	ror	r24
 ea8:	97 f9       	bld	r25, 7
 eaa:	08 95       	ret

00000eac <__tablejump2__>:
 eac:	ee 0f       	add	r30, r30
 eae:	ff 1f       	adc	r31, r31
 eb0:	05 90       	lpm	r0, Z+
 eb2:	f4 91       	lpm	r31, Z
 eb4:	e0 2d       	mov	r30, r0
 eb6:	09 94       	ijmp

00000eb8 <_exit>:
 eb8:	f8 94       	cli

00000eba <__stop_program>:
 eba:	ff cf       	rjmp	.-2      	; 0xeba <__stop_program>
