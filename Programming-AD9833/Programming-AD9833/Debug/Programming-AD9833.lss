
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000012b6  0000134a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800066  00800066  00001350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001560  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000778  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c4  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000036d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f6a  00000000  00000000  00003e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004e09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_7>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_12>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	14 04       	cpc	r1, r4

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e6 eb       	ldi	r30, 0xB6	; 182
      6a:	f2 e1       	ldi	r31, 0x12	; 18
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 36       	cpi	r26, 0x66	; 102
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	20 e0       	ldi	r18, 0x00	; 0
      7a:	a6 e6       	ldi	r26, 0x66	; 102
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a0 3b       	cpi	r26, 0xB0	; 176
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
      a2:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z8SPI_initv>:
{
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	UART_send(MSdata);
	UART_send(LSdata);
}
      aa:	81 ea       	ldi	r24, 0xA1	; 161
      ac:	87 bb       	out	0x17, r24	; 23
      ae:	81 e1       	ldi	r24, 0x11	; 17
      b0:	88 bb       	out	0x18, r24	; 24
      b2:	89 ed       	ldi	r24, 0xD9	; 217
      b4:	8d b9       	out	0x0d, r24	; 13
      b6:	08 95       	ret

000000b8 <_Z9UART_initv>:
      b8:	10 bc       	out	0x20, r1	; 32
      ba:	8f e5       	ldi	r24, 0x5F	; 95
      bc:	89 b9       	out	0x09, r24	; 9
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	8a b9       	out	0x0a, r24	; 10
      c2:	8e e8       	ldi	r24, 0x8E	; 142
      c4:	80 bd       	out	0x20, r24	; 32
      c6:	08 95       	ret

000000c8 <_Z12SPI_transferh>:
      c8:	8f b9       	out	0x0f, r24	; 15
      ca:	77 9b       	sbis	0x0e, 7	; 14
      cc:	fe cf       	rjmp	.-4      	; 0xca <_Z12SPI_transferh+0x2>
      ce:	08 95       	ret

000000d0 <_Z11SPI_write16t>:

void SPI_write16 (unsigned short data)    			//send a 16bit word and use f sync
{  
      d0:	cf 93       	push	r28
      d2:	c8 2f       	mov	r28, r24
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PINB0);						    //F sync Low --> begin frame
      d4:	c0 98       	cbi	0x18, 0	; 24
	SPI_transfer(MSdata);							
      d6:	89 2f       	mov	r24, r25
      d8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	SPI_transfer(LSdata);
      dc:	8c 2f       	mov	r24, r28
      de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	PORTB |= (1<<PINB0);						    //F sync High --> End of frame
      e2:	c0 9a       	sbi	0x18, 0	; 24
}
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <_Z10Set_AD9833fj>:

void Set_AD9833(float frequency, unsigned int phase)
{
      e8:	cf 92       	push	r12
      ea:	df 92       	push	r13
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	8a 01       	movw	r16, r20
	long FreqReg = (frequency*pow(2,28))/(float)Fmclk;	  //Calculate frequency to be sent to AD9833
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5d e4       	ldi	r21, 0x4D	; 77
     102:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     106:	20 e2       	ldi	r18, 0x20	; 32
     108:	3c eb       	ldi	r19, 0xBC	; 188
     10a:	4e eb       	ldi	r20, 0xBE	; 190
     10c:	5b e4       	ldi	r21, 0x4B	; 75
     10e:	0e 94 26 07 	call	0xe4c	; 0xe4c <__divsf3>
     112:	0e 94 98 07 	call	0xf30	; 0xf30 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);		   //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
     116:	6b 01       	movw	r12, r22
     118:	7c 01       	movw	r14, r24
     11a:	cc 24       	eor	r12, r12
     11c:	20 ec       	ldi	r18, 0xC0	; 192
     11e:	d2 22       	and	r13, r18
     120:	2f e0       	ldi	r18, 0x0F	; 15
     122:	f2 22       	and	r15, r18
     124:	0b 2e       	mov	r0, r27
     126:	be e0       	ldi	r27, 0x0E	; 14
     128:	f5 94       	asr	r15
     12a:	e7 94       	ror	r14
     12c:	d7 94       	ror	r13
     12e:	c7 94       	ror	r12
     130:	ba 95       	dec	r27
     132:	d1 f7       	brne	.-12     	; 0x128 <_Z10Set_AD9833fj+0x40>
     134:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
     136:	eb 01       	movw	r28, r22
     138:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     									  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_write16(0x2100);								  //define waveform and set reset bit
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	91 e2       	ldi	r25, 0x21	; 33
     13e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(LSB);									  //Write LSBs
     142:	ce 01       	movw	r24, r28
     144:	90 64       	ori	r25, 0x40	; 64
     146:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(MSB);									  //Write MSBs
     14a:	c6 01       	movw	r24, r12
     14c:	90 64       	ori	r25, 0x40	; 64
     14e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	phase&=0x0FFF;
     152:	c8 01       	movw	r24, r16
     154:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;
	//SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_write16(phase);
     156:	90 6c       	ori	r25, 0xC0	; 192
     158:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(0x2000);                                                                                                                                                                                                                                                                                             
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e2       	ldi	r25, 0x20	; 32
     160:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	ff 90       	pop	r15
     16e:	ef 90       	pop	r14
     170:	df 90       	pop	r13
     172:	cf 90       	pop	r12
     174:	08 95       	ret

00000176 <_Z8getphasefff>:

unsigned int getphase(float pphase,float freq, float time)
{
     176:	4f 92       	push	r4
     178:	5f 92       	push	r5
     17a:	6f 92       	push	r6
     17c:	7f 92       	push	r7
     17e:	8f 92       	push	r8
     180:	9f 92       	push	r9
     182:	af 92       	push	r10
     184:	bf 92       	push	r11
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	00 d0       	rcall	.+0      	; 0x198 <_Z8getphasefff+0x22>
     198:	00 d0       	rcall	.+0      	; 0x19a <_Z8getphasefff+0x24>
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	2b 01       	movw	r4, r22
     1a0:	3c 01       	movw	r6, r24
     1a2:	49 01       	movw	r8, r18
     1a4:	5a 01       	movw	r10, r20
     1a6:	67 01       	movw	r12, r14
     1a8:	78 01       	movw	r14, r16
	time/=1000000;
	pphase/=2048/PI;
	float ph=((fmod(time,(1/freq))*2*PI*freq)+pphase)*2048/PI;
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	80 e8       	ldi	r24, 0x80	; 128
     1b0:	9f e3       	ldi	r25, 0x3F	; 63
     1b2:	0e 94 26 07 	call	0xe4c	; 0xe4c <__divsf3>
     1b6:	69 83       	std	Y+1, r22	; 0x01
     1b8:	7a 83       	std	Y+2, r23	; 0x02
     1ba:	8b 83       	std	Y+3, r24	; 0x03
     1bc:	9c 83       	std	Y+4, r25	; 0x04
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	34 e2       	ldi	r19, 0x24	; 36
     1c2:	44 e7       	ldi	r20, 0x74	; 116
     1c4:	59 e4       	ldi	r21, 0x49	; 73
     1c6:	c7 01       	movw	r24, r14
     1c8:	b6 01       	movw	r22, r12
     1ca:	0e 94 26 07 	call	0xe4c	; 0xe4c <__divsf3>
     1ce:	29 81       	ldd	r18, Y+1	; 0x01
     1d0:	3a 81       	ldd	r19, Y+2	; 0x02
     1d2:	4b 81       	ldd	r20, Y+3	; 0x03
     1d4:	5c 81       	ldd	r21, Y+4	; 0x04
     1d6:	0e 94 16 08 	call	0x102c	; 0x102c <fmod>
	return (unsigned int) ph;
     1da:	9b 01       	movw	r18, r22
     1dc:	ac 01       	movw	r20, r24
     1de:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     1e2:	20 ed       	ldi	r18, 0xD0	; 208
     1e4:	3f e0       	ldi	r19, 0x0F	; 15
     1e6:	49 e4       	ldi	r20, 0x49	; 73
     1e8:	50 e4       	ldi	r21, 0x40	; 64
     1ea:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     1ee:	a5 01       	movw	r20, r10
     1f0:	94 01       	movw	r18, r8
     1f2:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
     1fa:	2c e8       	ldi	r18, 0x8C	; 140
     1fc:	39 ef       	ldi	r19, 0xF9	; 249
     1fe:	42 e2       	ldi	r20, 0x22	; 34
     200:	54 e4       	ldi	r21, 0x44	; 68
     202:	c3 01       	movw	r24, r6
     204:	b2 01       	movw	r22, r4
     206:	0e 94 26 07 	call	0xe4c	; 0xe4c <__divsf3>
     20a:	9b 01       	movw	r18, r22
     20c:	ac 01       	movw	r20, r24
     20e:	c7 01       	movw	r24, r14
     210:	b6 01       	movw	r22, r12
     212:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	55 e4       	ldi	r21, 0x45	; 69
     21e:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     222:	20 ed       	ldi	r18, 0xD0	; 208
     224:	3f e0       	ldi	r19, 0x0F	; 15
     226:	49 e4       	ldi	r20, 0x49	; 73
     228:	50 e4       	ldi	r21, 0x40	; 64
     22a:	0e 94 26 07 	call	0xe4c	; 0xe4c <__divsf3>
     22e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fixunssfsi>
}
     232:	cb 01       	movw	r24, r22
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	bf 90       	pop	r11
     24e:	af 90       	pop	r10
     250:	9f 90       	pop	r9
     252:	8f 90       	pop	r8
     254:	7f 90       	pop	r7
     256:	6f 90       	pop	r6
     258:	5f 90       	pop	r5
     25a:	4f 90       	pop	r4
     25c:	08 95       	ret

0000025e <main>:
volatile float freqRY2 =  1500 + (RY2 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
volatile float freqBY2 =  1500 + (BY2 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)

int main(void)
{
	UART_init();
     25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9UART_initv>
	SPI_init();
     262:	0e 94 55 00 	call	0xaa	; 0xaa <_Z8SPI_initv>
	DDRA=(1<<PINA0)|(1<<PINA1)|(1<<PINA2);			//output pins for LEDs
     266:	87 e0       	ldi	r24, 0x07	; 7
     268:	8a bb       	out	0x1a, r24	; 26
	TCCR1A=0;
     26a:	1f bc       	out	0x2f, r1	; 47
	PORTA=0;
     26c:	1b ba       	out	0x1b, r1	; 27
	// // 	UART_send(contnext);
	// 	}
	//////////////////////////////////////////////////////////////////////////
	}

	SPI_write16(0x100);								//Reset AD9833 
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     276:	2f ef       	ldi	r18, 0xFF	; 255
     278:	8f e7       	ldi	r24, 0x7F	; 127
     27a:	96 e1       	ldi	r25, 0x16	; 22
     27c:	21 50       	subi	r18, 0x01	; 1
     27e:	80 40       	sbci	r24, 0x00	; 0
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	e1 f7       	brne	.-8      	; 0x27c <main+0x1e>
     284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x28>
     286:	00 00       	nop

	//VIS Code
	{//leader tone
	_delay_ms(500);
	Set_AD9833(1900,0);
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e8       	ldi	r23, 0x80	; 128
     290:	8d ee       	ldi	r24, 0xED	; 237
     292:	94 e4       	ldi	r25, 0x44	; 68
     294:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	8f e7       	ldi	r24, 0x7F	; 127
     29c:	9d e0       	ldi	r25, 0x0D	; 13
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	80 40       	sbci	r24, 0x00	; 0
     2a2:	90 40       	sbci	r25, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x40>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x4a>
     2a8:	00 00       	nop
	_delay_ms(300);
	//break
	Set_AD9833(1200,0);
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	86 e9       	ldi	r24, 0x96	; 150
     2b4:	94 e4       	ldi	r25, 0x44	; 68
     2b6:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	9f e8       	ldi	r25, 0x8F	; 143
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x60>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x66>
     2c4:	00 00       	nop
	_delay_ms(10);
	//leader
	Set_AD9833(1900,0);
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e8       	ldi	r23, 0x80	; 128
     2ce:	8d ee       	ldi	r24, 0xED	; 237
     2d0:	94 e4       	ldi	r25, 0x44	; 68
     2d2:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     2d6:	9f ef       	ldi	r25, 0xFF	; 255
     2d8:	2f e7       	ldi	r18, 0x7F	; 127
     2da:	8d e0       	ldi	r24, 0x0D	; 13
     2dc:	91 50       	subi	r25, 0x01	; 1
     2de:	20 40       	sbci	r18, 0x00	; 0
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x7e>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x88>
     2e6:	00 00       	nop
	_delay_ms(300);
	//VIS start bit
	Set_AD9833(1200,0);
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	86 e9       	ldi	r24, 0x96	; 150
     2f2:	94 e4       	ldi	r25, 0x44	; 68
     2f4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     2f8:	94 e1       	ldi	r25, 0x14	; 20
     2fa:	2e e4       	ldi	r18, 0x4E	; 78
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	91 50       	subi	r25, 0x01	; 1
     300:	20 40       	sbci	r18, 0x00	; 0
     302:	80 40       	sbci	r24, 0x00	; 0
     304:	e1 f7       	brne	.-8      	; 0x2fe <main+0xa0>
     306:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     308:	84 e1       	ldi	r24, 0x14	; 20
     30a:	9c e0       	ldi	r25, 0x0C	; 12
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xae>
     310:	00 c0       	rjmp	.+0      	; 0x312 <main+0xb4>
     312:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//PD90 VIS code = 99d = 0b1100011
	//bit 0=1
	Set_AD9833(1100,0);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e8       	ldi	r23, 0x80	; 128
     31c:	89 e8       	ldi	r24, 0x89	; 137
     31e:	94 e4       	ldi	r25, 0x44	; 68
     320:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     324:	94 e1       	ldi	r25, 0x14	; 20
     326:	2e e4       	ldi	r18, 0x4E	; 78
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	91 50       	subi	r25, 0x01	; 1
     32c:	20 40       	sbci	r18, 0x00	; 0
     32e:	80 40       	sbci	r24, 0x00	; 0
     330:	e1 f7       	brne	.-8      	; 0x32a <main+0xcc>
     332:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	84 e1       	ldi	r24, 0x14	; 20
     336:	9c e0       	ldi	r25, 0x0C	; 12
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <main+0xda>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0xe0>
     33e:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 1=1
	Set_AD9833(1100,0);
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e8       	ldi	r23, 0x80	; 128
     348:	89 e8       	ldi	r24, 0x89	; 137
     34a:	94 e4       	ldi	r25, 0x44	; 68
     34c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     350:	94 e1       	ldi	r25, 0x14	; 20
     352:	2e e4       	ldi	r18, 0x4E	; 78
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	91 50       	subi	r25, 0x01	; 1
     358:	20 40       	sbci	r18, 0x00	; 0
     35a:	80 40       	sbci	r24, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <main+0xf8>
     35e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	84 e1       	ldi	r24, 0x14	; 20
     362:	9c e0       	ldi	r25, 0x0C	; 12
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <main+0x106>
     368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x10c>
     36a:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 2=0
	Set_AD9833(1300,0);
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	70 e8       	ldi	r23, 0x80	; 128
     374:	82 ea       	ldi	r24, 0xA2	; 162
     376:	94 e4       	ldi	r25, 0x44	; 68
     378:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37c:	94 e1       	ldi	r25, 0x14	; 20
     37e:	2e e4       	ldi	r18, 0x4E	; 78
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	91 50       	subi	r25, 0x01	; 1
     384:	20 40       	sbci	r18, 0x00	; 0
     386:	80 40       	sbci	r24, 0x00	; 0
     388:	e1 f7       	brne	.-8      	; 0x382 <main+0x124>
     38a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38c:	84 e1       	ldi	r24, 0x14	; 20
     38e:	9c e0       	ldi	r25, 0x0C	; 12
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <main+0x132>
     394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x138>
     396:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 3=0
	Set_AD9833(1300,0);
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e8       	ldi	r23, 0x80	; 128
     3a0:	82 ea       	ldi	r24, 0xA2	; 162
     3a2:	94 e4       	ldi	r25, 0x44	; 68
     3a4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a8:	94 e1       	ldi	r25, 0x14	; 20
     3aa:	2e e4       	ldi	r18, 0x4E	; 78
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	91 50       	subi	r25, 0x01	; 1
     3b0:	20 40       	sbci	r18, 0x00	; 0
     3b2:	80 40       	sbci	r24, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x150>
     3b6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	84 e1       	ldi	r24, 0x14	; 20
     3ba:	9c e0       	ldi	r25, 0x0C	; 12
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x15e>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x164>
     3c2:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 4=0
	Set_AD9833(1300,0);
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e8       	ldi	r23, 0x80	; 128
     3cc:	82 ea       	ldi	r24, 0xA2	; 162
     3ce:	94 e4       	ldi	r25, 0x44	; 68
     3d0:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d4:	94 e1       	ldi	r25, 0x14	; 20
     3d6:	2e e4       	ldi	r18, 0x4E	; 78
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	91 50       	subi	r25, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	80 40       	sbci	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x17c>
     3e2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e4:	84 e1       	ldi	r24, 0x14	; 20
     3e6:	9c e0       	ldi	r25, 0x0C	; 12
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x18a>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x190>
     3ee:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 5=1
	Set_AD9833(1100,0);
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e8       	ldi	r23, 0x80	; 128
     3f8:	89 e8       	ldi	r24, 0x89	; 137
     3fa:	94 e4       	ldi	r25, 0x44	; 68
     3fc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	94 e1       	ldi	r25, 0x14	; 20
     402:	2e e4       	ldi	r18, 0x4E	; 78
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	91 50       	subi	r25, 0x01	; 1
     408:	20 40       	sbci	r18, 0x00	; 0
     40a:	80 40       	sbci	r24, 0x00	; 0
     40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     410:	84 e1       	ldi	r24, 0x14	; 20
     412:	9c e0       	ldi	r25, 0x0C	; 12
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//bit 6=1
	Set_AD9833(1100,0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e8       	ldi	r23, 0x80	; 128
     424:	89 e8       	ldi	r24, 0x89	; 137
     426:	94 e4       	ldi	r25, 0x44	; 68
     428:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42c:	94 e1       	ldi	r25, 0x14	; 20
     42e:	2e e4       	ldi	r18, 0x4E	; 78
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	91 50       	subi	r25, 0x01	; 1
     434:	20 40       	sbci	r18, 0x00	; 0
     436:	80 40       	sbci	r24, 0x00	; 0
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	84 e1       	ldi	r24, 0x14	; 20
     43e:	9c e0       	ldi	r25, 0x0C	; 12
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//Parity bit
	Set_AD9833(1300,0);
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e8       	ldi	r23, 0x80	; 128
     450:	82 ea       	ldi	r24, 0xA2	; 162
     452:	94 e4       	ldi	r25, 0x44	; 68
     454:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	94 e1       	ldi	r25, 0x14	; 20
     45a:	2e e4       	ldi	r18, 0x4E	; 78
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	91 50       	subi	r25, 0x01	; 1
     460:	20 40       	sbci	r18, 0x00	; 0
     462:	80 40       	sbci	r24, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     468:	84 e1       	ldi	r24, 0x14	; 20
     46a:	9c e0       	ldi	r25, 0x0C	; 12
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     472:	00 00       	nop
	_delay_ms(29);
	_delay_us(839);
	//stop bit
	Set_AD9833(1200,0);
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	86 e9       	ldi	r24, 0x96	; 150
     47e:	94 e4       	ldi	r25, 0x44	; 68
     480:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     484:	94 e1       	ldi	r25, 0x14	; 20
     486:	2e e4       	ldi	r18, 0x4E	; 78
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	91 50       	subi	r25, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	9c e0       	ldi	r25, 0x0C	; 12
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49e:	00 00       	nop
     4a0:	c0 e8       	ldi	r28, 0x80	; 128
     4a2:	d0 e0       	ldi	r29, 0x00	; 0

	//image data
	for (int i=1;i<=128;i++)
	{
	//Sync Pulse
	Set_AD9833(1200,0);
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	86 e9       	ldi	r24, 0x96	; 150
     4ae:	94 e4       	ldi	r25, 0x44	; 68
     4b0:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b4:	91 ee       	ldi	r25, 0xE1	; 225
     4b6:	2a ed       	ldi	r18, 0xDA	; 218
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	91 50       	subi	r25, 0x01	; 1
     4bc:	20 40       	sbci	r18, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c2:	8c e1       	ldi	r24, 0x1C	; 28
     4c4:	9c e0       	ldi	r25, 0x0C	; 12
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4ca:	00 00       	nop
	_delay_ms(19);	_delay_us(841);		//Time in protocol minus programming time of Set_AD9833()
	
	//Porch
	Set_AD9833(1500,0);
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e8       	ldi	r23, 0x80	; 128
     4d4:	8b eb       	ldi	r24, 0xBB	; 187
     4d6:	94 e4       	ldi	r25, 0x44	; 68
     4d8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	86 e6       	ldi	r24, 0x66	; 102
     4de:	9e e0       	ldi	r25, 0x0E	; 14
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4e4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	83 e4       	ldi	r24, 0x43	; 67
     4e8:	9d e0       	ldi	r25, 0x0D	; 13
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
	_delay_ms(1);	_delay_us(921);		//Time in protocol minus programming time of Set_AD9833()
	
	//Color transmission	
	cont=0;								// variable for maintaining count of pixels
     4ee:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <cont+0x1>
     4f2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <cont>
	global_frequency=freqY1;			//initialization for first pixel
     4f6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     4fa:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     4fe:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     502:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     506:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     50a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     50e:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     512:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
	sei();						
     516:	78 94       	sei
	TCCR1B|=(1<<CS10)|(1<<WGM12);
     518:	8e b5       	in	r24, 0x2e	; 46
     51a:	89 60       	ori	r24, 0x09	; 9
     51c:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);
     51e:	89 b7       	in	r24, 0x39	; 57
     520:	80 61       	ori	r24, 0x10	; 16
     522:	89 bf       	out	0x39, r24	; 57
	//TCNT1=65534;
	OCR1A=TEMP;
     524:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     528:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     52c:	9b bd       	out	0x2b, r25	; 43
     52e:	8a bd       	out	0x2a, r24	; 42
	while(cont<=1280);					// wait loop for interrupts  to complete
     530:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <cont>
     534:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <cont+0x1>
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	95 40       	sbci	r25, 0x05	; 5
     53c:	cc f3       	brlt	.-14     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	cli();
     53e:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
     540:	89 b7       	in	r24, 0x39	; 57
     542:	8f 7e       	andi	r24, 0xEF	; 239
     544:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
     546:	1e bc       	out	0x2e, r1	; 46
     548:	21 97       	sbiw	r28, 0x01	; 1
	_delay_ms(29);
	_delay_us(839);
	}

	//image data
	for (int i=1;i<=128;i++)
     54a:	09 f0       	breq	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	ab cf       	rjmp	.-170    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

}

	}

    Set_AD9833(0x00,0);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	cb 01       	movw	r24, r22
     558:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
     55c:	ff cf       	rjmp	.-2      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>

0000055e <__vector_7>:
	}

}

ISR(TIMER1_COMPA_vect)
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
// 	else if(cont==640) global_frequency = freqBY1;
// 	else if(cont==960) global_frequency = freqY1;

//pattern of 2 colors 	

	if(((cont-1)%20)==0) 
     590:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <cont>
     594:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <cont+0x1>
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	64 e1       	ldi	r22, 0x14	; 20
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     5a2:	89 2b       	or	r24, r25
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_7+0x4a>
     5a6:	db c0       	rjmp	.+438    	; 0x75e <__vector_7+0x200>
	{
		t = (cont-1)/20;
     5a8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <cont>
     5ac:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <cont+0x1>
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	64 e1       	ldi	r22, 0x14	; 20
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     5ba:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <t+0x1>
     5be:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <t>
		if((t%2)==0)
     5c2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     5c6:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     5ca:	80 fd       	sbrc	r24, 0
     5cc:	5d c0       	rjmp	.+186    	; 0x688 <__vector_7+0x12a>
		{
			if(t<15) global_frequency = freqY1;
     5ce:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     5d2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     5d6:	0f 97       	sbiw	r24, 0x0f	; 15
     5d8:	8c f4       	brge	.+34     	; 0x5fc <__vector_7+0x9e>
     5da:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     5de:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     5e2:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     5e6:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     5ea:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     5ee:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     5f2:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     5f6:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     5fa:	b1 c0       	rjmp	.+354    	; 0x75e <__vector_7+0x200>
			else if(t<31) global_frequency = freqRY1;
     5fc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     600:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     604:	4f 97       	sbiw	r24, 0x1f	; 31
     606:	8c f4       	brge	.+34     	; 0x62a <__vector_7+0xcc>
     608:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <freqRY1>
     60c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <freqRY1+0x1>
     610:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <freqRY1+0x2>
     614:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <freqRY1+0x3>
     618:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     61c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     620:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     624:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     628:	9a c0       	rjmp	.+308    	; 0x75e <__vector_7+0x200>
			else if(t<47) global_frequency = freqBY1;
     62a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     62e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     632:	8f 97       	sbiw	r24, 0x2f	; 47
     634:	8c f4       	brge	.+34     	; 0x658 <__vector_7+0xfa>
     636:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <freqBY1>
     63a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <freqBY1+0x1>
     63e:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <freqBY1+0x2>
     642:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <freqBY1+0x3>
     646:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     64a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     64e:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     652:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     656:	83 c0       	rjmp	.+262    	; 0x75e <__vector_7+0x200>
			else if(t<63) global_frequency = freqY1;
     658:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     65c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     660:	cf 97       	sbiw	r24, 0x3f	; 63
     662:	0c f0       	brlt	.+2      	; 0x666 <__vector_7+0x108>
     664:	7c c0       	rjmp	.+248    	; 0x75e <__vector_7+0x200>
     666:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <freqY1>
     66a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <freqY1+0x1>
     66e:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <freqY1+0x2>
     672:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <freqY1+0x3>
     676:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     67a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     67e:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     682:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     686:	6b c0       	rjmp	.+214    	; 0x75e <__vector_7+0x200>
		}
		else if((t%2)==1)
     688:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     68c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     690:	81 70       	andi	r24, 0x01	; 1
     692:	90 78       	andi	r25, 0x80	; 128
     694:	99 23       	and	r25, r25
     696:	24 f4       	brge	.+8      	; 0x6a0 <__vector_7+0x142>
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	8e 6f       	ori	r24, 0xFE	; 254
     69c:	9f 6f       	ori	r25, 0xFF	; 255
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <__vector_7+0x148>
     6a4:	5c c0       	rjmp	.+184    	; 0x75e <__vector_7+0x200>
		{
			if(t<16) global_frequency = freqY2;
     6a6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     6aa:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     6ae:	40 97       	sbiw	r24, 0x10	; 16
     6b0:	8c f4       	brge	.+34     	; 0x6d4 <__vector_7+0x176>
     6b2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <freqY2>
     6b6:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <freqY2+0x1>
     6ba:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <freqY2+0x2>
     6be:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <freqY2+0x3>
     6c2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     6c6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     6ca:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     6ce:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     6d2:	45 c0       	rjmp	.+138    	; 0x75e <__vector_7+0x200>
			else if(t<32) global_frequency = freqRY2;
     6d4:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     6d8:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     6dc:	80 97       	sbiw	r24, 0x20	; 32
     6de:	8c f4       	brge	.+34     	; 0x702 <__vector_7+0x1a4>
     6e0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <freqRY2>
     6e4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <freqRY2+0x1>
     6e8:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <freqRY2+0x2>
     6ec:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <freqRY2+0x3>
     6f0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     6f4:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     6f8:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     6fc:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     700:	2e c0       	rjmp	.+92     	; 0x75e <__vector_7+0x200>
			else if(t<48) global_frequency = freqBY2;
     702:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     706:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     70a:	c0 97       	sbiw	r24, 0x30	; 48
     70c:	8c f4       	brge	.+34     	; 0x730 <__vector_7+0x1d2>
     70e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     712:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     716:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__data_end+0x2>
     71a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__data_end+0x3>
     71e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     722:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     726:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     72a:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
     72e:	17 c0       	rjmp	.+46     	; 0x75e <__vector_7+0x200>
			else if(t<64) global_frequency = freqY2;
     730:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <t>
     734:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <t+0x1>
     738:	80 34       	cpi	r24, 0x40	; 64
     73a:	91 05       	cpc	r25, r1
     73c:	84 f4       	brge	.+32     	; 0x75e <__vector_7+0x200>
     73e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <freqY2>
     742:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <freqY2+0x1>
     746:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <freqY2+0x2>
     74a:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <freqY2+0x3>
     74e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <global_frequency>
     752:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <global_frequency+0x1>
     756:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <global_frequency+0x2>
     75a:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <global_frequency+0x3>
		}
		
	}
	next_phase = getphase(prev_phase,prev_freq,532);		//calculation of phase to be added in new wave
     75e:	80 90 a6 00 	lds	r8, 0x00A6	; 0x8000a6 <prev_freq>
     762:	90 90 a7 00 	lds	r9, 0x00A7	; 0x8000a7 <prev_freq+0x1>
     766:	a0 90 a8 00 	lds	r10, 0x00A8	; 0x8000a8 <prev_freq+0x2>
     76a:	b0 90 a9 00 	lds	r11, 0x00A9	; 0x8000a9 <prev_freq+0x3>
     76e:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <prev_phase>
     772:	70 91 a3 00 	lds	r23, 0x00A3	; 0x8000a3 <prev_phase+0x1>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     77e:	e1 2c       	mov	r14, r1
     780:	f1 2c       	mov	r15, r1
     782:	05 e0       	ldi	r16, 0x05	; 5
     784:	14 e4       	ldi	r17, 0x44	; 68
     786:	a5 01       	movw	r20, r10
     788:	94 01       	movw	r18, r8
     78a:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8getphasefff>
     78e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <next_phase+0x1>
     792:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <next_phase>
	cont++;
     796:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <cont>
     79a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <cont+0x1>
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <cont+0x1>
     7a4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <cont>
	Set_AD9833(global_frequency,next_phase);
     7a8:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <next_phase>
     7ac:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <next_phase+0x1>
     7b0:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <global_frequency>
     7b4:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <global_frequency+0x1>
     7b8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <global_frequency+0x2>
     7bc:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <global_frequency+0x3>
     7c0:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	
// 	if(prev_freq==global_frequency) ;
// 	else {}
	
 	prev_phase=next_phase;
     7c4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <next_phase>
     7c8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <next_phase+0x1>
     7cc:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <prev_phase+0x1>
     7d0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <prev_phase>
	prev_freq = global_frequency;
     7d4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <global_frequency>
     7d8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <global_frequency+0x1>
     7dc:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <global_frequency+0x2>
     7e0:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <global_frequency+0x3>
     7e4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <prev_freq>
     7e8:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <prev_freq+0x1>
     7ec:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <prev_freq+0x2>
     7f0:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <prev_freq+0x3>
	
}
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	bf 90       	pop	r11
     816:	af 90       	pop	r10
     818:	9f 90       	pop	r9
     81a:	8f 90       	pop	r8
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_12>:
	
     826:	18 95       	reti

00000828 <_GLOBAL__sub_I_TEMP>:
     828:	4f 92       	push	r4
     82a:	5f 92       	push	r5
     82c:	6f 92       	push	r6
     82e:	7f 92       	push	r7
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	28 97       	sbiw	r28, 0x08	; 8
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
#include <avr/interrupt.h>
#include <util/atomic.h>


int TEMP = ((((F_CPU)/(TIMER1_PRESCALER*1000000))*557)-1);			//Counter Cycles for required time
int TICKS = 65535-TEMP;												//Value for TCNT1 to implement timing by overflow
     854:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <TEMP>
     858:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TEMP+0x1>
     85c:	80 95       	com	r24
     85e:	90 95       	com	r25
     860:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <TICKS+0x1>
     864:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <TICKS>
	return (unsigned int) ph;
}

//color conversion from RGB to Y/RY/BY
int R1=255,G1=0,B1=0;
float Y1 = 16.0 + (.003906 * ((65.738 * R1) + (129.057 * G1) + (25.064 * B1)));
     868:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <R1>
     86c:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <R1+0x1>
     870:	07 2e       	mov	r0, r23
     872:	00 0c       	add	r0, r0
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	7a 83       	std	Y+2, r23	; 0x02
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <G1>
     888:	70 91 9d 00 	lds	r23, 0x009D	; 0x80009d <G1+0x1>
     88c:	07 2e       	mov	r0, r23
     88e:	00 0c       	add	r0, r0
     890:	88 0b       	sbc	r24, r24
     892:	99 0b       	sbc	r25, r25
     894:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     898:	6d 83       	std	Y+5, r22	; 0x05
     89a:	7e 83       	std	Y+6, r23	; 0x06
     89c:	8f 83       	std	Y+7, r24	; 0x07
     89e:	98 87       	std	Y+8, r25	; 0x08
     8a0:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <B1>
     8a4:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <B1+0x1>
     8a8:	07 2e       	mov	r0, r23
     8aa:	00 0c       	add	r0, r0
     8ac:	88 0b       	sbc	r24, r24
     8ae:	99 0b       	sbc	r25, r25
     8b0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
     8b8:	2b ed       	ldi	r18, 0xDB	; 219
     8ba:	39 e7       	ldi	r19, 0x79	; 121
     8bc:	43 e8       	ldi	r20, 0x83	; 131
     8be:	52 e4       	ldi	r21, 0x42	; 66
     8c0:	69 81       	ldd	r22, Y+1	; 0x01
     8c2:	7a 81       	ldd	r23, Y+2	; 0x02
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	9c 81       	ldd	r25, Y+4	; 0x04
     8c8:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     8cc:	4b 01       	movw	r8, r22
     8ce:	5c 01       	movw	r10, r24
     8d0:	28 e9       	ldi	r18, 0x98	; 152
     8d2:	3e e0       	ldi	r19, 0x0E	; 14
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	53 e4       	ldi	r21, 0x43	; 67
     8d8:	6d 81       	ldd	r22, Y+5	; 0x05
     8da:	7e 81       	ldd	r23, Y+6	; 0x06
     8dc:	8f 81       	ldd	r24, Y+7	; 0x07
     8de:	98 85       	ldd	r25, Y+8	; 0x08
     8e0:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c5 01       	movw	r24, r10
     8ea:	b4 01       	movw	r22, r8
     8ec:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     8f0:	4b 01       	movw	r8, r22
     8f2:	5c 01       	movw	r10, r24
     8f4:	22 e1       	ldi	r18, 0x12	; 18
     8f6:	33 e8       	ldi	r19, 0x83	; 131
     8f8:	48 ec       	ldi	r20, 0xC8	; 200
     8fa:	51 e4       	ldi	r21, 0x41	; 65
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     910:	2e ec       	ldi	r18, 0xCE	; 206
     912:	3b ef       	ldi	r19, 0xFB	; 251
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	5b e3       	ldi	r21, 0x3B	; 59
     918:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e8       	ldi	r20, 0x80	; 128
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     928:	2b 01       	movw	r4, r22
     92a:	3c 01       	movw	r6, r24
     92c:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <Y1>
     930:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <Y1+0x1>
     934:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Y1+0x2>
     938:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Y1+0x3>
float RY1 = 128.0 + (.003906 * ((112.439 * R1) + (-94.154 * G1) + (-18.285 * B1)));
     93c:	25 ec       	ldi	r18, 0xC5	; 197
     93e:	30 ee       	ldi	r19, 0xE0	; 224
     940:	40 ee       	ldi	r20, 0xE0	; 224
     942:	52 e4       	ldi	r21, 0x42	; 66
     944:	69 81       	ldd	r22, Y+1	; 0x01
     946:	7a 81       	ldd	r23, Y+2	; 0x02
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
     954:	29 ed       	ldi	r18, 0xD9	; 217
     956:	3e e4       	ldi	r19, 0x4E	; 78
     958:	4c eb       	ldi	r20, 0xBC	; 188
     95a:	52 ec       	ldi	r21, 0xC2	; 194
     95c:	6d 81       	ldd	r22, Y+5	; 0x05
     95e:	7e 81       	ldd	r23, Y+6	; 0x06
     960:	8f 81       	ldd	r24, Y+7	; 0x07
     962:	98 85       	ldd	r25, Y+8	; 0x08
     964:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	c5 01       	movw	r24, r10
     96e:	b4 01       	movw	r22, r8
     970:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     974:	4b 01       	movw	r8, r22
     976:	5c 01       	movw	r10, r24
     978:	2e ea       	ldi	r18, 0xAE	; 174
     97a:	37 e4       	ldi	r19, 0x47	; 71
     97c:	42 e9       	ldi	r20, 0x92	; 146
     97e:	51 ec       	ldi	r21, 0xC1	; 193
     980:	c7 01       	movw	r24, r14
     982:	b6 01       	movw	r22, r12
     984:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
     98c:	c5 01       	movw	r24, r10
     98e:	b4 01       	movw	r22, r8
     990:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     994:	2e ec       	ldi	r18, 0xCE	; 206
     996:	3b ef       	ldi	r19, 0xFB	; 251
     998:	4f e7       	ldi	r20, 0x7F	; 127
     99a:	5b e3       	ldi	r21, 0x3B	; 59
     99c:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	53 e4       	ldi	r21, 0x43	; 67
     9a8:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     9ac:	4b 01       	movw	r8, r22
     9ae:	5c 01       	movw	r10, r24
     9b0:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <RY1>
     9b4:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <RY1+0x1>
     9b8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <RY1+0x2>
     9bc:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <RY1+0x3>
float BY1 = 128.0 + (.003906 * ((-37.945 * R1) + (-74.494 * G1) + (112.439 * B1)));
     9c0:	2e ea       	ldi	r18, 0xAE	; 174
     9c2:	37 ec       	ldi	r19, 0xC7	; 199
     9c4:	47 e1       	ldi	r20, 0x17	; 23
     9c6:	52 ec       	ldi	r21, 0xC2	; 194
     9c8:	69 81       	ldd	r22, Y+1	; 0x01
     9ca:	7a 81       	ldd	r23, Y+2	; 0x02
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	9c 81       	ldd	r25, Y+4	; 0x04
     9d0:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     9d4:	69 83       	std	Y+1, r22	; 0x01
     9d6:	7a 83       	std	Y+2, r23	; 0x02
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	9c 83       	std	Y+4, r25	; 0x04
     9dc:	2e ee       	ldi	r18, 0xEE	; 238
     9de:	3c ef       	ldi	r19, 0xFC	; 252
     9e0:	44 e9       	ldi	r20, 0x94	; 148
     9e2:	52 ec       	ldi	r21, 0xC2	; 194
     9e4:	6d 81       	ldd	r22, Y+5	; 0x05
     9e6:	7e 81       	ldd	r23, Y+6	; 0x06
     9e8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ea:	98 85       	ldd	r25, Y+8	; 0x08
     9ec:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	69 81       	ldd	r22, Y+1	; 0x01
     9f6:	7a 81       	ldd	r23, Y+2	; 0x02
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     a00:	69 83       	std	Y+1, r22	; 0x01
     a02:	7a 83       	std	Y+2, r23	; 0x02
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	25 ec       	ldi	r18, 0xC5	; 197
     a0a:	30 ee       	ldi	r19, 0xE0	; 224
     a0c:	40 ee       	ldi	r20, 0xE0	; 224
     a0e:	52 e4       	ldi	r21, 0x42	; 66
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     a18:	9b 01       	movw	r18, r22
     a1a:	ac 01       	movw	r20, r24
     a1c:	69 81       	ldd	r22, Y+1	; 0x01
     a1e:	7a 81       	ldd	r23, Y+2	; 0x02
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     a28:	2e ec       	ldi	r18, 0xCE	; 206
     a2a:	3b ef       	ldi	r19, 0xFB	; 251
     a2c:	4f e7       	ldi	r20, 0x7F	; 127
     a2e:	5b e3       	ldi	r21, 0x3B	; 59
     a30:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	53 e4       	ldi	r21, 0x43	; 67
     a3c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     a40:	6b 01       	movw	r12, r22
     a42:	7c 01       	movw	r14, r24
     a44:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <BY1>
     a48:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <BY1+0x1>
     a4c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <BY1+0x2>
     a50:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <BY1+0x3>
//frequency calculation and documented values
volatile float freqY1  =  1500 + (Y1 * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
     a54:	29 ec       	ldi	r18, 0xC9	; 201
     a56:	38 ec       	ldi	r19, 0xC8	; 200
     a58:	48 e4       	ldi	r20, 0x48	; 72
     a5a:	50 e4       	ldi	r21, 0x40	; 64
     a5c:	c3 01       	movw	r24, r6
     a5e:	b2 01       	movw	r22, r4
     a60:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e8       	ldi	r19, 0x80	; 128
     a68:	4b eb       	ldi	r20, 0xBB	; 187
     a6a:	54 e4       	ldi	r21, 0x44	; 68
     a6c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     a70:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <freqY1>
     a74:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <freqY1+0x1>
     a78:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <freqY1+0x2>
     a7c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <freqY1+0x3>
volatile float freqRY1 =   1500 + (RY1 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
     a80:	29 ec       	ldi	r18, 0xC9	; 201
     a82:	38 ec       	ldi	r19, 0xC8	; 200
     a84:	48 e4       	ldi	r20, 0x48	; 72
     a86:	50 e4       	ldi	r21, 0x40	; 64
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e8       	ldi	r19, 0x80	; 128
     a94:	4b eb       	ldi	r20, 0xBB	; 187
     a96:	54 e4       	ldi	r21, 0x44	; 68
     a98:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     a9c:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <freqRY1>
     aa0:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <freqRY1+0x1>
     aa4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <freqRY1+0x2>
     aa8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <freqRY1+0x3>
volatile float freqBY1 =  1500 + (BY1 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
     aac:	29 ec       	ldi	r18, 0xC9	; 201
     aae:	38 ec       	ldi	r19, 0xC8	; 200
     ab0:	48 e4       	ldi	r20, 0x48	; 72
     ab2:	50 e4       	ldi	r21, 0x40	; 64
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 01       	movw	r22, r12
     ab8:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e8       	ldi	r19, 0x80	; 128
     ac0:	4b eb       	ldi	r20, 0xBB	; 187
     ac2:	54 e4       	ldi	r21, 0x44	; 68
     ac4:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     ac8:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <freqBY1>
     acc:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <freqBY1+0x1>
     ad0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <freqBY1+0x2>
     ad4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <freqBY1+0x3>

int R2=0,G2=255,B2=0;
float Y2 = 16.0 + (.003906 * ((65.738 * R2) + (129.057 * G2) + (25.064 * B2)));
     ad8:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <R2>
     adc:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <R2+0x1>
     ae0:	07 2e       	mov	r0, r23
     ae2:	00 0c       	add	r0, r0
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     aec:	69 83       	std	Y+1, r22	; 0x01
     aee:	7a 83       	std	Y+2, r23	; 0x02
     af0:	8b 83       	std	Y+3, r24	; 0x03
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <G2>
     af8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <G2+0x1>
     afc:	07 2e       	mov	r0, r23
     afe:	00 0c       	add	r0, r0
     b00:	88 0b       	sbc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     b08:	6d 83       	std	Y+5, r22	; 0x05
     b0a:	7e 83       	std	Y+6, r23	; 0x06
     b0c:	8f 83       	std	Y+7, r24	; 0x07
     b0e:	98 87       	std	Y+8, r25	; 0x08
     b10:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <B2>
     b14:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <B2+0x1>
     b18:	07 2e       	mov	r0, r23
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
     b28:	2b ed       	ldi	r18, 0xDB	; 219
     b2a:	39 e7       	ldi	r19, 0x79	; 121
     b2c:	43 e8       	ldi	r20, 0x83	; 131
     b2e:	52 e4       	ldi	r21, 0x42	; 66
     b30:	69 81       	ldd	r22, Y+1	; 0x01
     b32:	7a 81       	ldd	r23, Y+2	; 0x02
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     b3c:	4b 01       	movw	r8, r22
     b3e:	5c 01       	movw	r10, r24
     b40:	28 e9       	ldi	r18, 0x98	; 152
     b42:	3e e0       	ldi	r19, 0x0E	; 14
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	53 e4       	ldi	r21, 0x43	; 67
     b48:	6d 81       	ldd	r22, Y+5	; 0x05
     b4a:	7e 81       	ldd	r23, Y+6	; 0x06
     b4c:	8f 81       	ldd	r24, Y+7	; 0x07
     b4e:	98 85       	ldd	r25, Y+8	; 0x08
     b50:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
     b58:	c5 01       	movw	r24, r10
     b5a:	b4 01       	movw	r22, r8
     b5c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     b60:	4b 01       	movw	r8, r22
     b62:	5c 01       	movw	r10, r24
     b64:	22 e1       	ldi	r18, 0x12	; 18
     b66:	33 e8       	ldi	r19, 0x83	; 131
     b68:	48 ec       	ldi	r20, 0xC8	; 200
     b6a:	51 e4       	ldi	r21, 0x41	; 65
     b6c:	c7 01       	movw	r24, r14
     b6e:	b6 01       	movw	r22, r12
     b70:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c5 01       	movw	r24, r10
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     b80:	2e ec       	ldi	r18, 0xCE	; 206
     b82:	3b ef       	ldi	r19, 0xFB	; 251
     b84:	4f e7       	ldi	r20, 0x7F	; 127
     b86:	5b e3       	ldi	r21, 0x3B	; 59
     b88:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	51 e4       	ldi	r21, 0x41	; 65
     b94:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     b98:	2b 01       	movw	r4, r22
     b9a:	3c 01       	movw	r6, r24
     b9c:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <Y2>
     ba0:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <Y2+0x1>
     ba4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Y2+0x2>
     ba8:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <Y2+0x3>
float RY2 = 128.0 + (.003906 * ((112.439 * R2) + (-94.154 * G2) + (-18.285 * B2)));
     bac:	25 ec       	ldi	r18, 0xC5	; 197
     bae:	30 ee       	ldi	r19, 0xE0	; 224
     bb0:	40 ee       	ldi	r20, 0xE0	; 224
     bb2:	52 e4       	ldi	r21, 0x42	; 66
     bb4:	69 81       	ldd	r22, Y+1	; 0x01
     bb6:	7a 81       	ldd	r23, Y+2	; 0x02
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     bc0:	4b 01       	movw	r8, r22
     bc2:	5c 01       	movw	r10, r24
     bc4:	29 ed       	ldi	r18, 0xD9	; 217
     bc6:	3e e4       	ldi	r19, 0x4E	; 78
     bc8:	4c eb       	ldi	r20, 0xBC	; 188
     bca:	52 ec       	ldi	r21, 0xC2	; 194
     bcc:	6d 81       	ldd	r22, Y+5	; 0x05
     bce:	7e 81       	ldd	r23, Y+6	; 0x06
     bd0:	8f 81       	ldd	r24, Y+7	; 0x07
     bd2:	98 85       	ldd	r25, Y+8	; 0x08
     bd4:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	c5 01       	movw	r24, r10
     bde:	b4 01       	movw	r22, r8
     be0:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     be4:	4b 01       	movw	r8, r22
     be6:	5c 01       	movw	r10, r24
     be8:	2e ea       	ldi	r18, 0xAE	; 174
     bea:	37 e4       	ldi	r19, 0x47	; 71
     bec:	42 e9       	ldi	r20, 0x92	; 146
     bee:	51 ec       	ldi	r21, 0xC1	; 193
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     bf8:	9b 01       	movw	r18, r22
     bfa:	ac 01       	movw	r20, r24
     bfc:	c5 01       	movw	r24, r10
     bfe:	b4 01       	movw	r22, r8
     c00:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     c04:	2e ec       	ldi	r18, 0xCE	; 206
     c06:	3b ef       	ldi	r19, 0xFB	; 251
     c08:	4f e7       	ldi	r20, 0x7F	; 127
     c0a:	5b e3       	ldi	r21, 0x3B	; 59
     c0c:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	53 e4       	ldi	r21, 0x43	; 67
     c18:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     c1c:	4b 01       	movw	r8, r22
     c1e:	5c 01       	movw	r10, r24
     c20:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <RY2>
     c24:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <RY2+0x1>
     c28:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <RY2+0x2>
     c2c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <RY2+0x3>
float BY2 = 128.0 + (.003906 * ((-37.945 * R2) + (-74.494 * G2) + (112.439 * B2)));
     c30:	2e ea       	ldi	r18, 0xAE	; 174
     c32:	37 ec       	ldi	r19, 0xC7	; 199
     c34:	47 e1       	ldi	r20, 0x17	; 23
     c36:	52 ec       	ldi	r21, 0xC2	; 194
     c38:	69 81       	ldd	r22, Y+1	; 0x01
     c3a:	7a 81       	ldd	r23, Y+2	; 0x02
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     c44:	69 83       	std	Y+1, r22	; 0x01
     c46:	7a 83       	std	Y+2, r23	; 0x02
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	9c 83       	std	Y+4, r25	; 0x04
     c4c:	2e ee       	ldi	r18, 0xEE	; 238
     c4e:	3c ef       	ldi	r19, 0xFC	; 252
     c50:	44 e9       	ldi	r20, 0x94	; 148
     c52:	52 ec       	ldi	r21, 0xC2	; 194
     c54:	6d 81       	ldd	r22, Y+5	; 0x05
     c56:	7e 81       	ldd	r23, Y+6	; 0x06
     c58:	8f 81       	ldd	r24, Y+7	; 0x07
     c5a:	98 85       	ldd	r25, Y+8	; 0x08
     c5c:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	69 81       	ldd	r22, Y+1	; 0x01
     c66:	7a 81       	ldd	r23, Y+2	; 0x02
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     c70:	69 83       	std	Y+1, r22	; 0x01
     c72:	7a 83       	std	Y+2, r23	; 0x02
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	25 ec       	ldi	r18, 0xC5	; 197
     c7a:	30 ee       	ldi	r19, 0xE0	; 224
     c7c:	40 ee       	ldi	r20, 0xE0	; 224
     c7e:	52 e4       	ldi	r21, 0x42	; 66
     c80:	c7 01       	movw	r24, r14
     c82:	b6 01       	movw	r22, r12
     c84:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     c88:	9b 01       	movw	r18, r22
     c8a:	ac 01       	movw	r20, r24
     c8c:	69 81       	ldd	r22, Y+1	; 0x01
     c8e:	7a 81       	ldd	r23, Y+2	; 0x02
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     c98:	2e ec       	ldi	r18, 0xCE	; 206
     c9a:	3b ef       	ldi	r19, 0xFB	; 251
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	5b e3       	ldi	r21, 0x3B	; 59
     ca0:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	53 e4       	ldi	r21, 0x43	; 67
     cac:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     cb0:	6b 01       	movw	r12, r22
     cb2:	7c 01       	movw	r14, r24
     cb4:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <BY2>
     cb8:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <BY2+0x1>
     cbc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <BY2+0x2>
     cc0:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <BY2+0x3>
//frequency calculation and documented values
volatile float freqY2  =  1500 + (Y2  * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)
     cc4:	29 ec       	ldi	r18, 0xC9	; 201
     cc6:	38 ec       	ldi	r19, 0xC8	; 200
     cc8:	48 e4       	ldi	r20, 0x48	; 72
     cca:	50 e4       	ldi	r21, 0x40	; 64
     ccc:	c3 01       	movw	r24, r6
     cce:	b2 01       	movw	r22, r4
     cd0:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e8       	ldi	r19, 0x80	; 128
     cd8:	4b eb       	ldi	r20, 0xBB	; 187
     cda:	54 e4       	ldi	r21, 0x44	; 68
     cdc:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     ce0:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <freqY2>
     ce4:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <freqY2+0x1>
     ce8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <freqY2+0x2>
     cec:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <freqY2+0x3>
volatile float freqRY2 =  1500 + (RY2 * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
     cf0:	29 ec       	ldi	r18, 0xC9	; 201
     cf2:	38 ec       	ldi	r19, 0xC8	; 200
     cf4:	48 e4       	ldi	r20, 0x48	; 72
     cf6:	50 e4       	ldi	r21, 0x40	; 64
     cf8:	c5 01       	movw	r24, r10
     cfa:	b4 01       	movw	r22, r8
     cfc:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e8       	ldi	r19, 0x80	; 128
     d04:	4b eb       	ldi	r20, 0xBB	; 187
     d06:	54 e4       	ldi	r21, 0x44	; 68
     d08:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     d0c:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <freqRY2>
     d10:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <freqRY2+0x1>
     d14:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <freqRY2+0x2>
     d18:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <freqRY2+0x3>
volatile float freqBY2 =  1500 + (BY2 * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)
     d1c:	29 ec       	ldi	r18, 0xC9	; 201
     d1e:	38 ec       	ldi	r19, 0xC8	; 200
     d20:	48 e4       	ldi	r20, 0x48	; 72
     d22:	50 e4       	ldi	r21, 0x40	; 64
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e8       	ldi	r19, 0x80	; 128
     d30:	4b eb       	ldi	r20, 0xBB	; 187
     d32:	54 e4       	ldi	r21, 0x44	; 68
     d34:	0e 94 ba 06 	call	0xd74	; 0xd74 <__addsf3>
     d38:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end>
     d3c:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x1>
     d40:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end+0x2>
     d44:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x3>
 	prev_phase=next_phase;
	prev_freq = global_frequency;
	
}
	
     d48:	28 96       	adiw	r28, 0x08	; 8
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	9f 90       	pop	r9
     d66:	8f 90       	pop	r8
     d68:	7f 90       	pop	r7
     d6a:	6f 90       	pop	r6
     d6c:	5f 90       	pop	r5
     d6e:	4f 90       	pop	r4
     d70:	08 95       	ret

00000d72 <__subsf3>:
     d72:	50 58       	subi	r21, 0x80	; 128

00000d74 <__addsf3>:
     d74:	bb 27       	eor	r27, r27
     d76:	aa 27       	eor	r26, r26
     d78:	0e 94 d1 06 	call	0xda2	; 0xda2 <__addsf3x>
     d7c:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_round>
     d80:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscA>
     d84:	38 f0       	brcs	.+14     	; 0xd94 <__addsf3+0x20>
     d86:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_pscB>
     d8a:	20 f0       	brcs	.+8      	; 0xd94 <__addsf3+0x20>
     d8c:	39 f4       	brne	.+14     	; 0xd9c <__addsf3+0x28>
     d8e:	9f 3f       	cpi	r25, 0xFF	; 255
     d90:	19 f4       	brne	.+6      	; 0xd98 <__addsf3+0x24>
     d92:	26 f4       	brtc	.+8      	; 0xd9c <__addsf3+0x28>
     d94:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_nan>
     d98:	0e f4       	brtc	.+2      	; 0xd9c <__addsf3+0x28>
     d9a:	e0 95       	com	r30
     d9c:	e7 fb       	bst	r30, 7
     d9e:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_inf>

00000da2 <__addsf3x>:
     da2:	e9 2f       	mov	r30, r25
     da4:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_split3>
     da8:	58 f3       	brcs	.-42     	; 0xd80 <__addsf3+0xc>
     daa:	ba 17       	cp	r27, r26
     dac:	62 07       	cpc	r22, r18
     dae:	73 07       	cpc	r23, r19
     db0:	84 07       	cpc	r24, r20
     db2:	95 07       	cpc	r25, r21
     db4:	20 f0       	brcs	.+8      	; 0xdbe <__addsf3x+0x1c>
     db6:	79 f4       	brne	.+30     	; 0xdd6 <__addsf3x+0x34>
     db8:	a6 f5       	brtc	.+104    	; 0xe22 <__addsf3x+0x80>
     dba:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__fp_zero>
     dbe:	0e f4       	brtc	.+2      	; 0xdc2 <__addsf3x+0x20>
     dc0:	e0 95       	com	r30
     dc2:	0b 2e       	mov	r0, r27
     dc4:	ba 2f       	mov	r27, r26
     dc6:	a0 2d       	mov	r26, r0
     dc8:	0b 01       	movw	r0, r22
     dca:	b9 01       	movw	r22, r18
     dcc:	90 01       	movw	r18, r0
     dce:	0c 01       	movw	r0, r24
     dd0:	ca 01       	movw	r24, r20
     dd2:	a0 01       	movw	r20, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	ff 27       	eor	r31, r31
     dd8:	59 1b       	sub	r21, r25
     dda:	99 f0       	breq	.+38     	; 0xe02 <__addsf3x+0x60>
     ddc:	59 3f       	cpi	r21, 0xF9	; 249
     dde:	50 f4       	brcc	.+20     	; 0xdf4 <__addsf3x+0x52>
     de0:	50 3e       	cpi	r21, 0xE0	; 224
     de2:	68 f1       	brcs	.+90     	; 0xe3e <__addsf3x+0x9c>
     de4:	1a 16       	cp	r1, r26
     de6:	f0 40       	sbci	r31, 0x00	; 0
     de8:	a2 2f       	mov	r26, r18
     dea:	23 2f       	mov	r18, r19
     dec:	34 2f       	mov	r19, r20
     dee:	44 27       	eor	r20, r20
     df0:	58 5f       	subi	r21, 0xF8	; 248
     df2:	f3 cf       	rjmp	.-26     	; 0xdda <__addsf3x+0x38>
     df4:	46 95       	lsr	r20
     df6:	37 95       	ror	r19
     df8:	27 95       	ror	r18
     dfa:	a7 95       	ror	r26
     dfc:	f0 40       	sbci	r31, 0x00	; 0
     dfe:	53 95       	inc	r21
     e00:	c9 f7       	brne	.-14     	; 0xdf4 <__addsf3x+0x52>
     e02:	7e f4       	brtc	.+30     	; 0xe22 <__addsf3x+0x80>
     e04:	1f 16       	cp	r1, r31
     e06:	ba 0b       	sbc	r27, r26
     e08:	62 0b       	sbc	r22, r18
     e0a:	73 0b       	sbc	r23, r19
     e0c:	84 0b       	sbc	r24, r20
     e0e:	ba f0       	brmi	.+46     	; 0xe3e <__addsf3x+0x9c>
     e10:	91 50       	subi	r25, 0x01	; 1
     e12:	a1 f0       	breq	.+40     	; 0xe3c <__addsf3x+0x9a>
     e14:	ff 0f       	add	r31, r31
     e16:	bb 1f       	adc	r27, r27
     e18:	66 1f       	adc	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	c2 f7       	brpl	.-16     	; 0xe10 <__addsf3x+0x6e>
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <__addsf3x+0x9c>
     e22:	ba 0f       	add	r27, r26
     e24:	62 1f       	adc	r22, r18
     e26:	73 1f       	adc	r23, r19
     e28:	84 1f       	adc	r24, r20
     e2a:	48 f4       	brcc	.+18     	; 0xe3e <__addsf3x+0x9c>
     e2c:	87 95       	ror	r24
     e2e:	77 95       	ror	r23
     e30:	67 95       	ror	r22
     e32:	b7 95       	ror	r27
     e34:	f7 95       	ror	r31
     e36:	9e 3f       	cpi	r25, 0xFE	; 254
     e38:	08 f0       	brcs	.+2      	; 0xe3c <__addsf3x+0x9a>
     e3a:	b0 cf       	rjmp	.-160    	; 0xd9c <__addsf3+0x28>
     e3c:	93 95       	inc	r25
     e3e:	88 0f       	add	r24, r24
     e40:	08 f0       	brcs	.+2      	; 0xe44 <__addsf3x+0xa2>
     e42:	99 27       	eor	r25, r25
     e44:	ee 0f       	add	r30, r30
     e46:	97 95       	ror	r25
     e48:	87 95       	ror	r24
     e4a:	08 95       	ret

00000e4c <__divsf3>:
     e4c:	0e 94 3a 07 	call	0xe74	; 0xe74 <__divsf3x>
     e50:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_round>
     e54:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_pscB>
     e58:	58 f0       	brcs	.+22     	; 0xe70 <__divsf3+0x24>
     e5a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscA>
     e5e:	40 f0       	brcs	.+16     	; 0xe70 <__divsf3+0x24>
     e60:	29 f4       	brne	.+10     	; 0xe6c <__divsf3+0x20>
     e62:	5f 3f       	cpi	r21, 0xFF	; 255
     e64:	29 f0       	breq	.+10     	; 0xe70 <__divsf3+0x24>
     e66:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_inf>
     e6a:	51 11       	cpse	r21, r1
     e6c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>
     e70:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_nan>

00000e74 <__divsf3x>:
     e74:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_split3>
     e78:	68 f3       	brcs	.-38     	; 0xe54 <__divsf3+0x8>

00000e7a <__divsf3_pse>:
     e7a:	99 23       	and	r25, r25
     e7c:	b1 f3       	breq	.-20     	; 0xe6a <__divsf3+0x1e>
     e7e:	55 23       	and	r21, r21
     e80:	91 f3       	breq	.-28     	; 0xe66 <__divsf3+0x1a>
     e82:	95 1b       	sub	r25, r21
     e84:	55 0b       	sbc	r21, r21
     e86:	bb 27       	eor	r27, r27
     e88:	aa 27       	eor	r26, r26
     e8a:	62 17       	cp	r22, r18
     e8c:	73 07       	cpc	r23, r19
     e8e:	84 07       	cpc	r24, r20
     e90:	38 f0       	brcs	.+14     	; 0xea0 <__divsf3_pse+0x26>
     e92:	9f 5f       	subi	r25, 0xFF	; 255
     e94:	5f 4f       	sbci	r21, 0xFF	; 255
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	aa 1f       	adc	r26, r26
     e9e:	a9 f3       	breq	.-22     	; 0xe8a <__divsf3_pse+0x10>
     ea0:	35 d0       	rcall	.+106    	; 0xf0c <__divsf3_pse+0x92>
     ea2:	0e 2e       	mov	r0, r30
     ea4:	3a f0       	brmi	.+14     	; 0xeb4 <__divsf3_pse+0x3a>
     ea6:	e0 e8       	ldi	r30, 0x80	; 128
     ea8:	32 d0       	rcall	.+100    	; 0xf0e <__divsf3_pse+0x94>
     eaa:	91 50       	subi	r25, 0x01	; 1
     eac:	50 40       	sbci	r21, 0x00	; 0
     eae:	e6 95       	lsr	r30
     eb0:	00 1c       	adc	r0, r0
     eb2:	ca f7       	brpl	.-14     	; 0xea6 <__divsf3_pse+0x2c>
     eb4:	2b d0       	rcall	.+86     	; 0xf0c <__divsf3_pse+0x92>
     eb6:	fe 2f       	mov	r31, r30
     eb8:	29 d0       	rcall	.+82     	; 0xf0c <__divsf3_pse+0x92>
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	88 1f       	adc	r24, r24
     ec0:	bb 1f       	adc	r27, r27
     ec2:	26 17       	cp	r18, r22
     ec4:	37 07       	cpc	r19, r23
     ec6:	48 07       	cpc	r20, r24
     ec8:	ab 07       	cpc	r26, r27
     eca:	b0 e8       	ldi	r27, 0x80	; 128
     ecc:	09 f0       	breq	.+2      	; 0xed0 <__divsf3_pse+0x56>
     ece:	bb 0b       	sbc	r27, r27
     ed0:	80 2d       	mov	r24, r0
     ed2:	bf 01       	movw	r22, r30
     ed4:	ff 27       	eor	r31, r31
     ed6:	93 58       	subi	r25, 0x83	; 131
     ed8:	5f 4f       	sbci	r21, 0xFF	; 255
     eda:	3a f0       	brmi	.+14     	; 0xeea <__divsf3_pse+0x70>
     edc:	9e 3f       	cpi	r25, 0xFE	; 254
     ede:	51 05       	cpc	r21, r1
     ee0:	78 f0       	brcs	.+30     	; 0xf00 <__divsf3_pse+0x86>
     ee2:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_inf>
     ee6:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>
     eea:	5f 3f       	cpi	r21, 0xFF	; 255
     eec:	e4 f3       	brlt	.-8      	; 0xee6 <__divsf3_pse+0x6c>
     eee:	98 3e       	cpi	r25, 0xE8	; 232
     ef0:	d4 f3       	brlt	.-12     	; 0xee6 <__divsf3_pse+0x6c>
     ef2:	86 95       	lsr	r24
     ef4:	77 95       	ror	r23
     ef6:	67 95       	ror	r22
     ef8:	b7 95       	ror	r27
     efa:	f7 95       	ror	r31
     efc:	9f 5f       	subi	r25, 0xFF	; 255
     efe:	c9 f7       	brne	.-14     	; 0xef2 <__divsf3_pse+0x78>
     f00:	88 0f       	add	r24, r24
     f02:	91 1d       	adc	r25, r1
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret
     f0c:	e1 e0       	ldi	r30, 0x01	; 1
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	bb 1f       	adc	r27, r27
     f16:	62 17       	cp	r22, r18
     f18:	73 07       	cpc	r23, r19
     f1a:	84 07       	cpc	r24, r20
     f1c:	ba 07       	cpc	r27, r26
     f1e:	20 f0       	brcs	.+8      	; 0xf28 <__divsf3_pse+0xae>
     f20:	62 1b       	sub	r22, r18
     f22:	73 0b       	sbc	r23, r19
     f24:	84 0b       	sbc	r24, r20
     f26:	ba 0b       	sbc	r27, r26
     f28:	ee 1f       	adc	r30, r30
     f2a:	88 f7       	brcc	.-30     	; 0xf0e <__divsf3_pse+0x94>
     f2c:	e0 95       	com	r30
     f2e:	08 95       	ret

00000f30 <__fixsfsi>:
     f30:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fixunssfsi>
     f34:	68 94       	set
     f36:	b1 11       	cpse	r27, r1
     f38:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>
     f3c:	08 95       	ret

00000f3e <__fixunssfsi>:
     f3e:	0e 94 9d 08 	call	0x113a	; 0x113a <__fp_splitA>
     f42:	88 f0       	brcs	.+34     	; 0xf66 <__fixunssfsi+0x28>
     f44:	9f 57       	subi	r25, 0x7F	; 127
     f46:	98 f0       	brcs	.+38     	; 0xf6e <__fixunssfsi+0x30>
     f48:	b9 2f       	mov	r27, r25
     f4a:	99 27       	eor	r25, r25
     f4c:	b7 51       	subi	r27, 0x17	; 23
     f4e:	b0 f0       	brcs	.+44     	; 0xf7c <__fixunssfsi+0x3e>
     f50:	e1 f0       	breq	.+56     	; 0xf8a <__fixunssfsi+0x4c>
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	1a f0       	brmi	.+6      	; 0xf62 <__fixunssfsi+0x24>
     f5c:	ba 95       	dec	r27
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__fixunssfsi+0x14>
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <__fixunssfsi+0x4c>
     f62:	b1 30       	cpi	r27, 0x01	; 1
     f64:	91 f0       	breq	.+36     	; 0xf8a <__fixunssfsi+0x4c>
     f66:	0e 94 b7 08 	call	0x116e	; 0x116e <__fp_zero>
     f6a:	b1 e0       	ldi	r27, 0x01	; 1
     f6c:	08 95       	ret
     f6e:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__fp_zero>
     f72:	67 2f       	mov	r22, r23
     f74:	78 2f       	mov	r23, r24
     f76:	88 27       	eor	r24, r24
     f78:	b8 5f       	subi	r27, 0xF8	; 248
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__fixunssfsi+0x4c>
     f7c:	b9 3f       	cpi	r27, 0xF9	; 249
     f7e:	cc f3       	brlt	.-14     	; 0xf72 <__fixunssfsi+0x34>
     f80:	86 95       	lsr	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b3 95       	inc	r27
     f88:	d9 f7       	brne	.-10     	; 0xf80 <__fixunssfsi+0x42>
     f8a:	3e f4       	brtc	.+14     	; 0xf9a <__fixunssfsi+0x5c>
     f8c:	90 95       	com	r25
     f8e:	80 95       	com	r24
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__floatunsisf>:
     f9c:	e8 94       	clt
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <__floatsisf+0x12>

00000fa0 <__floatsisf>:
     fa0:	97 fb       	bst	r25, 7
     fa2:	3e f4       	brtc	.+14     	; 0xfb2 <__floatsisf+0x12>
     fa4:	90 95       	com	r25
     fa6:	80 95       	com	r24
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	99 23       	and	r25, r25
     fb4:	a9 f0       	breq	.+42     	; 0xfe0 <__floatsisf+0x40>
     fb6:	f9 2f       	mov	r31, r25
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	bb 27       	eor	r27, r27
     fbc:	93 95       	inc	r25
     fbe:	f6 95       	lsr	r31
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f1 11       	cpse	r31, r1
     fca:	f8 cf       	rjmp	.-16     	; 0xfbc <__floatsisf+0x1c>
     fcc:	fa f4       	brpl	.+62     	; 0x100c <__floatsisf+0x6c>
     fce:	bb 0f       	add	r27, r27
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__floatsisf+0x36>
     fd2:	60 ff       	sbrs	r22, 0
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <__floatsisf+0x6c>
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	16 c0       	rjmp	.+44     	; 0x100c <__floatsisf+0x6c>
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <__floatsisf+0x48>
     fe4:	96 e9       	ldi	r25, 0x96	; 150
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <__floatsisf+0x6a>
     fe8:	77 23       	and	r23, r23
     fea:	21 f0       	breq	.+8      	; 0xff4 <__floatsisf+0x54>
     fec:	9e e8       	ldi	r25, 0x8E	; 142
     fee:	87 2f       	mov	r24, r23
     ff0:	76 2f       	mov	r23, r22
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__floatsisf+0x5e>
     ff4:	66 23       	and	r22, r22
     ff6:	71 f0       	breq	.+28     	; 0x1014 <__floatsisf+0x74>
     ff8:	96 e8       	ldi	r25, 0x86	; 134
     ffa:	86 2f       	mov	r24, r22
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	2a f0       	brmi	.+10     	; 0x100c <__floatsisf+0x6c>
    1002:	9a 95       	dec	r25
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <__floatsisf+0x62>
    100c:	88 0f       	add	r24, r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret
    1016:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscA>
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__floatsisf+0x84>
    101c:	19 f0       	breq	.+6      	; 0x1024 <__floatsisf+0x84>
    101e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_pscB>
    1022:	50 f4       	brcc	.+20     	; 0x1038 <fmod+0xc>
    1024:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_nan>
    1028:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>

0000102c <fmod>:
    102c:	e9 2f       	mov	r30, r25
    102e:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_split3>
    1032:	88 f3       	brcs	.-30     	; 0x1016 <__floatsisf+0x76>
    1034:	55 23       	and	r21, r21
    1036:	b1 f3       	breq	.-20     	; 0x1024 <__floatsisf+0x84>
    1038:	e7 fb       	bst	r30, 7
    103a:	62 17       	cp	r22, r18
    103c:	73 07       	cpc	r23, r19
    103e:	84 07       	cpc	r24, r20
    1040:	95 07       	cpc	r25, r21
    1042:	a8 f1       	brcs	.+106    	; 0x10ae <fmod+0x82>
    1044:	89 f3       	breq	.-30     	; 0x1028 <__floatsisf+0x88>
    1046:	e9 2f       	mov	r30, r25
    1048:	ff 27       	eor	r31, r31
    104a:	88 23       	and	r24, r24
    104c:	2a f0       	brmi	.+10     	; 0x1058 <fmod+0x2c>
    104e:	31 97       	sbiw	r30, 0x01	; 1
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	da f7       	brpl	.-10     	; 0x104e <fmod+0x22>
    1058:	95 2f       	mov	r25, r21
    105a:	55 27       	eor	r21, r21
    105c:	44 23       	and	r20, r20
    105e:	32 f0       	brmi	.+12     	; 0x106c <fmod+0x40>
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	50 40       	sbci	r21, 0x00	; 0
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	d2 f7       	brpl	.-12     	; 0x1060 <fmod+0x34>
    106c:	bb 27       	eor	r27, r27
    106e:	e9 1b       	sub	r30, r25
    1070:	f5 0b       	sbc	r31, r21
    1072:	62 1b       	sub	r22, r18
    1074:	73 0b       	sbc	r23, r19
    1076:	84 0b       	sbc	r24, r20
    1078:	b1 09       	sbc	r27, r1
    107a:	b1 f2       	breq	.-84     	; 0x1028 <__floatsisf+0x88>
    107c:	22 f4       	brpl	.+8      	; 0x1086 <fmod+0x5a>
    107e:	62 0f       	add	r22, r18
    1080:	73 1f       	adc	r23, r19
    1082:	84 1f       	adc	r24, r20
    1084:	b1 1d       	adc	r27, r1
    1086:	31 97       	sbiw	r30, 0x01	; 1
    1088:	2a f0       	brmi	.+10     	; 0x1094 <fmod+0x68>
    108a:	66 0f       	add	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	bb 1f       	adc	r27, r27
    1092:	ef cf       	rjmp	.-34     	; 0x1072 <fmod+0x46>
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	62 f0       	brmi	.+24     	; 0x10b2 <fmod+0x86>
    109a:	41 f0       	breq	.+16     	; 0x10ac <fmod+0x80>
    109c:	88 23       	and	r24, r24
    109e:	32 f0       	brmi	.+12     	; 0x10ac <fmod+0x80>
    10a0:	66 0f       	add	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	91 50       	subi	r25, 0x01	; 1
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	c1 f7       	brne	.-16     	; 0x109c <fmod+0x70>
    10ac:	93 95       	inc	r25
    10ae:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__fp_mpack>
    10b2:	86 95       	lsr	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	9f 5f       	subi	r25, 0xFF	; 255
    10ba:	d9 f7       	brne	.-10     	; 0x10b2 <fmod+0x86>
    10bc:	f7 cf       	rjmp	.-18     	; 0x10ac <fmod+0x80>

000010be <__fp_inf>:
    10be:	97 f9       	bld	r25, 7
    10c0:	9f 67       	ori	r25, 0x7F	; 127
    10c2:	80 e8       	ldi	r24, 0x80	; 128
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	08 95       	ret

000010ca <__fp_mpack>:
    10ca:	9f 3f       	cpi	r25, 0xFF	; 255
    10cc:	31 f0       	breq	.+12     	; 0x10da <__fp_mpack_finite+0xc>

000010ce <__fp_mpack_finite>:
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	20 f4       	brcc	.+8      	; 0x10da <__fp_mpack_finite+0xc>
    10d2:	87 95       	ror	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	b7 95       	ror	r27
    10da:	88 0f       	add	r24, r24
    10dc:	91 1d       	adc	r25, r1
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret

000010e6 <__fp_nan>:
    10e6:	9f ef       	ldi	r25, 0xFF	; 255
    10e8:	80 ec       	ldi	r24, 0xC0	; 192
    10ea:	08 95       	ret

000010ec <__fp_pscA>:
    10ec:	00 24       	eor	r0, r0
    10ee:	0a 94       	dec	r0
    10f0:	16 16       	cp	r1, r22
    10f2:	17 06       	cpc	r1, r23
    10f4:	18 06       	cpc	r1, r24
    10f6:	09 06       	cpc	r0, r25
    10f8:	08 95       	ret

000010fa <__fp_pscB>:
    10fa:	00 24       	eor	r0, r0
    10fc:	0a 94       	dec	r0
    10fe:	12 16       	cp	r1, r18
    1100:	13 06       	cpc	r1, r19
    1102:	14 06       	cpc	r1, r20
    1104:	05 06       	cpc	r0, r21
    1106:	08 95       	ret

00001108 <__fp_round>:
    1108:	09 2e       	mov	r0, r25
    110a:	03 94       	inc	r0
    110c:	00 0c       	add	r0, r0
    110e:	11 f4       	brne	.+4      	; 0x1114 <__fp_round+0xc>
    1110:	88 23       	and	r24, r24
    1112:	52 f0       	brmi	.+20     	; 0x1128 <__fp_round+0x20>
    1114:	bb 0f       	add	r27, r27
    1116:	40 f4       	brcc	.+16     	; 0x1128 <__fp_round+0x20>
    1118:	bf 2b       	or	r27, r31
    111a:	11 f4       	brne	.+4      	; 0x1120 <__fp_round+0x18>
    111c:	60 ff       	sbrs	r22, 0
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <__fp_round+0x20>
    1120:	6f 5f       	subi	r22, 0xFF	; 255
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	08 95       	ret

0000112a <__fp_split3>:
    112a:	57 fd       	sbrc	r21, 7
    112c:	90 58       	subi	r25, 0x80	; 128
    112e:	44 0f       	add	r20, r20
    1130:	55 1f       	adc	r21, r21
    1132:	59 f0       	breq	.+22     	; 0x114a <__fp_splitA+0x10>
    1134:	5f 3f       	cpi	r21, 0xFF	; 255
    1136:	71 f0       	breq	.+28     	; 0x1154 <__fp_splitA+0x1a>
    1138:	47 95       	ror	r20

0000113a <__fp_splitA>:
    113a:	88 0f       	add	r24, r24
    113c:	97 fb       	bst	r25, 7
    113e:	99 1f       	adc	r25, r25
    1140:	61 f0       	breq	.+24     	; 0x115a <__fp_splitA+0x20>
    1142:	9f 3f       	cpi	r25, 0xFF	; 255
    1144:	79 f0       	breq	.+30     	; 0x1164 <__fp_splitA+0x2a>
    1146:	87 95       	ror	r24
    1148:	08 95       	ret
    114a:	12 16       	cp	r1, r18
    114c:	13 06       	cpc	r1, r19
    114e:	14 06       	cpc	r1, r20
    1150:	55 1f       	adc	r21, r21
    1152:	f2 cf       	rjmp	.-28     	; 0x1138 <__fp_split3+0xe>
    1154:	46 95       	lsr	r20
    1156:	f1 df       	rcall	.-30     	; 0x113a <__fp_splitA>
    1158:	08 c0       	rjmp	.+16     	; 0x116a <__fp_splitA+0x30>
    115a:	16 16       	cp	r1, r22
    115c:	17 06       	cpc	r1, r23
    115e:	18 06       	cpc	r1, r24
    1160:	99 1f       	adc	r25, r25
    1162:	f1 cf       	rjmp	.-30     	; 0x1146 <__fp_splitA+0xc>
    1164:	86 95       	lsr	r24
    1166:	71 05       	cpc	r23, r1
    1168:	61 05       	cpc	r22, r1
    116a:	08 94       	sec
    116c:	08 95       	ret

0000116e <__fp_zero>:
    116e:	e8 94       	clt

00001170 <__fp_szero>:
    1170:	bb 27       	eor	r27, r27
    1172:	66 27       	eor	r22, r22
    1174:	77 27       	eor	r23, r23
    1176:	cb 01       	movw	r24, r22
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret

0000117c <__mulsf3>:
    117c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3x>
    1180:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_round>
    1184:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscA>
    1188:	38 f0       	brcs	.+14     	; 0x1198 <__mulsf3+0x1c>
    118a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_pscB>
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__mulsf3+0x1c>
    1190:	95 23       	and	r25, r21
    1192:	11 f0       	breq	.+4      	; 0x1198 <__mulsf3+0x1c>
    1194:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_inf>
    1198:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_nan>
    119c:	11 24       	eor	r1, r1
    119e:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>

000011a2 <__mulsf3x>:
    11a2:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_split3>
    11a6:	70 f3       	brcs	.-36     	; 0x1184 <__mulsf3+0x8>

000011a8 <__mulsf3_pse>:
    11a8:	95 9f       	mul	r25, r21
    11aa:	c1 f3       	breq	.-16     	; 0x119c <__mulsf3+0x20>
    11ac:	95 0f       	add	r25, r21
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	55 1f       	adc	r21, r21
    11b2:	62 9f       	mul	r22, r18
    11b4:	f0 01       	movw	r30, r0
    11b6:	72 9f       	mul	r23, r18
    11b8:	bb 27       	eor	r27, r27
    11ba:	f0 0d       	add	r31, r0
    11bc:	b1 1d       	adc	r27, r1
    11be:	63 9f       	mul	r22, r19
    11c0:	aa 27       	eor	r26, r26
    11c2:	f0 0d       	add	r31, r0
    11c4:	b1 1d       	adc	r27, r1
    11c6:	aa 1f       	adc	r26, r26
    11c8:	64 9f       	mul	r22, r20
    11ca:	66 27       	eor	r22, r22
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	66 1f       	adc	r22, r22
    11d2:	82 9f       	mul	r24, r18
    11d4:	22 27       	eor	r18, r18
    11d6:	b0 0d       	add	r27, r0
    11d8:	a1 1d       	adc	r26, r1
    11da:	62 1f       	adc	r22, r18
    11dc:	73 9f       	mul	r23, r19
    11de:	b0 0d       	add	r27, r0
    11e0:	a1 1d       	adc	r26, r1
    11e2:	62 1f       	adc	r22, r18
    11e4:	83 9f       	mul	r24, r19
    11e6:	a0 0d       	add	r26, r0
    11e8:	61 1d       	adc	r22, r1
    11ea:	22 1f       	adc	r18, r18
    11ec:	74 9f       	mul	r23, r20
    11ee:	33 27       	eor	r19, r19
    11f0:	a0 0d       	add	r26, r0
    11f2:	61 1d       	adc	r22, r1
    11f4:	23 1f       	adc	r18, r19
    11f6:	84 9f       	mul	r24, r20
    11f8:	60 0d       	add	r22, r0
    11fa:	21 1d       	adc	r18, r1
    11fc:	82 2f       	mov	r24, r18
    11fe:	76 2f       	mov	r23, r22
    1200:	6a 2f       	mov	r22, r26
    1202:	11 24       	eor	r1, r1
    1204:	9f 57       	subi	r25, 0x7F	; 127
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	9a f0       	brmi	.+38     	; 0x1230 <__mulsf3_pse+0x88>
    120a:	f1 f0       	breq	.+60     	; 0x1248 <__mulsf3_pse+0xa0>
    120c:	88 23       	and	r24, r24
    120e:	4a f0       	brmi	.+18     	; 0x1222 <__mulsf3_pse+0x7a>
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	bb 1f       	adc	r27, r27
    1216:	66 1f       	adc	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	91 50       	subi	r25, 0x01	; 1
    121e:	50 40       	sbci	r21, 0x00	; 0
    1220:	a9 f7       	brne	.-22     	; 0x120c <__mulsf3_pse+0x64>
    1222:	9e 3f       	cpi	r25, 0xFE	; 254
    1224:	51 05       	cpc	r21, r1
    1226:	80 f0       	brcs	.+32     	; 0x1248 <__mulsf3_pse+0xa0>
    1228:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_inf>
    122c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	e4 f3       	brlt	.-8      	; 0x122c <__mulsf3_pse+0x84>
    1234:	98 3e       	cpi	r25, 0xE8	; 232
    1236:	d4 f3       	brlt	.-12     	; 0x122c <__mulsf3_pse+0x84>
    1238:	86 95       	lsr	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	b7 95       	ror	r27
    1240:	f7 95       	ror	r31
    1242:	e7 95       	ror	r30
    1244:	9f 5f       	subi	r25, 0xFF	; 255
    1246:	c1 f7       	brne	.-16     	; 0x1238 <__mulsf3_pse+0x90>
    1248:	fe 2b       	or	r31, r30
    124a:	88 0f       	add	r24, r24
    124c:	91 1d       	adc	r25, r1
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	97 f9       	bld	r25, 7
    1254:	08 95       	ret

00001256 <__divmodhi4>:
    1256:	97 fb       	bst	r25, 7
    1258:	07 2e       	mov	r0, r23
    125a:	16 f4       	brtc	.+4      	; 0x1260 <__divmodhi4+0xa>
    125c:	00 94       	com	r0
    125e:	07 d0       	rcall	.+14     	; 0x126e <__divmodhi4_neg1>
    1260:	77 fd       	sbrc	r23, 7
    1262:	09 d0       	rcall	.+18     	; 0x1276 <__divmodhi4_neg2>
    1264:	0e 94 3f 09 	call	0x127e	; 0x127e <__udivmodhi4>
    1268:	07 fc       	sbrc	r0, 7
    126a:	05 d0       	rcall	.+10     	; 0x1276 <__divmodhi4_neg2>
    126c:	3e f4       	brtc	.+14     	; 0x127c <__divmodhi4_exit>

0000126e <__divmodhi4_neg1>:
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__divmodhi4_neg2>:
    1276:	70 95       	com	r23
    1278:	61 95       	neg	r22
    127a:	7f 4f       	sbci	r23, 0xFF	; 255

0000127c <__divmodhi4_exit>:
    127c:	08 95       	ret

0000127e <__udivmodhi4>:
    127e:	aa 1b       	sub	r26, r26
    1280:	bb 1b       	sub	r27, r27
    1282:	51 e1       	ldi	r21, 0x11	; 17
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <__udivmodhi4_ep>

00001286 <__udivmodhi4_loop>:
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	a6 17       	cp	r26, r22
    128c:	b7 07       	cpc	r27, r23
    128e:	10 f0       	brcs	.+4      	; 0x1294 <__udivmodhi4_ep>
    1290:	a6 1b       	sub	r26, r22
    1292:	b7 0b       	sbc	r27, r23

00001294 <__udivmodhi4_ep>:
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	5a 95       	dec	r21
    129a:	a9 f7       	brne	.-22     	; 0x1286 <__udivmodhi4_loop>
    129c:	80 95       	com	r24
    129e:	90 95       	com	r25
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	08 95       	ret

000012a6 <__tablejump2__>:
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	05 90       	lpm	r0, Z+
    12ac:	f4 91       	lpm	r31, Z
    12ae:	e0 2d       	mov	r30, r0
    12b0:	09 94       	ijmp

000012b2 <_exit>:
    12b2:	f8 94       	cli

000012b4 <__stop_program>:
    12b4:	ff cf       	rjmp	.-2      	; 0x12b4 <__stop_program>
