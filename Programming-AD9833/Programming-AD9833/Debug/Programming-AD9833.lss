
Programming-AD9833.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000bd8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00000c6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001221  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0b  00000000  00000000  0000339b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003ea6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_9>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_12>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	66 03       	mulsu	r22, r22

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e8 ed       	ldi	r30, 0xD8	; 216
  6a:	fb e0       	ldi	r31, 0x0B	; 11
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a2 36       	cpi	r26, 0x62	; 98
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a2 e6       	ldi	r26, 0x62	; 98
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	ae 36       	cpi	r26, 0x6E	; 110
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  a2:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z8SPI_initv>:
{
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	UART_send(MSdata);
	UART_send(LSdata);
}
  aa:	81 ea       	ldi	r24, 0xA1	; 161
  ac:	87 bb       	out	0x17, r24	; 23
  ae:	81 e1       	ldi	r24, 0x11	; 17
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	89 ed       	ldi	r24, 0xD9	; 217
  b4:	8d b9       	out	0x0d, r24	; 13
  b6:	08 95       	ret

000000b8 <_Z9UART_initv>:
  b8:	10 bc       	out	0x20, r1	; 32
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	89 b9       	out	0x09, r24	; 9
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	8e e8       	ldi	r24, 0x8E	; 142
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <_Z12SPI_transferh>:
  c8:	8f b9       	out	0x0f, r24	; 15
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <_Z12SPI_transferh+0x2>
  ce:	08 95       	ret

000000d0 <_Z11SPI_write16t>:

void SPI_write16 (unsigned short data)    			//send a 16bit word and use f sync
{  
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
	PORTB &= ~(1<<PINB0);						    //F sync Low --> begin frame
  d4:	c0 98       	cbi	0x18, 0	; 24
	SPI_transfer(MSdata);							
  d6:	89 2f       	mov	r24, r25
  d8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	SPI_transfer(LSdata);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12SPI_transferh>
	PORTB |= (1<<PINB0);						    //F sync High --> End of frame
  e2:	c0 9a       	sbi	0x18, 0	; 24
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_Z10Set_AD9833fj>:

void Set_AD9833(float frequency, unsigned int phase)
{
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8a 01       	movw	r16, r20
	long FreqReg = (frequency*pow(2,28))/(float)Fmclk;	  //Calculate frequency to be sent to AD9833
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5d e4       	ldi	r21, 0x4D	; 77
 102:	0e 94 77 05 	call	0xaee	; 0xaee <__mulsf3>
 106:	20 e2       	ldi	r18, 0x20	; 32
 108:	3c eb       	ldi	r19, 0xBC	; 188
 10a:	4e eb       	ldi	r20, 0xBE	; 190
 10c:	5b e4       	ldi	r21, 0x4B	; 75
 10e:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3>
 112:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);		  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 116:	6b 01       	movw	r12, r22
 118:	7c 01       	movw	r14, r24
 11a:	cc 24       	eor	r12, r12
 11c:	20 ec       	ldi	r18, 0xC0	; 192
 11e:	d2 22       	and	r13, r18
 120:	2f e0       	ldi	r18, 0x0F	; 15
 122:	f2 22       	and	r15, r18
 124:	0b 2e       	mov	r0, r27
 126:	be e0       	ldi	r27, 0x0E	; 14
 128:	f5 94       	asr	r15
 12a:	e7 94       	ror	r14
 12c:	d7 94       	ror	r13
 12e:	c7 94       	ror	r12
 130:	ba 95       	dec	r27
 132:	d1 f7       	brne	.-12     	; 0x128 <_Z10Set_AD9833fj+0x40>
 134:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));				  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB	
 136:	eb 01       	movw	r28, r22
 138:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;										  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     									  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_write16(0x2100);								  //define waveform and set reset bit
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e2       	ldi	r25, 0x21	; 33
 13e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(LSB);									  //Write LSBs
 142:	ce 01       	movw	r24, r28
 144:	90 64       	ori	r25, 0x40	; 64
 146:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(MSB);									  //Write MSBs
 14a:	c6 01       	movw	r24, r12
 14c:	90 64       	ori	r25, 0x40	; 64
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	phase&=0x0FFF;
 152:	c8 01       	movw	r24, r16
 154:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;
	//SPI_write16(0xC000);								  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_write16(phase);
 156:	90 6c       	ori	r25, 0xC0	; 192
 158:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	SPI_write16(0x2000);                                                                                                                                                                                                                                                                                             
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e2       	ldi	r25, 0x20	; 32
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	df 90       	pop	r13
 172:	cf 90       	pop	r12
 174:	08 95       	ret

00000176 <_Z8getphasefff>:

unsigned int getphase(float pphase,float freq, float time)
{
 176:	4f 92       	push	r4
 178:	5f 92       	push	r5
 17a:	6f 92       	push	r6
 17c:	7f 92       	push	r7
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <_Z8getphasefff+0x22>
 198:	00 d0       	rcall	.+0      	; 0x19a <_Z8getphasefff+0x24>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	2b 01       	movw	r4, r22
 1a0:	3c 01       	movw	r6, r24
 1a2:	49 01       	movw	r8, r18
 1a4:	5a 01       	movw	r10, r20
 1a6:	67 01       	movw	r12, r14
 1a8:	78 01       	movw	r14, r16
	time/=1000000;
	pphase/=2048/PI;
	float ph=((fmod(time,(1/freq))*2*PI*freq)+pphase)*2048/PI;
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	9f e3       	ldi	r25, 0x3F	; 63
 1b2:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3>
 1b6:	69 83       	std	Y+1, r22	; 0x01
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	34 e2       	ldi	r19, 0x24	; 36
 1c2:	44 e7       	ldi	r20, 0x74	; 116
 1c4:	59 e4       	ldi	r21, 0x49	; 73
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3>
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	3a 81       	ldd	r19, Y+2	; 0x02
 1d2:	4b 81       	ldd	r20, Y+3	; 0x03
 1d4:	5c 81       	ldd	r21, Y+4	; 0x04
 1d6:	0e 94 cf 04 	call	0x99e	; 0x99e <fmod>
	return (unsigned int) ph;
 1da:	9b 01       	movw	r18, r22
 1dc:	ac 01       	movw	r20, r24
 1de:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 1e2:	20 ed       	ldi	r18, 0xD0	; 208
 1e4:	3f e0       	ldi	r19, 0x0F	; 15
 1e6:	49 e4       	ldi	r20, 0x49	; 73
 1e8:	50 e4       	ldi	r21, 0x40	; 64
 1ea:	0e 94 77 05 	call	0xaee	; 0xaee <__mulsf3>
 1ee:	a5 01       	movw	r20, r10
 1f0:	94 01       	movw	r18, r8
 1f2:	0e 94 77 05 	call	0xaee	; 0xaee <__mulsf3>
 1f6:	6b 01       	movw	r12, r22
 1f8:	7c 01       	movw	r14, r24
 1fa:	2c e8       	ldi	r18, 0x8C	; 140
 1fc:	39 ef       	ldi	r19, 0xF9	; 249
 1fe:	42 e2       	ldi	r20, 0x22	; 34
 200:	54 e4       	ldi	r21, 0x44	; 68
 202:	c3 01       	movw	r24, r6
 204:	b2 01       	movw	r22, r4
 206:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3>
 20a:	9b 01       	movw	r18, r22
 20c:	ac 01       	movw	r20, r24
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	55 e4       	ldi	r21, 0x45	; 69
 21e:	0e 94 77 05 	call	0xaee	; 0xaee <__mulsf3>
 222:	20 ed       	ldi	r18, 0xD0	; 208
 224:	3f e0       	ldi	r19, 0x0F	; 15
 226:	49 e4       	ldi	r20, 0x49	; 73
 228:	50 e4       	ldi	r21, 0x40	; 64
 22a:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3>
 22e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
}
 232:	cb 01       	movw	r24, r22
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	08 95       	ret

0000025e <main>:

int main(void)
{
	UART_init();
 25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9UART_initv>
	SPI_init();
 262:	0e 94 55 00 	call	0xaa	; 0xaa <_Z8SPI_initv>
	DDRA=(1<<PINA0)|(1<<PINA1)|(1<<PINA2);			//output pins for LEDs
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	8a bb       	out	0x1a, r24	; 26
	TCCR1A=0;
 26a:	1f bc       	out	0x2f, r1	; 47
	PORTA=0;
 26c:	1b ba       	out	0x1b, r1	; 27
	
	SPI_write16(0x100);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	//frequency calculation and documented values
	float freqY  =  1500 + (Y * 3.1372549);			//1757.2549(red)	1954.90196(green)	1628.62745(blue)	
	float freqRY =  1500 + (RY * 3.1372549);		//2252.94118(red)  1606.66667(green)	1845.09804(blue)
	float freqBY =  1500 + (BY * 3.1372549);		//1782.35294(red)	1669.41177(green)	2252.94118(blue)|
	
	SPI_write16(0x100);								//Reset AD9833 
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11SPI_write16t>
	
	//VIS Code
	{//leader tone
	Set_AD9833(1900,0);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e8       	ldi	r23, 0x80	; 128
 286:	8d ee       	ldi	r24, 0xED	; 237
 288:	94 e4       	ldi	r25, 0x44	; 68
 28a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	8f e7       	ldi	r24, 0x7F	; 127
 292:	9d e0       	ldi	r25, 0x0D	; 13
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x36>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x40>
 29e:	00 00       	nop
	_delay_ms(300);
	//break
	Set_AD9833(1200,0);
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	86 e9       	ldi	r24, 0x96	; 150
 2aa:	94 e4       	ldi	r25, 0x44	; 68
 2ac:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	9f e8       	ldi	r25, 0x8F	; 143
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x56>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x5c>
 2ba:	00 00       	nop
	_delay_ms(10);
	//leader
	Set_AD9833(1900,0);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e8       	ldi	r23, 0x80	; 128
 2c4:	8d ee       	ldi	r24, 0xED	; 237
 2c6:	94 e4       	ldi	r25, 0x44	; 68
 2c8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	2f e7       	ldi	r18, 0x7F	; 127
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x74>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x7e>
 2dc:	00 00       	nop
	_delay_ms(300);
	//VIS start bit
	Set_AD9833(1200,0);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	86 e9       	ldi	r24, 0x96	; 150
 2e8:	94 e4       	ldi	r25, 0x44	; 68
 2ea:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 2ee:	99 e9       	ldi	r25, 0x99	; 153
 2f0:	29 e5       	ldi	r18, 0x59	; 89
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	91 50       	subi	r25, 0x01	; 1
 2f6:	20 40       	sbci	r18, 0x00	; 0
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x96>
 2fc:	00 00       	nop
	_delay_ms(30);
	//PD90 VIS code = 99d = 0b1100011
	//bit 0=1
	Set_AD9833(1100,0);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e8       	ldi	r23, 0x80	; 128
 306:	89 e8       	ldi	r24, 0x89	; 137
 308:	94 e4       	ldi	r25, 0x44	; 68
 30a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 30e:	99 e9       	ldi	r25, 0x99	; 153
 310:	29 e5       	ldi	r18, 0x59	; 89
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	91 50       	subi	r25, 0x01	; 1
 316:	20 40       	sbci	r18, 0x00	; 0
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0xb6>
 31c:	00 00       	nop
	_delay_ms(30);
	//bit 1=1
	Set_AD9833(1100,0);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	70 e8       	ldi	r23, 0x80	; 128
 326:	89 e8       	ldi	r24, 0x89	; 137
 328:	94 e4       	ldi	r25, 0x44	; 68
 32a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 32e:	99 e9       	ldi	r25, 0x99	; 153
 330:	29 e5       	ldi	r18, 0x59	; 89
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	91 50       	subi	r25, 0x01	; 1
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0xd6>
 33c:	00 00       	nop
	_delay_ms(30);
	//bit 2=0
	Set_AD9833(1300,0);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 e8       	ldi	r23, 0x80	; 128
 346:	82 ea       	ldi	r24, 0xA2	; 162
 348:	94 e4       	ldi	r25, 0x44	; 68
 34a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 34e:	99 e9       	ldi	r25, 0x99	; 153
 350:	29 e5       	ldi	r18, 0x59	; 89
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	91 50       	subi	r25, 0x01	; 1
 356:	20 40       	sbci	r18, 0x00	; 0
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0xf6>
 35c:	00 00       	nop
	_delay_ms(30);
	//bit 3=0
	Set_AD9833(1300,0);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e8       	ldi	r23, 0x80	; 128
 366:	82 ea       	ldi	r24, 0xA2	; 162
 368:	94 e4       	ldi	r25, 0x44	; 68
 36a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 36e:	99 e9       	ldi	r25, 0x99	; 153
 370:	29 e5       	ldi	r18, 0x59	; 89
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	91 50       	subi	r25, 0x01	; 1
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x116>
 37c:	00 00       	nop
	_delay_ms(30);
	//bit 4=0
	Set_AD9833(1300,0);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e8       	ldi	r23, 0x80	; 128
 386:	82 ea       	ldi	r24, 0xA2	; 162
 388:	94 e4       	ldi	r25, 0x44	; 68
 38a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 38e:	99 e9       	ldi	r25, 0x99	; 153
 390:	29 e5       	ldi	r18, 0x59	; 89
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	91 50       	subi	r25, 0x01	; 1
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x136>
 39c:	00 00       	nop
	_delay_ms(30);
	//bit 5=1
	Set_AD9833(1100,0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e8       	ldi	r23, 0x80	; 128
 3a6:	89 e8       	ldi	r24, 0x89	; 137
 3a8:	94 e4       	ldi	r25, 0x44	; 68
 3aa:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 3ae:	99 e9       	ldi	r25, 0x99	; 153
 3b0:	29 e5       	ldi	r18, 0x59	; 89
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	91 50       	subi	r25, 0x01	; 1
 3b6:	20 40       	sbci	r18, 0x00	; 0
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x156>
 3bc:	00 00       	nop
	_delay_ms(30);
	//bit 6=1
	Set_AD9833(1100,0);
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e8       	ldi	r23, 0x80	; 128
 3c6:	89 e8       	ldi	r24, 0x89	; 137
 3c8:	94 e4       	ldi	r25, 0x44	; 68
 3ca:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 3ce:	99 e9       	ldi	r25, 0x99	; 153
 3d0:	29 e5       	ldi	r18, 0x59	; 89
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	20 40       	sbci	r18, 0x00	; 0
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x176>
 3dc:	00 00       	nop
	_delay_ms(30);
	//Parity bit
	Set_AD9833(1100,0);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e8       	ldi	r23, 0x80	; 128
 3e6:	89 e8       	ldi	r24, 0x89	; 137
 3e8:	94 e4       	ldi	r25, 0x44	; 68
 3ea:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 3ee:	99 e9       	ldi	r25, 0x99	; 153
 3f0:	29 e5       	ldi	r18, 0x59	; 89
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x196>
 3fc:	00 00       	nop
	_delay_ms(30);
	//stop bit
	Set_AD9833(1200,0);
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	86 e9       	ldi	r24, 0x96	; 150
 408:	94 e4       	ldi	r25, 0x44	; 68
 40a:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 40e:	99 e9       	ldi	r25, 0x99	; 153
 410:	29 e5       	ldi	r18, 0x59	; 89
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	91 50       	subi	r25, 0x01	; 1
 416:	20 40       	sbci	r18, 0x00	; 0
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 00       	nop
 41e:	c5 e0       	ldi	r28, 0x05	; 5
 420:	d0 e0       	ldi	r29, 0x00	; 0
	
	{
		
	//Y Scan odd line
	cont=0;	
	global_frequency=freqY;	
 422:	0f 2e       	mov	r0, r31
 424:	f6 e2       	ldi	r31, 0x26	; 38
 426:	cf 2e       	mov	r12, r31
 428:	ff e2       	ldi	r31, 0x2F	; 47
 42a:	df 2e       	mov	r13, r31
 42c:	f4 ef       	ldi	r31, 0xF4	; 244
 42e:	ef 2e       	mov	r14, r31
 430:	f4 e4       	ldi	r31, 0x44	; 68
 432:	ff 2e       	mov	r15, r31
 434:	f0 2d       	mov	r31, r0
	sei();
	TCCR1B|=(1<<CS10);
	TIMSK|=(1<<TOIE1);
	TCNT1=65534;
 436:	0e ef       	ldi	r16, 0xFE	; 254
 438:	1f ef       	ldi	r17, 0xFF	; 255
	TIMSK&=~(1<<OCIE1A);
	TCCR1B=0x00;
	
	//R-Y Scan average
	cont=0;
	global_frequency=freqRY;
 43a:	0f 2e       	mov	r0, r31
 43c:	f6 e6       	ldi	r31, 0x66	; 102
 43e:	4f 2e       	mov	r4, r31
 440:	fb ee       	ldi	r31, 0xEB	; 235
 442:	5f 2e       	mov	r5, r31
 444:	f8 ec       	ldi	r31, 0xC8	; 200
 446:	6f 2e       	mov	r6, r31
 448:	f4 e4       	ldi	r31, 0x44	; 68
 44a:	7f 2e       	mov	r7, r31
 44c:	f0 2d       	mov	r31, r0
	TIMSK&=~(1<<OCIE1A);
	TCCR1B=0x00;
	
	//B-Y Scan average
	cont=0;
	global_frequency=freqBY;
 44e:	0f 2e       	mov	r0, r31
 450:	f6 e4       	ldi	r31, 0x46	; 70
 452:	8f 2e       	mov	r8, r31
 454:	f9 e9       	ldi	r31, 0x99	; 153
 456:	9f 2e       	mov	r9, r31
 458:	f0 ed       	ldi	r31, 0xD0	; 208
 45a:	af 2e       	mov	r10, r31
 45c:	f4 e4       	ldi	r31, 0x44	; 68
 45e:	bf 2e       	mov	r11, r31
 460:	f0 2d       	mov	r31, r0
	
	//image data
	for (int i=1;i<=5;i++)
	{
	//Sync Pulse
	Set_AD9833(1200,0);
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	86 e9       	ldi	r24, 0x96	; 150
 46c:	94 e4       	ldi	r25, 0x44	; 68
 46e:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 472:	91 ee       	ldi	r25, 0xE1	; 225
 474:	2a ed       	ldi	r18, 0xDA	; 218
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	91 50       	subi	r25, 0x01	; 1
 47a:	20 40       	sbci	r18, 0x00	; 0
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	84 e1       	ldi	r24, 0x14	; 20
 482:	9c e0       	ldi	r25, 0x0C	; 12
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
	_delay_ms(19);
	_delay_us(839);
	//Porch
	Set_AD9833(1500,0);
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e8       	ldi	r23, 0x80	; 128
 494:	8b eb       	ldi	r24, 0xBB	; 187
 496:	94 e4       	ldi	r25, 0x44	; 68
 498:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	86 e6       	ldi	r24, 0x66	; 102
 49e:	9e e0       	ldi	r25, 0x0E	; 14
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a6:	8f e3       	ldi	r24, 0x3F	; 63
 4a8:	9d e0       	ldi	r25, 0x0D	; 13
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4ae:	00 00       	nop
	//single color using interrupts
	
	{
		
	//Y Scan odd line
	cont=0;	
 4b0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cont+0x1>
 4b4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cont>
	global_frequency=freqY;	
 4b8:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <global_frequency>
 4bc:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <global_frequency+0x1>
 4c0:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <global_frequency+0x2>
 4c4:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <global_frequency+0x3>
	sei();
 4c8:	78 94       	sei
	TCCR1B|=(1<<CS10);
 4ca:	8e b5       	in	r24, 0x2e	; 46
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE1);
 4d0:	89 b7       	in	r24, 0x39	; 57
 4d2:	84 60       	ori	r24, 0x04	; 4
 4d4:	89 bf       	out	0x39, r24	; 57
	TCNT1=65534;
 4d6:	1d bd       	out	0x2d, r17	; 45
 4d8:	0c bd       	out	0x2c, r16	; 44
	while(cont<2);
 4da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cont>
 4de:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cont+0x1>
 4e2:	02 97       	sbiw	r24, 0x02	; 2
 4e4:	d4 f3       	brlt	.-12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	cli();
 4e6:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
 4e8:	89 b7       	in	r24, 0x39	; 57
 4ea:	8f 7e       	andi	r24, 0xEF	; 239
 4ec:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
 4ee:	1e bc       	out	0x2e, r1	; 46
	
	//R-Y Scan average
	cont=0;
 4f0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cont+0x1>
 4f4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cont>
	global_frequency=freqRY;
 4f8:	40 92 68 00 	sts	0x0068, r4	; 0x800068 <global_frequency>
 4fc:	50 92 69 00 	sts	0x0069, r5	; 0x800069 <global_frequency+0x1>
 500:	60 92 6a 00 	sts	0x006A, r6	; 0x80006a <global_frequency+0x2>
 504:	70 92 6b 00 	sts	0x006B, r7	; 0x80006b <global_frequency+0x3>
	sei();
 508:	78 94       	sei
	TCCR1B|=(1<<CS10);
 50a:	8e b5       	in	r24, 0x2e	; 46
 50c:	81 60       	ori	r24, 0x01	; 1
 50e:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE1);
 510:	89 b7       	in	r24, 0x39	; 57
 512:	84 60       	ori	r24, 0x04	; 4
 514:	89 bf       	out	0x39, r24	; 57
	TCNT1=TICKS;
 516:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TICKS>
 51a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TICKS+0x1>
 51e:	9d bd       	out	0x2d, r25	; 45
 520:	8c bd       	out	0x2c, r24	; 44
	while(cont<320);
 522:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cont>
 526:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cont+0x1>
 52a:	80 34       	cpi	r24, 0x40	; 64
 52c:	91 40       	sbci	r25, 0x01	; 1
 52e:	cc f3       	brlt	.-14     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	cli();
 530:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
 532:	89 b7       	in	r24, 0x39	; 57
 534:	8f 7e       	andi	r24, 0xEF	; 239
 536:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
 538:	1e bc       	out	0x2e, r1	; 46
	
	//B-Y Scan average
	cont=0;
 53a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cont+0x1>
 53e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cont>
	global_frequency=freqBY;
 542:	80 92 68 00 	sts	0x0068, r8	; 0x800068 <global_frequency>
 546:	90 92 69 00 	sts	0x0069, r9	; 0x800069 <global_frequency+0x1>
 54a:	a0 92 6a 00 	sts	0x006A, r10	; 0x80006a <global_frequency+0x2>
 54e:	b0 92 6b 00 	sts	0x006B, r11	; 0x80006b <global_frequency+0x3>
	sei();
 552:	78 94       	sei
	TCCR1B|=(1<<CS10);
 554:	8e b5       	in	r24, 0x2e	; 46
 556:	81 60       	ori	r24, 0x01	; 1
 558:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE1);
 55a:	89 b7       	in	r24, 0x39	; 57
 55c:	84 60       	ori	r24, 0x04	; 4
 55e:	89 bf       	out	0x39, r24	; 57
	TCNT1=TICKS;
 560:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TICKS>
 564:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TICKS+0x1>
 568:	9d bd       	out	0x2d, r25	; 45
 56a:	8c bd       	out	0x2c, r24	; 44
	while(cont<320);
 56c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cont>
 570:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cont+0x1>
 574:	80 34       	cpi	r24, 0x40	; 64
 576:	91 40       	sbci	r25, 0x01	; 1
 578:	cc f3       	brlt	.-14     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
	cli();
 57a:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
 57c:	89 b7       	in	r24, 0x39	; 57
 57e:	8f 7e       	andi	r24, 0xEF	; 239
 580:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
 582:	1e bc       	out	0x2e, r1	; 46
	
	//Y Scan even line
	cont=0; 
 584:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cont+0x1>
 588:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cont>
	global_frequency=freqY;
 58c:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <global_frequency>
 590:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <global_frequency+0x1>
 594:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <global_frequency+0x2>
 598:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <global_frequency+0x3>
	sei();
 59c:	78 94       	sei
	TCCR1B|=(1<<CS10);
 59e:	8e b5       	in	r24, 0x2e	; 46
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE1);
 5a4:	89 b7       	in	r24, 0x39	; 57
 5a6:	84 60       	ori	r24, 0x04	; 4
 5a8:	89 bf       	out	0x39, r24	; 57
	TCNT1=TICKS;
 5aa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TICKS>
 5ae:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TICKS+0x1>
 5b2:	9d bd       	out	0x2d, r25	; 45
 5b4:	8c bd       	out	0x2c, r24	; 44
	while(cont<321);
 5b6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cont>
 5ba:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cont+0x1>
 5be:	81 34       	cpi	r24, 0x41	; 65
 5c0:	91 40       	sbci	r25, 0x01	; 1
 5c2:	cc f3       	brlt	.-14     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
	cli();
 5c4:	f8 94       	cli
	TIMSK&=~(1<<OCIE1A);
 5c6:	89 b7       	in	r24, 0x39	; 57
 5c8:	8f 7e       	andi	r24, 0xEF	; 239
 5ca:	89 bf       	out	0x39, r24	; 57
	TCCR1B=0x00;
 5cc:	1e bc       	out	0x2e, r1	; 46
 5ce:	21 97       	sbiw	r28, 0x01	; 1
	Set_AD9833(1200,0);
	_delay_ms(30);
	}
	
	//image data
	for (int i=1;i<=5;i++)
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d2:	47 cf       	rjmp	.-370    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
// 		//Y Scan even line
// 		Set_AD9833(freqY,0);
// 		_delay_us(170079.41);
}
}	
    Set_AD9833(0x00,0);
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	cb 01       	movw	r24, r22
 5de:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
 5e2:	ff cf       	rjmp	.-2      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>

000005e4 <__vector_9>:
	{		
	}
}

ISR(TIMER1_OVF_vect)
{
 5e4:	1f 92       	push	r1
 5e6:	0f 92       	push	r0
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	8f 92       	push	r8
 5f0:	9f 92       	push	r9
 5f2:	af 92       	push	r10
 5f4:	bf 92       	push	r11
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	2f 93       	push	r18
 600:	3f 93       	push	r19
 602:	4f 93       	push	r20
 604:	5f 93       	push	r21
 606:	6f 93       	push	r22
 608:	7f 93       	push	r23
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25
 60e:	af 93       	push	r26
 610:	bf 93       	push	r27
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
// 	contprev=contnext;
// 	contnext=TCNT0;
// 	timeprev = (contnext-contprev)*TIMER0_PRESCALER/F_CPU;
	TCNT1=TICKS;
 616:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TICKS>
 61a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TICKS+0x1>
 61e:	9d bd       	out	0x2d, r25	; 45
 620:	8c bd       	out	0x2c, r24	; 44
	next_phase = getphase(prev_phase,global_frequency,532);
 622:	80 90 68 00 	lds	r8, 0x0068	; 0x800068 <global_frequency>
 626:	90 90 69 00 	lds	r9, 0x0069	; 0x800069 <global_frequency+0x1>
 62a:	a0 90 6a 00 	lds	r10, 0x006A	; 0x80006a <global_frequency+0x2>
 62e:	b0 90 6b 00 	lds	r11, 0x006B	; 0x80006b <global_frequency+0x3>
 632:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <prev_phase>
 636:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <prev_phase+0x1>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 87 04 	call	0x90e	; 0x90e <__floatunsisf>
 642:	e1 2c       	mov	r14, r1
 644:	f1 2c       	mov	r15, r1
 646:	05 e0       	ldi	r16, 0x05	; 5
 648:	14 e4       	ldi	r17, 0x44	; 68
 64a:	a5 01       	movw	r20, r10
 64c:	94 01       	movw	r18, r8
 64e:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8getphasefff>
 652:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 656:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	cont++;
 65a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cont>
 65e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cont+0x1>
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cont+0x1>
 668:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cont>
	//add frequency retrieval function here
	Set_AD9833(global_frequency,next_phase);
 66c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end>
 670:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_end+0x1>
 674:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <global_frequency>
 678:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <global_frequency+0x1>
 67c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <global_frequency+0x2>
 680:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <global_frequency+0x3>
 684:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z10Set_AD9833fj>
	prev_phase=next_phase;
 688:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 68c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 690:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <prev_phase+0x1>
 694:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <prev_phase>
}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	bf 90       	pop	r11
 6ba:	af 90       	pop	r10
 6bc:	9f 90       	pop	r9
 6be:	8f 90       	pop	r8
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_12>:
	
 6ca:	18 95       	reti

000006cc <_GLOBAL__sub_I_TEMP>:
#include <util/delay.h>
#include <math.h>
#include <avr/interrupt.h>

int TEMP = ((((F_CPU)/(TIMER1_PRESCALER*1000000))*552)-1);			//Counter Cycles for required time
int TICKS = 65536-TEMP;												//Value for TCNT1 to implement timing by overflow
 6cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <TEMP>
 6d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TEMP+0x1>
 6d4:	91 95       	neg	r25
 6d6:	81 95       	neg	r24
 6d8:	91 09       	sbc	r25, r1
 6da:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <TICKS+0x1>
 6de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <TICKS>
 6e2:	08 95       	ret

000006e4 <__subsf3>:
 6e4:	50 58       	subi	r21, 0x80	; 128

000006e6 <__addsf3>:
 6e6:	bb 27       	eor	r27, r27
 6e8:	aa 27       	eor	r26, r26
 6ea:	0e 94 8a 03 	call	0x714	; 0x714 <__addsf3x>
 6ee:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
 6f2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__addsf3+0x20>
 6f8:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__addsf3+0x20>
 6fe:	39 f4       	brne	.+14     	; 0x70e <__addsf3+0x28>
 700:	9f 3f       	cpi	r25, 0xFF	; 255
 702:	19 f4       	brne	.+6      	; 0x70a <__addsf3+0x24>
 704:	26 f4       	brtc	.+8      	; 0x70e <__addsf3+0x28>
 706:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_nan>
 70a:	0e f4       	brtc	.+2      	; 0x70e <__addsf3+0x28>
 70c:	e0 95       	com	r30
 70e:	e7 fb       	bst	r30, 7
 710:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_inf>

00000714 <__addsf3x>:
 714:	e9 2f       	mov	r30, r25
 716:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
 71a:	58 f3       	brcs	.-42     	; 0x6f2 <__addsf3+0xc>
 71c:	ba 17       	cp	r27, r26
 71e:	62 07       	cpc	r22, r18
 720:	73 07       	cpc	r23, r19
 722:	84 07       	cpc	r24, r20
 724:	95 07       	cpc	r25, r21
 726:	20 f0       	brcs	.+8      	; 0x730 <__addsf3x+0x1c>
 728:	79 f4       	brne	.+30     	; 0x748 <__addsf3x+0x34>
 72a:	a6 f5       	brtc	.+104    	; 0x794 <__addsf3x+0x80>
 72c:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_zero>
 730:	0e f4       	brtc	.+2      	; 0x734 <__addsf3x+0x20>
 732:	e0 95       	com	r30
 734:	0b 2e       	mov	r0, r27
 736:	ba 2f       	mov	r27, r26
 738:	a0 2d       	mov	r26, r0
 73a:	0b 01       	movw	r0, r22
 73c:	b9 01       	movw	r22, r18
 73e:	90 01       	movw	r18, r0
 740:	0c 01       	movw	r0, r24
 742:	ca 01       	movw	r24, r20
 744:	a0 01       	movw	r20, r0
 746:	11 24       	eor	r1, r1
 748:	ff 27       	eor	r31, r31
 74a:	59 1b       	sub	r21, r25
 74c:	99 f0       	breq	.+38     	; 0x774 <__addsf3x+0x60>
 74e:	59 3f       	cpi	r21, 0xF9	; 249
 750:	50 f4       	brcc	.+20     	; 0x766 <__addsf3x+0x52>
 752:	50 3e       	cpi	r21, 0xE0	; 224
 754:	68 f1       	brcs	.+90     	; 0x7b0 <__addsf3x+0x9c>
 756:	1a 16       	cp	r1, r26
 758:	f0 40       	sbci	r31, 0x00	; 0
 75a:	a2 2f       	mov	r26, r18
 75c:	23 2f       	mov	r18, r19
 75e:	34 2f       	mov	r19, r20
 760:	44 27       	eor	r20, r20
 762:	58 5f       	subi	r21, 0xF8	; 248
 764:	f3 cf       	rjmp	.-26     	; 0x74c <__addsf3x+0x38>
 766:	46 95       	lsr	r20
 768:	37 95       	ror	r19
 76a:	27 95       	ror	r18
 76c:	a7 95       	ror	r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	53 95       	inc	r21
 772:	c9 f7       	brne	.-14     	; 0x766 <__addsf3x+0x52>
 774:	7e f4       	brtc	.+30     	; 0x794 <__addsf3x+0x80>
 776:	1f 16       	cp	r1, r31
 778:	ba 0b       	sbc	r27, r26
 77a:	62 0b       	sbc	r22, r18
 77c:	73 0b       	sbc	r23, r19
 77e:	84 0b       	sbc	r24, r20
 780:	ba f0       	brmi	.+46     	; 0x7b0 <__addsf3x+0x9c>
 782:	91 50       	subi	r25, 0x01	; 1
 784:	a1 f0       	breq	.+40     	; 0x7ae <__addsf3x+0x9a>
 786:	ff 0f       	add	r31, r31
 788:	bb 1f       	adc	r27, r27
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	c2 f7       	brpl	.-16     	; 0x782 <__addsf3x+0x6e>
 792:	0e c0       	rjmp	.+28     	; 0x7b0 <__addsf3x+0x9c>
 794:	ba 0f       	add	r27, r26
 796:	62 1f       	adc	r22, r18
 798:	73 1f       	adc	r23, r19
 79a:	84 1f       	adc	r24, r20
 79c:	48 f4       	brcc	.+18     	; 0x7b0 <__addsf3x+0x9c>
 79e:	87 95       	ror	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b7 95       	ror	r27
 7a6:	f7 95       	ror	r31
 7a8:	9e 3f       	cpi	r25, 0xFE	; 254
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <__addsf3x+0x9a>
 7ac:	b0 cf       	rjmp	.-160    	; 0x70e <__addsf3+0x28>
 7ae:	93 95       	inc	r25
 7b0:	88 0f       	add	r24, r24
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__addsf3x+0xa2>
 7b4:	99 27       	eor	r25, r25
 7b6:	ee 0f       	add	r30, r30
 7b8:	97 95       	ror	r25
 7ba:	87 95       	ror	r24
 7bc:	08 95       	ret

000007be <__divsf3>:
 7be:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3x>
 7c2:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
 7c6:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
 7ca:	58 f0       	brcs	.+22     	; 0x7e2 <__divsf3+0x24>
 7cc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
 7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__divsf3+0x24>
 7d2:	29 f4       	brne	.+10     	; 0x7de <__divsf3+0x20>
 7d4:	5f 3f       	cpi	r21, 0xFF	; 255
 7d6:	29 f0       	breq	.+10     	; 0x7e2 <__divsf3+0x24>
 7d8:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_inf>
 7dc:	51 11       	cpse	r21, r1
 7de:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
 7e2:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_nan>

000007e6 <__divsf3x>:
 7e6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
 7ea:	68 f3       	brcs	.-38     	; 0x7c6 <__divsf3+0x8>

000007ec <__divsf3_pse>:
 7ec:	99 23       	and	r25, r25
 7ee:	b1 f3       	breq	.-20     	; 0x7dc <__divsf3+0x1e>
 7f0:	55 23       	and	r21, r21
 7f2:	91 f3       	breq	.-28     	; 0x7d8 <__divsf3+0x1a>
 7f4:	95 1b       	sub	r25, r21
 7f6:	55 0b       	sbc	r21, r21
 7f8:	bb 27       	eor	r27, r27
 7fa:	aa 27       	eor	r26, r26
 7fc:	62 17       	cp	r22, r18
 7fe:	73 07       	cpc	r23, r19
 800:	84 07       	cpc	r24, r20
 802:	38 f0       	brcs	.+14     	; 0x812 <__divsf3_pse+0x26>
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	5f 4f       	sbci	r21, 0xFF	; 255
 808:	22 0f       	add	r18, r18
 80a:	33 1f       	adc	r19, r19
 80c:	44 1f       	adc	r20, r20
 80e:	aa 1f       	adc	r26, r26
 810:	a9 f3       	breq	.-22     	; 0x7fc <__divsf3_pse+0x10>
 812:	35 d0       	rcall	.+106    	; 0x87e <__stack+0x1f>
 814:	0e 2e       	mov	r0, r30
 816:	3a f0       	brmi	.+14     	; 0x826 <__divsf3_pse+0x3a>
 818:	e0 e8       	ldi	r30, 0x80	; 128
 81a:	32 d0       	rcall	.+100    	; 0x880 <__stack+0x21>
 81c:	91 50       	subi	r25, 0x01	; 1
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	e6 95       	lsr	r30
 822:	00 1c       	adc	r0, r0
 824:	ca f7       	brpl	.-14     	; 0x818 <__divsf3_pse+0x2c>
 826:	2b d0       	rcall	.+86     	; 0x87e <__stack+0x1f>
 828:	fe 2f       	mov	r31, r30
 82a:	29 d0       	rcall	.+82     	; 0x87e <__stack+0x1f>
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	bb 1f       	adc	r27, r27
 834:	26 17       	cp	r18, r22
 836:	37 07       	cpc	r19, r23
 838:	48 07       	cpc	r20, r24
 83a:	ab 07       	cpc	r26, r27
 83c:	b0 e8       	ldi	r27, 0x80	; 128
 83e:	09 f0       	breq	.+2      	; 0x842 <__divsf3_pse+0x56>
 840:	bb 0b       	sbc	r27, r27
 842:	80 2d       	mov	r24, r0
 844:	bf 01       	movw	r22, r30
 846:	ff 27       	eor	r31, r31
 848:	93 58       	subi	r25, 0x83	; 131
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	3a f0       	brmi	.+14     	; 0x85c <__divsf3_pse+0x70>
 84e:	9e 3f       	cpi	r25, 0xFE	; 254
 850:	51 05       	cpc	r21, r1
 852:	78 f0       	brcs	.+30     	; 0x872 <__stack+0x13>
 854:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_inf>
 858:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
 85c:	5f 3f       	cpi	r21, 0xFF	; 255
 85e:	e4 f3       	brlt	.-8      	; 0x858 <__divsf3_pse+0x6c>
 860:	98 3e       	cpi	r25, 0xE8	; 232
 862:	d4 f3       	brlt	.-12     	; 0x858 <__divsf3_pse+0x6c>
 864:	86 95       	lsr	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f7 95       	ror	r31
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	c9 f7       	brne	.-14     	; 0x864 <__stack+0x5>
 872:	88 0f       	add	r24, r24
 874:	91 1d       	adc	r25, r1
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret
 87e:	e1 e0       	ldi	r30, 0x01	; 1
 880:	66 0f       	add	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	bb 1f       	adc	r27, r27
 888:	62 17       	cp	r22, r18
 88a:	73 07       	cpc	r23, r19
 88c:	84 07       	cpc	r24, r20
 88e:	ba 07       	cpc	r27, r26
 890:	20 f0       	brcs	.+8      	; 0x89a <__stack+0x3b>
 892:	62 1b       	sub	r22, r18
 894:	73 0b       	sbc	r23, r19
 896:	84 0b       	sbc	r24, r20
 898:	ba 0b       	sbc	r27, r26
 89a:	ee 1f       	adc	r30, r30
 89c:	88 f7       	brcc	.-30     	; 0x880 <__stack+0x21>
 89e:	e0 95       	com	r30
 8a0:	08 95       	ret

000008a2 <__fixsfsi>:
 8a2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 8a6:	68 94       	set
 8a8:	b1 11       	cpse	r27, r1
 8aa:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
 8ae:	08 95       	ret

000008b0 <__fixunssfsi>:
 8b0:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_splitA>
 8b4:	88 f0       	brcs	.+34     	; 0x8d8 <__fixunssfsi+0x28>
 8b6:	9f 57       	subi	r25, 0x7F	; 127
 8b8:	98 f0       	brcs	.+38     	; 0x8e0 <__fixunssfsi+0x30>
 8ba:	b9 2f       	mov	r27, r25
 8bc:	99 27       	eor	r25, r25
 8be:	b7 51       	subi	r27, 0x17	; 23
 8c0:	b0 f0       	brcs	.+44     	; 0x8ee <__fixunssfsi+0x3e>
 8c2:	e1 f0       	breq	.+56     	; 0x8fc <__fixunssfsi+0x4c>
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	1a f0       	brmi	.+6      	; 0x8d4 <__fixunssfsi+0x24>
 8ce:	ba 95       	dec	r27
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__fixunssfsi+0x14>
 8d2:	14 c0       	rjmp	.+40     	; 0x8fc <__fixunssfsi+0x4c>
 8d4:	b1 30       	cpi	r27, 0x01	; 1
 8d6:	91 f0       	breq	.+36     	; 0x8fc <__fixunssfsi+0x4c>
 8d8:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_zero>
 8dc:	b1 e0       	ldi	r27, 0x01	; 1
 8de:	08 95       	ret
 8e0:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_zero>
 8e4:	67 2f       	mov	r22, r23
 8e6:	78 2f       	mov	r23, r24
 8e8:	88 27       	eor	r24, r24
 8ea:	b8 5f       	subi	r27, 0xF8	; 248
 8ec:	39 f0       	breq	.+14     	; 0x8fc <__fixunssfsi+0x4c>
 8ee:	b9 3f       	cpi	r27, 0xF9	; 249
 8f0:	cc f3       	brlt	.-14     	; 0x8e4 <__fixunssfsi+0x34>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b3 95       	inc	r27
 8fa:	d9 f7       	brne	.-10     	; 0x8f2 <__fixunssfsi+0x42>
 8fc:	3e f4       	brtc	.+14     	; 0x90c <__fixunssfsi+0x5c>
 8fe:	90 95       	com	r25
 900:	80 95       	com	r24
 902:	70 95       	com	r23
 904:	61 95       	neg	r22
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	08 95       	ret

0000090e <__floatunsisf>:
 90e:	e8 94       	clt
 910:	09 c0       	rjmp	.+18     	; 0x924 <__floatsisf+0x12>

00000912 <__floatsisf>:
 912:	97 fb       	bst	r25, 7
 914:	3e f4       	brtc	.+14     	; 0x924 <__floatsisf+0x12>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	99 23       	and	r25, r25
 926:	a9 f0       	breq	.+42     	; 0x952 <__floatsisf+0x40>
 928:	f9 2f       	mov	r31, r25
 92a:	96 e9       	ldi	r25, 0x96	; 150
 92c:	bb 27       	eor	r27, r27
 92e:	93 95       	inc	r25
 930:	f6 95       	lsr	r31
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f1 11       	cpse	r31, r1
 93c:	f8 cf       	rjmp	.-16     	; 0x92e <__floatsisf+0x1c>
 93e:	fa f4       	brpl	.+62     	; 0x97e <__floatsisf+0x6c>
 940:	bb 0f       	add	r27, r27
 942:	11 f4       	brne	.+4      	; 0x948 <__floatsisf+0x36>
 944:	60 ff       	sbrs	r22, 0
 946:	1b c0       	rjmp	.+54     	; 0x97e <__floatsisf+0x6c>
 948:	6f 5f       	subi	r22, 0xFF	; 255
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	16 c0       	rjmp	.+44     	; 0x97e <__floatsisf+0x6c>
 952:	88 23       	and	r24, r24
 954:	11 f0       	breq	.+4      	; 0x95a <__floatsisf+0x48>
 956:	96 e9       	ldi	r25, 0x96	; 150
 958:	11 c0       	rjmp	.+34     	; 0x97c <__floatsisf+0x6a>
 95a:	77 23       	and	r23, r23
 95c:	21 f0       	breq	.+8      	; 0x966 <__floatsisf+0x54>
 95e:	9e e8       	ldi	r25, 0x8E	; 142
 960:	87 2f       	mov	r24, r23
 962:	76 2f       	mov	r23, r22
 964:	05 c0       	rjmp	.+10     	; 0x970 <__floatsisf+0x5e>
 966:	66 23       	and	r22, r22
 968:	71 f0       	breq	.+28     	; 0x986 <__floatsisf+0x74>
 96a:	96 e8       	ldi	r25, 0x86	; 134
 96c:	86 2f       	mov	r24, r22
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	2a f0       	brmi	.+10     	; 0x97e <__floatsisf+0x6c>
 974:	9a 95       	dec	r25
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	da f7       	brpl	.-10     	; 0x974 <__floatsisf+0x62>
 97e:	88 0f       	add	r24, r24
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret
 988:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
 98c:	20 f0       	brcs	.+8      	; 0x996 <__floatsisf+0x84>
 98e:	19 f0       	breq	.+6      	; 0x996 <__floatsisf+0x84>
 990:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
 994:	50 f4       	brcc	.+20     	; 0x9aa <fmod+0xc>
 996:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_nan>
 99a:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>

0000099e <fmod>:
 99e:	e9 2f       	mov	r30, r25
 9a0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
 9a4:	88 f3       	brcs	.-30     	; 0x988 <__floatsisf+0x76>
 9a6:	55 23       	and	r21, r21
 9a8:	b1 f3       	breq	.-20     	; 0x996 <__floatsisf+0x84>
 9aa:	e7 fb       	bst	r30, 7
 9ac:	62 17       	cp	r22, r18
 9ae:	73 07       	cpc	r23, r19
 9b0:	84 07       	cpc	r24, r20
 9b2:	95 07       	cpc	r25, r21
 9b4:	a8 f1       	brcs	.+106    	; 0xa20 <fmod+0x82>
 9b6:	89 f3       	breq	.-30     	; 0x99a <__floatsisf+0x88>
 9b8:	e9 2f       	mov	r30, r25
 9ba:	ff 27       	eor	r31, r31
 9bc:	88 23       	and	r24, r24
 9be:	2a f0       	brmi	.+10     	; 0x9ca <fmod+0x2c>
 9c0:	31 97       	sbiw	r30, 0x01	; 1
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	da f7       	brpl	.-10     	; 0x9c0 <fmod+0x22>
 9ca:	95 2f       	mov	r25, r21
 9cc:	55 27       	eor	r21, r21
 9ce:	44 23       	and	r20, r20
 9d0:	32 f0       	brmi	.+12     	; 0x9de <fmod+0x40>
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	22 0f       	add	r18, r18
 9d8:	33 1f       	adc	r19, r19
 9da:	44 1f       	adc	r20, r20
 9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <fmod+0x34>
 9de:	bb 27       	eor	r27, r27
 9e0:	e9 1b       	sub	r30, r25
 9e2:	f5 0b       	sbc	r31, r21
 9e4:	62 1b       	sub	r22, r18
 9e6:	73 0b       	sbc	r23, r19
 9e8:	84 0b       	sbc	r24, r20
 9ea:	b1 09       	sbc	r27, r1
 9ec:	b1 f2       	breq	.-84     	; 0x99a <__floatsisf+0x88>
 9ee:	22 f4       	brpl	.+8      	; 0x9f8 <fmod+0x5a>
 9f0:	62 0f       	add	r22, r18
 9f2:	73 1f       	adc	r23, r19
 9f4:	84 1f       	adc	r24, r20
 9f6:	b1 1d       	adc	r27, r1
 9f8:	31 97       	sbiw	r30, 0x01	; 1
 9fa:	2a f0       	brmi	.+10     	; 0xa06 <fmod+0x68>
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	bb 1f       	adc	r27, r27
 a04:	ef cf       	rjmp	.-34     	; 0x9e4 <fmod+0x46>
 a06:	91 50       	subi	r25, 0x01	; 1
 a08:	50 40       	sbci	r21, 0x00	; 0
 a0a:	62 f0       	brmi	.+24     	; 0xa24 <fmod+0x86>
 a0c:	41 f0       	breq	.+16     	; 0xa1e <fmod+0x80>
 a0e:	88 23       	and	r24, r24
 a10:	32 f0       	brmi	.+12     	; 0xa1e <fmod+0x80>
 a12:	66 0f       	add	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	50 40       	sbci	r21, 0x00	; 0
 a1c:	c1 f7       	brne	.-16     	; 0xa0e <fmod+0x70>
 a1e:	93 95       	inc	r25
 a20:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_mpack>
 a24:	86 95       	lsr	r24
 a26:	77 95       	ror	r23
 a28:	67 95       	ror	r22
 a2a:	9f 5f       	subi	r25, 0xFF	; 255
 a2c:	d9 f7       	brne	.-10     	; 0xa24 <fmod+0x86>
 a2e:	f7 cf       	rjmp	.-18     	; 0xa1e <fmod+0x80>

00000a30 <__fp_inf>:
 a30:	97 f9       	bld	r25, 7
 a32:	9f 67       	ori	r25, 0x7F	; 127
 a34:	80 e8       	ldi	r24, 0x80	; 128
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	08 95       	ret

00000a3c <__fp_mpack>:
 a3c:	9f 3f       	cpi	r25, 0xFF	; 255
 a3e:	31 f0       	breq	.+12     	; 0xa4c <__fp_mpack_finite+0xc>

00000a40 <__fp_mpack_finite>:
 a40:	91 50       	subi	r25, 0x01	; 1
 a42:	20 f4       	brcc	.+8      	; 0xa4c <__fp_mpack_finite+0xc>
 a44:	87 95       	ror	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b7 95       	ror	r27
 a4c:	88 0f       	add	r24, r24
 a4e:	91 1d       	adc	r25, r1
 a50:	96 95       	lsr	r25
 a52:	87 95       	ror	r24
 a54:	97 f9       	bld	r25, 7
 a56:	08 95       	ret

00000a58 <__fp_nan>:
 a58:	9f ef       	ldi	r25, 0xFF	; 255
 a5a:	80 ec       	ldi	r24, 0xC0	; 192
 a5c:	08 95       	ret

00000a5e <__fp_pscA>:
 a5e:	00 24       	eor	r0, r0
 a60:	0a 94       	dec	r0
 a62:	16 16       	cp	r1, r22
 a64:	17 06       	cpc	r1, r23
 a66:	18 06       	cpc	r1, r24
 a68:	09 06       	cpc	r0, r25
 a6a:	08 95       	ret

00000a6c <__fp_pscB>:
 a6c:	00 24       	eor	r0, r0
 a6e:	0a 94       	dec	r0
 a70:	12 16       	cp	r1, r18
 a72:	13 06       	cpc	r1, r19
 a74:	14 06       	cpc	r1, r20
 a76:	05 06       	cpc	r0, r21
 a78:	08 95       	ret

00000a7a <__fp_round>:
 a7a:	09 2e       	mov	r0, r25
 a7c:	03 94       	inc	r0
 a7e:	00 0c       	add	r0, r0
 a80:	11 f4       	brne	.+4      	; 0xa86 <__fp_round+0xc>
 a82:	88 23       	and	r24, r24
 a84:	52 f0       	brmi	.+20     	; 0xa9a <__fp_round+0x20>
 a86:	bb 0f       	add	r27, r27
 a88:	40 f4       	brcc	.+16     	; 0xa9a <__fp_round+0x20>
 a8a:	bf 2b       	or	r27, r31
 a8c:	11 f4       	brne	.+4      	; 0xa92 <__fp_round+0x18>
 a8e:	60 ff       	sbrs	r22, 0
 a90:	04 c0       	rjmp	.+8      	; 0xa9a <__fp_round+0x20>
 a92:	6f 5f       	subi	r22, 0xFF	; 255
 a94:	7f 4f       	sbci	r23, 0xFF	; 255
 a96:	8f 4f       	sbci	r24, 0xFF	; 255
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	08 95       	ret

00000a9c <__fp_split3>:
 a9c:	57 fd       	sbrc	r21, 7
 a9e:	90 58       	subi	r25, 0x80	; 128
 aa0:	44 0f       	add	r20, r20
 aa2:	55 1f       	adc	r21, r21
 aa4:	59 f0       	breq	.+22     	; 0xabc <__fp_splitA+0x10>
 aa6:	5f 3f       	cpi	r21, 0xFF	; 255
 aa8:	71 f0       	breq	.+28     	; 0xac6 <__fp_splitA+0x1a>
 aaa:	47 95       	ror	r20

00000aac <__fp_splitA>:
 aac:	88 0f       	add	r24, r24
 aae:	97 fb       	bst	r25, 7
 ab0:	99 1f       	adc	r25, r25
 ab2:	61 f0       	breq	.+24     	; 0xacc <__fp_splitA+0x20>
 ab4:	9f 3f       	cpi	r25, 0xFF	; 255
 ab6:	79 f0       	breq	.+30     	; 0xad6 <__fp_splitA+0x2a>
 ab8:	87 95       	ror	r24
 aba:	08 95       	ret
 abc:	12 16       	cp	r1, r18
 abe:	13 06       	cpc	r1, r19
 ac0:	14 06       	cpc	r1, r20
 ac2:	55 1f       	adc	r21, r21
 ac4:	f2 cf       	rjmp	.-28     	; 0xaaa <__fp_split3+0xe>
 ac6:	46 95       	lsr	r20
 ac8:	f1 df       	rcall	.-30     	; 0xaac <__fp_splitA>
 aca:	08 c0       	rjmp	.+16     	; 0xadc <__fp_splitA+0x30>
 acc:	16 16       	cp	r1, r22
 ace:	17 06       	cpc	r1, r23
 ad0:	18 06       	cpc	r1, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	f1 cf       	rjmp	.-30     	; 0xab8 <__fp_splitA+0xc>
 ad6:	86 95       	lsr	r24
 ad8:	71 05       	cpc	r23, r1
 ada:	61 05       	cpc	r22, r1
 adc:	08 94       	sec
 ade:	08 95       	ret

00000ae0 <__fp_zero>:
 ae0:	e8 94       	clt

00000ae2 <__fp_szero>:
 ae2:	bb 27       	eor	r27, r27
 ae4:	66 27       	eor	r22, r22
 ae6:	77 27       	eor	r23, r23
 ae8:	cb 01       	movw	r24, r22
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret

00000aee <__mulsf3>:
 aee:	0e 94 8a 05 	call	0xb14	; 0xb14 <__mulsf3x>
 af2:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
 af6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
 afa:	38 f0       	brcs	.+14     	; 0xb0a <__mulsf3+0x1c>
 afc:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
 b00:	20 f0       	brcs	.+8      	; 0xb0a <__mulsf3+0x1c>
 b02:	95 23       	and	r25, r21
 b04:	11 f0       	breq	.+4      	; 0xb0a <__mulsf3+0x1c>
 b06:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_inf>
 b0a:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_nan>
 b0e:	11 24       	eor	r1, r1
 b10:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>

00000b14 <__mulsf3x>:
 b14:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_split3>
 b18:	70 f3       	brcs	.-36     	; 0xaf6 <__mulsf3+0x8>

00000b1a <__mulsf3_pse>:
 b1a:	95 9f       	mul	r25, r21
 b1c:	c1 f3       	breq	.-16     	; 0xb0e <__mulsf3+0x20>
 b1e:	95 0f       	add	r25, r21
 b20:	50 e0       	ldi	r21, 0x00	; 0
 b22:	55 1f       	adc	r21, r21
 b24:	62 9f       	mul	r22, r18
 b26:	f0 01       	movw	r30, r0
 b28:	72 9f       	mul	r23, r18
 b2a:	bb 27       	eor	r27, r27
 b2c:	f0 0d       	add	r31, r0
 b2e:	b1 1d       	adc	r27, r1
 b30:	63 9f       	mul	r22, r19
 b32:	aa 27       	eor	r26, r26
 b34:	f0 0d       	add	r31, r0
 b36:	b1 1d       	adc	r27, r1
 b38:	aa 1f       	adc	r26, r26
 b3a:	64 9f       	mul	r22, r20
 b3c:	66 27       	eor	r22, r22
 b3e:	b0 0d       	add	r27, r0
 b40:	a1 1d       	adc	r26, r1
 b42:	66 1f       	adc	r22, r22
 b44:	82 9f       	mul	r24, r18
 b46:	22 27       	eor	r18, r18
 b48:	b0 0d       	add	r27, r0
 b4a:	a1 1d       	adc	r26, r1
 b4c:	62 1f       	adc	r22, r18
 b4e:	73 9f       	mul	r23, r19
 b50:	b0 0d       	add	r27, r0
 b52:	a1 1d       	adc	r26, r1
 b54:	62 1f       	adc	r22, r18
 b56:	83 9f       	mul	r24, r19
 b58:	a0 0d       	add	r26, r0
 b5a:	61 1d       	adc	r22, r1
 b5c:	22 1f       	adc	r18, r18
 b5e:	74 9f       	mul	r23, r20
 b60:	33 27       	eor	r19, r19
 b62:	a0 0d       	add	r26, r0
 b64:	61 1d       	adc	r22, r1
 b66:	23 1f       	adc	r18, r19
 b68:	84 9f       	mul	r24, r20
 b6a:	60 0d       	add	r22, r0
 b6c:	21 1d       	adc	r18, r1
 b6e:	82 2f       	mov	r24, r18
 b70:	76 2f       	mov	r23, r22
 b72:	6a 2f       	mov	r22, r26
 b74:	11 24       	eor	r1, r1
 b76:	9f 57       	subi	r25, 0x7F	; 127
 b78:	50 40       	sbci	r21, 0x00	; 0
 b7a:	9a f0       	brmi	.+38     	; 0xba2 <__mulsf3_pse+0x88>
 b7c:	f1 f0       	breq	.+60     	; 0xbba <__mulsf3_pse+0xa0>
 b7e:	88 23       	and	r24, r24
 b80:	4a f0       	brmi	.+18     	; 0xb94 <__mulsf3_pse+0x7a>
 b82:	ee 0f       	add	r30, r30
 b84:	ff 1f       	adc	r31, r31
 b86:	bb 1f       	adc	r27, r27
 b88:	66 1f       	adc	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	91 50       	subi	r25, 0x01	; 1
 b90:	50 40       	sbci	r21, 0x00	; 0
 b92:	a9 f7       	brne	.-22     	; 0xb7e <__mulsf3_pse+0x64>
 b94:	9e 3f       	cpi	r25, 0xFE	; 254
 b96:	51 05       	cpc	r21, r1
 b98:	80 f0       	brcs	.+32     	; 0xbba <__mulsf3_pse+0xa0>
 b9a:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_inf>
 b9e:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_szero>
 ba2:	5f 3f       	cpi	r21, 0xFF	; 255
 ba4:	e4 f3       	brlt	.-8      	; 0xb9e <__mulsf3_pse+0x84>
 ba6:	98 3e       	cpi	r25, 0xE8	; 232
 ba8:	d4 f3       	brlt	.-12     	; 0xb9e <__mulsf3_pse+0x84>
 baa:	86 95       	lsr	r24
 bac:	77 95       	ror	r23
 bae:	67 95       	ror	r22
 bb0:	b7 95       	ror	r27
 bb2:	f7 95       	ror	r31
 bb4:	e7 95       	ror	r30
 bb6:	9f 5f       	subi	r25, 0xFF	; 255
 bb8:	c1 f7       	brne	.-16     	; 0xbaa <__mulsf3_pse+0x90>
 bba:	fe 2b       	or	r31, r30
 bbc:	88 0f       	add	r24, r24
 bbe:	91 1d       	adc	r25, r1
 bc0:	96 95       	lsr	r25
 bc2:	87 95       	ror	r24
 bc4:	97 f9       	bld	r25, 7
 bc6:	08 95       	ret

00000bc8 <__tablejump2__>:
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	05 90       	lpm	r0, Z+
 bce:	f4 91       	lpm	r31, Z
 bd0:	e0 2d       	mov	r30, r0
 bd2:	09 94       	ijmp

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
